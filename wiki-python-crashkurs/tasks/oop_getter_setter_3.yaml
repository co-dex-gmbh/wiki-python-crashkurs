title: "Dekoratoren für Properties"
question: |
  Passe deine Lösungen aus den Aufgaben "Notendurchschnitt" und "Radius und Durchmesser" so an, dass sie mit Dekoratoren funktionieren.
  Stelle sicher, dass alle vorherigen Anforderungen weiterhin erfüllt sind.

solution: |
  ```python
  # Lösung für Student
  class Student:
      def __init__(self, mathe, python, englisch):
          self.mathe = mathe
          self.python = python
          self.englisch = englisch

      @property
      def durchschnitt(self):
          return (self.mathe + self.python + self.englisch) / 3

  # Lösung für Kreis
  class Kreis:
      def __init__(self, radius):
          self.radius = radius

      @property
      def radius(self):
          return self.__radius

      @radius.setter
      def radius(self, radius):
          if isinstance(radius, (int, float)):
              self.__radius = max(0, radius)
          else:
              raise TypeError("Radius muss eine Zahl sein")

      @property
      def diameter(self):
          return self.radius * 2

      @diameter.setter
      def diameter(self, diameter):
          self.radius = diameter / 2

      def __mul__(self, other):
          if isinstance(other, (int, float)):
              return Kreis(self.radius * other)
          else:
              raise TypeError("Multiplikator muss eine Zahl sein")
  ```

  Diese Lösungen verwenden Dekoratoren, um die Properties zu definieren. 
  Für `Student` ist `durchschnitt` ein read-only Property. 
  Für `Kreis` sind sowohl `radius` als auch `diameter` vollständige Properties mit Gettern und Settern.