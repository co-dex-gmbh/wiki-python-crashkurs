title: Drei Gleich
question: |
  Wir wollen eine Funktion entwickeln, prüft, ob in einer Liste die Elemente an dre Positionen gleich sind.
  Der Methodenkopf sieht wie folgt aus:
  
  ```python
  def drei_gleich(liste, pos0, pos1, pos2):
      return ...
  ```
  
  Hier haben wir schon einige Tests vorbereitet:
  
  ``` { .python hl_lines="" }
  import unittest  
  
  class TestDreiGleich(unittest.TestCase):
      def test_drei_gleich_0(self):
          self.assertEqual(drei_gleich([1, 1, 1], 0, 1, 2), True)
          
      def test_drei_gleich_1(self):
          self.assertEqual(drei_gleich([1, 2, 1, 3, 1], 0, 2, 4), True)
          
      def test_drei_gleich_2(self):
          self.assertEqual(drei_gleich([1, 2, 1, 3, 1], 0, 1, 2), False)
          
      def test_drei_gleich_3(self):
          self.assertEqual(drei_gleich([1, 1, 2], 0, 1, 2), False)

  
  if __name__ == '__main__':
      unittest.main()
  ```
  
  Implementieren Sie die Funktion, sodass alle Tests grün werden.

tip: |
  * Mit der Notation `my_list[pos]` kann in einer Liste auf das Element an der Stelle `pos` zugegriffen werden.
  * Mit `a == b` kann man überprüfen, ob zwei Elemente gleich sind.
  * Mit `a == b == c` kann man prüfen, ob drei Elemente gleich sind.

solution: |
  ```python
  def drei_gleich(liste, pos0, pos1, pos2):
      return liste[pos0] == liste[pos1] == liste[pos2]
  ```
solution_video: https://www.youtube.com/embed/xyR5gf1OXZI?si=CR_N_AcXu7QjNpXc
