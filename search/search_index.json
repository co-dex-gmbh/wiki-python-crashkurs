{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Crashkurs","text":"<ul> <li> Python Grundlagen</li> <li> Installation</li> <li> Variablen</li> <li> Bedingter Code</li> <li> Schleifen</li> <li> Collections</li> <li> List Comprehension</li> <li> Funktionen</li> <li> Error Handling</li> <li> Module &amp; Pakete</li> <li> Virtuelle Umgebung</li> <li> Plotting &amp; Dashboards</li> <li> OOP</li> <li> Unit Tests</li> <li> Dateioperationen</li> <li> Versionskontrolle</li> <li> Projekt</li> </ul> <p>Schneller Navigieren</p> <p>P oder , : Zur vorherigen Seite gehen (Previous)</p> <p>N oder . : Zur n\u00e4chsten Seite gehen (Next)</p> <p></p>"},{"location":"content/_venv/_venv/","title":"Virtuelle Umgebungen in Pyton","text":"<p>In Python k\u00f6nnen virtuelle Umgebungen erstellt werden, um die Abh\u00e4ngigkeiten von Projekten zu verwalten. Dies ist besonders n\u00fctzlich, wenn mehrere Projekte unterschiedliche Versionen von Bibliotheken ben\u00f6tigen. In diesem Kapitel wird gezeigt, wie virtuelle Umgebungen in Python erstellt und verwendet werden.</p>"},{"location":"content/_venv/_venv/#wie-funktioniert-eine-virtuelle-umgebung","title":"Wie funktioniert eine virtuelle Umgebung?","text":"<p>Eine virtuelle Umgebung ist ein Verzeichnis, das alle notwendigen Dateien enth\u00e4lt, um eine isolierte Umgebung f\u00fcr ein Python-Projekt zu erstellen. Dies bedeutet, dass jede virtuelle Umgebung ihre eigene Kopie von Python und Bibliotheken enth\u00e4lt. Wenn eine virtuelle Umgebung aktiviert ist, werden alle Python-Befehle auf die Kopie von Python und die Bibliotheken in der virtuellen Umgebung umgeleitet.</p>"},{"location":"content/_venv/_venv/#erstellen-einer-virtuellen-umgebung","title":"Erstellen einer virtuellen Umgebung","text":"<p>Eine virtuelle Umgebung kann mit dem Modul <code>venv</code> erstellt werden. Das Modul <code>venv</code> ist in Python 3.3 und h\u00f6her standardm\u00e4\u00dfig enthalten. Um eine virtuelle Umgebung zu erstellen, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>python -m venv &lt;name&gt;\n</code></pre> <p>Der Befehl erstellt ein Verzeichnis mit dem Namen <code>&lt;name&gt;</code>, das die virtuelle Umgebung enth\u00e4lt. Der Name kann frei gew\u00e4hlt werden. Um die virtuelle Umgebung zu aktivieren, f\u00fchren Sie unter Windows den folgenden Befehl aus:</p> <pre><code>&lt;name&gt;\\Scripts\\activate\n</code></pre> <p>Achtung</p> <p>Unter Linux und macOS lautet der Befehl <code>source &lt;name&gt;/bin/activate</code>.</p> <p>Hinweis</p> <p>In VS Code kann die virtuelle Umgebung \u00fcber das Dropdown-Men\u00fc in der unteren rechten Ecke ausgew\u00e4hlt werden. Oftmals wird die virtuelle Umgebung automatisch erkannt.</p> <p>Um die virtuelle Umgebung zu deaktivieren, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>deactivate\n</code></pre>"},{"location":"content/_venv/_venv/#installieren-von-bibliotheken","title":"Installieren von Bibliotheken","text":"<p>Nachdem die virtuelle Umgebung aktiviert ist, k\u00f6nnen Bibliotheken mit dem Befehl <code>pip install</code> installiert werden. Die Bibliotheken werden in der virtuellen Umgebung installiert und sind nur f\u00fcr das aktuelle Projekt verf\u00fcgbar.</p> <pre><code>pip install &lt;library&gt;\n</code></pre> <p>Wollen Sie beispielweise die Bibliothek <code>pandas</code> installieren, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>pip install pandas\n</code></pre>"},{"location":"content/_venv/_venv/#requirements-datei","title":"Requirements-Datei","text":"<p>Um underen Kollegen oder zuk\u00fcnftigen Selbst zu zeigen, welche Bibliotheken in der virtuellen Umgebung installiert sind, kann eine Requirements-Datei erstellt werden. Die Datei enth\u00e4lt eine Liste der installierten Bibliotheken und deren Versionen. Um eine Requirements-Datei zu erstellen, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"content/bedingter_code/bedingter_code/","title":"Bedingter Code","text":"Video <p>Mit dem <code>if</code> Keyword und Einr\u00fcckungen kann man festlegen, dass Code nur unter bestimmten Bedingungen ausgef\u00fchrt wird.</p> <pre><code>name = input(\"Wie ist dein Name?\") # (1)!\nif 'q' in name: # (2)!\n    print(\"Wow, das ist ja ein seltener Name!\") # (3)!\nprint(f\"Auf jeden Fall ist dein Name {name}\") # (4)!\n</code></pre> <ol> <li>Der Nutzer wird nach seinem Namen gefragt. Die Eingabe wird in der Variable <code>name</code> gespeichert.</li> <li>Es wird gepr\u00fcft, ob der Buchstabe <code>'q'</code> in <code>name</code> auftaucht.</li> <li>Wenn <code>'q'</code> in <code>name</code> auftaucht, wird der einger\u00fcckte Code ausgef\u00fchrt. Hier k\u00f6nnen auch noch mehr Zeilen einger\u00fcckter Code stehen, die nur ausgef\u00fchrt werden, wenn die Bedingung erf\u00fcllt ist.</li> <li>Diese Zeile ist nicht einger\u00fcckt und wird daher auf jeden Fall wieder ausgef\u00fchrt.</li> </ol> <p>Code im Debugger ansehen</p> <p>Wenn die Bedingung, die neben dem <code>if</code> steht, wahr ist, dann werden die n\u00e4chsten Zeilen Code, die einger\u00fcckt sind ausgef\u00fchrt. Wenn die Bedingung aber falsch ist, werden die einger\u00fcckten Zeilen einfach \u00fcbersprungen.</p> Bedingung einf\u00fcgen <p>Ersetzten Sie die <code>...</code> im folgenden Code so, dass zun\u00e4chst gepr\u00fcft wird, ob die in <code>alter</code> gespeicherte Zahl kleiner als <code>18</code> ist und man dann eine Abfuhr erh\u00e4lt. Danach soll gepr\u00fcft werden, ob das <code>alter</code> gr\u00f6\u00dfer oder gleich <code>18</code> ist und man wird reingelassen:</p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\n\n... alter &lt; 18:\n    print(\"Dieser Film ist nichts f\u00fcr dich!\")\n\n... alter &gt;= 18:\n    print(\"Du darfst rein.\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\n\nif alter &lt; 18:\n    print(\"Dieser Film ist nichts f\u00fcr dich!\")\n\nif alter &gt;= 18:\n    print(\"Du darfst rein\")\n</code></pre>"},{"location":"content/bedingter_code/bedingung/","title":"Was ist eine Bedingung?","text":"Video <p>Eine Bedingung ist ein Ausdruck, der schlie\u00dflich zu einem booleschen Wert <code>True</code> oder <code>False</code> ausgewertet wird. Solche Bedingungen k\u00f6nnen wir leicht verstehen, indem wir sie laut vorlesen.</p> <pre><code>a = int(input(\"Gebe eine Ganzzahl ein:\"))\n\nprint(\"a ist kleiner als 5:\")\nprint(a &lt; 5)\n\nprint(\"a ist gr\u00f6\u00dfer als 10:\")\nprint(a &gt; 10)\n\nprint(\"a ist gr\u00f6\u00dfer als 1 und kleiner oder gleich 4:\")\nprint(1 &lt; a &lt;= 4)\n\nprint(\"x in Hallo\")\nprint(\"x\" in \"Hallo\")\n\nprint(\"a in Hallo\")\nprint(\"a\" in \"Hallo\")\n</code></pre> <p>Hier ist eine Liste mit den wichtigsten Operatoren f\u00fcr uns:</p> Operator Name <code>==</code> Gleich <code>!=</code> Ungleich <code>&gt;</code> (echt) Gr\u00f6\u00dfer als <code>&lt;</code> (echt) Kleiner als <code>&gt;=</code> Gr\u00f6\u00dfer oder gleich <code>&lt;=</code> Kleiner oder gleich <code>in</code> ist enthalten Boolsche Werte voraussagen <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>a = 3\nb = 5\n\nprint(a &gt; 5)\nprint(b &lt;= 5)\nprint(a + b &gt;= 5)\nprint(a &gt; b)\nprint(a + 2 == b)  \nprint(a)\nprint(b)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>a = 3\nb = 5\n\nprint(a &gt; 5) # False\nprint(b &lt;= 5) # True\nprint(a + b &gt;= 5) # True\nprint(a &gt; b) # False\nprint(a + 2 == b) # True\nprint(a) # 3\nprint(b) # 5\n</code></pre> <p>Man beachte, dass <code>a</code> und <code>b</code> in diesem Code niemals ge\u00e4ndert wurden.</p> Programmausf\u00fchrung voraussagen <p>Abh\u00e4ngig von der Variablen <code>alter</code>, hat die Variable <code>preis</code> einen anderen Inhalt.</p> <p>Sagen sie nun\u00e4chst voraus, was auf der Konsole erscheint, wenn <code>alter</code> mit <code>20</code>, <code>70</code> und <code>2</code> bef\u00fcllt ist.</p> <p>Wie l\u00e4sst sich also die Bestimmung des Preises allgemein beschreiben?</p> <pre><code>preis = 3.50\nalter = ...\n\nif alter &gt;= 65:\n    preis = preis - 2\n\nif alter &lt; 7:\n    preis = 0.0\n\nprint(f\"Mit {alter} Jahren zahlst du: {preis} \u20ac.\")\n</code></pre> Tipp <p>Die Zeile <code>preis = preis - 2</code> bedeutet, dass der Wert in der Variablen <code>preis</code> um <code>2</code> reduziert wird und dieses nun als neuer Wert in <code>preis</code> gespeichert wird.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <code>alter</code> <code>preis</code> Konsolenausgabe <code>20</code> <code>3.5</code> <code>Mit 20 Jahren zahlst du: 3.5 \u20ac</code> <code>70</code> <code>1.5</code> <code>Mit 70 Jahren zahlst du: 1.5 \u20ac</code> <code>2</code> <code>0.0</code> <code>Mit 2 Jahren zahlst du: 0 \u20ac</code> <p>Der Preis ist wie folgt aufgebaut:</p> <ul> <li>Kinder bis einschlie\u00dflich 6 Jahren zahlen nichts.</li> <li>Erwachsene ab 65 Jahren zahlen den reduzierten Preis von 1,50 \u20ac.</li> <li>Alle anderen Zahlen 3,50 \u20ac.</li> </ul> Eingabe korrigieren <p>Ersetze die <code>...</code> in folgendem Programm so dass eine Eingabe von negativen Zahlen (z.B. <code>-100</code>) vom Programm korrigiert wird. Dazu soll zun\u00e4chst gepr\u00fcft werden, ob das eingegeben Alter negativ ist und wenn ja, soll dieses auf <code>0</code> gesetzt werden.</p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\nif ...:\n    ...\n\nprint(f\"Du bist {alter} Jahre alt.\")\n</code></pre> Tipp <p>Um zu pr\u00fcfen ob eine Zahl <code>a</code> negativ ist, kann z.B. <code>a &lt; 0</code> verwendet werden.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\nif alter &lt; 0:\n    alter = 0\n\nprint(f\"Du bist {alter} Jahre alt.\")\n</code></pre> Verschachtelte <code>if</code>s <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <p>Was passiert, wenn <code>alter = 15</code> ist? </p> <p>Was passiert, wenn <code>alter = 15</code> und <code>film_genre = \"M\u00e4rchen\"</code> ist? </p> <pre><code>alter = 25\nfilm_genre = \"Horror\"\n\nif film_genre == \"Horror\":\n    print(\"Wie alt bist du denn?\")\n\n    if alter &gt;= 18:\n        print(\"Viel Spa\u00df beim Film!\")\n\n    if alter &lt; 18:\n        print(\"Das wird nichts!\")\n\nprint(\"Tsch\u00fcss!\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = 25\nfilm_genre = \"Horror\"\n\nif film_genre == \"Horror\":\n    print(\"Wie alt bist du denn?\")\n\n    if alter &gt;= 18:\n        print(\"Viel Spa\u00df beim Film!\")\n\n    if alter &lt; 18:\n        print(\"Das wird nichts!\")\n\nprint(\"Tsch\u00fcss!\")\n</code></pre> <p>Bei der gegebenen Variablenbelegung erscheint auf der Konsole:</p> <pre><code>Wie alt bist du denn?\nViel Spa\u00df beim Film!\nTsch\u00fcss!\n</code></pre> <p>Ist <code>alter = 15</code> und <code>alter = \"Horror\"</code> erscheint:</p> <pre><code>Wie alt bist du denn?\nDas wird nichts!\nTsch\u00fcss!\n</code></pre> <p>Ist <code>alter = 15</code> und <code>alter = \"M\u00e4rchen\"</code> erscheint:</p> <pre><code>Tsch\u00fcss!\n</code></pre>"},{"location":"content/bedingter_code/bedingung/#aufgaben","title":"Aufgaben","text":"<ol> <li>Einfache if-Abfrage: Schreibe ein Programm, das \u00fcberpr\u00fcft, ob eine Variable <code>x</code> gr\u00f6\u00dfer als 10 ist. Gib eine  entsprechende Nachricht aus.</li> <li>if-else:  \u00dcberpr\u00fcfe, ob eine Variable <code>zahl</code> gerade ist. Verwende dazu den Modulo-Operator <code>%</code>.</li> <li>Negativ oder Positiv:  Schreibe ein Programm, das \u00fcberpr\u00fcft, ob eine Zahl positiv, negativ oder 0 ist.</li> <li>Gr\u00f6\u00dfer oder kleiner:  \u00dcberpr\u00fcfe, ob eine Variable <code>a</code> gr\u00f6\u00dfer, kleiner oder gleich einer anderen Variable <code>b</code> ist.</li> <li>Alter \u00fcberpr\u00fcfen:  Schreibe ein Programm, das \u00fcberpr\u00fcft, ob eine Person anhand ihres Alters vollj\u00e4hrig ist.</li> <li>Passwort\u00fcberpr\u00fcfung:  Erstelle ein Programm, das \u00fcberpr\u00fcft, ob ein eingegebenes Passwort mit einem gespeicherten  Passwort \u00fcbereinstimmt.</li> <li>Maximalwert:  Schreibe ein Programm, das den gr\u00f6\u00dferen Wert von zwei Zahlen ausgibt.</li> <li>Bewertung:  \u00dcberpr\u00fcfe anhand einer Variable <code>note</code>, ob die Note \"sehr gut\", \"gut\", \"befriedigend\", \"ausreichend\"  oder \"nicht ausreichend\" ist.</li> <li>Temperaturen:  Schreibe ein Programm, das unterschiedliche Meldungen f\u00fcr verschiedene Temperaturbereiche ausgibt  (z.B. kalt, warm, hei\u00df).</li> <li> <p>Einfache Rechnung:  Schreibe ein Programm, das eine einfache mathematische Operation (Addition, Subtraktion,  Multiplikation, Division) basierend auf Benutzereingaben ausf\u00fchrt.</p> </li> <li> <p>Jahreszeiten:  Schreibe ein Programm, das den Namen einer Jahreszeit ausgibt, basierend auf einer Monatsnummer (1 bis 12).</p> </li> <li>Teilbarkeit:  \u00dcberpr\u00fcfe, ob eine Zahl durch eine andere Zahl ohne Rest teilbar ist.</li> <li>Einkaufsliste:  Schreibe ein Programm, das \u00fcberpr\u00fcft, ob ein Artikel in einer Einkaufsliste vorhanden ist.</li> <li>Gr\u00f6\u00dfte von drei Zahlen:  Bestimme die gr\u00f6\u00dfte Zahl aus drei gegebenen Zahlen.</li> <li>Rabattaktion:  Schreibe ein Programm, das basierend auf dem Einkaufswert unterschiedliche Rabatte berechnet.</li> <li>Lichtschalter:  Simuliere einen Lichtschalter, der das Licht ein- und ausschaltet basierend auf der aktuellen  Zustandsvariable.</li> <li>Fahrzeugklasse:  Schreibe ein Programm, das basierend auf dem Gewicht eines Fahrzeugs eine Kategorie (Leicht, Mittel, Schwer) zuweist.</li> <li>Kinotag:  Erstelle ein Programm, das unterschiedliche Eintrittspreise basierend auf dem Wochentag berechnet.</li> <li>Schaltjahr:  Schreibe ein Programm, das \u00fcberpr\u00fcft, ob ein gegebenes Jahr ein Schaltjahr ist oder nicht.</li> </ol> <p>L\u00f6sungen</p>"},{"location":"content/bedingter_code/bedingungen_verkn%C3%BCpfen/","title":"Bedingungen verkn\u00fcpfen","text":"Video <p>Wir k\u00f6nnen mehrere Bedingungen auch miteinander verkn\u00fcpfen.</p> Operator Beschreibung Beispiel <code>and</code> Gibt <code>True</code> zur\u00fcck, wenn alle Parameter <code>True</code> sind. <code>x &lt; 5 and y &gt; 10</code> <code>or</code> Gibt <code>True</code> zur\u00fcck, wenn eines der Parameter <code>True</code> ist. <code>x &lt; 5 or y &gt; 10</code> <code>not</code> Invertiert die Eingabe. Aus <code>True</code> wird <code>False</code> und umbekehrt. <code>not x &gt;= 6</code> Booleans direkt als Bedingung verwenden <p>Der folgende Code beschreibt, wie im Museum die Eintrittspreise berechnet werden.</p> <p>Erkl\u00e4ren Sie in deutscher Sprache, wie sich der Preis berechnet.</p> <p>Was passiert, wenn man die Variable <code>vereinsmitglied = False</code> setzt?</p> <pre><code>alter = 65\nvereinsmitglied = True\n\npreis = 6\n\nif alter &gt; 55 or alter &lt; 5:\n    preis = preis / 2\n\nif vereinsmitglied:\n    preis = 0\n\nprint(f\"Ihr Preis ist {preis}\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Wenn die Person \u00e4lter als 55 Jahre oder j\u00fcnger als 5 Jahre ist, wird der Preis halbiert.</p> <p>Wenn die Person Vereinsmitglied ist (also wenn die Variable vereinsmitglied auf <code>True</code> gesetzt ist), wird der Preis auf <code>0</code> gesetzt, unabh\u00e4ngig vom Alter. </p> <p>Wenn <code>vereinsmitglied</code> auf <code>False</code> gesetzt wird, hat dies zur Folge, dass die zweite Bedingung <code>if vereinsmitglied:</code> nicht erf\u00fcllt wird. Das bedeutet, dass die Person keinen kostenlosen Eintritt bekommt.</p> Verneinungen von Aussagen <p>Im \"H Club\" werden die Eintrittspreise wie folgt berechnet:</p> <pre><code>name = \"Thure\"\nmitglied = True\n\npreis = 0\n\nif not mitglied:\n    preis = 3 \n\nif not \"h\" in name and not \"H\" in name:\n    preis = preis * 2\n\nprint(f\"{name} zahlt {preis} \u20ac.\")\n</code></pre> <ul> <li> <p>Wie viel Zahlen Emmi, Henrik und Thure (der als einziger Mitglied ist).</p> </li> <li> <p>Wie wird der Preis berechnet? </p> </li> <li> <p>Wie m\u00fcsste man den Code anpassen, wenn der Club \"H&amp;M Club\" hei\u00dfen w\u00fcrde?</p> </li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <ul> <li> <p>Emmi zahlt 6\u20ac, Henrik zahlt 3\u20ac und Thure zahlt 0\u20ac.</p> </li> <li> <p>Nichtmitglieder zahlen 3 \u20ac. Hat der Name kein \"h\" oder \"H\", verdoppelt sich der Preis.</p> </li> <li> <p>Erweitere die Bedingung: <code>if not \"h\" in name and not \"H\" in name and not \"m\" in name and not \"M\" in name:</code></p> </li> <li> <p>Alternativ: <code>if not (\"h\" in name or \"H\" in name or \"m\" in name or \"M\" in name):</code></p> </li> </ul> Preisberechnung basierend auf Alter und Mitgliedschaft <p>Schreibe einen kleinen Python-Code, der den Eintrittspreis berechnet. Es gelten folgende Regeln:</p> <ul> <li>Personen unter 18 Jahren zahlen 5 \u20ac.</li> <li>Personen ab 65 Jahren zahlen 5 \u20ac.</li> <li>Alle anderen zahlen 10 \u20ac.</li> <li>Mitglieder eines Clubs erhalten 50 % Rabatt auf den Eintrittspreis.</li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = 30\nmitglied = True\n\npreis = 10\n\nif alter &lt; 18 or alter &gt;= 65:\n    preis = 5\n\nif mitglied:\n    preis = preis / 2\n\nprint(f\"Der Preis betr\u00e4gt {preis} \u20ac.\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/","title":"Solutions","text":""},{"location":"content/bedingter_code/solutions/#losungen","title":"L\u00f6sungen","text":""},{"location":"content/bedingter_code/solutions/#1-einfache-if-abfrage","title":"1. Einfache if-Abfrage:","text":"<pre><code>if x &gt; 10: \n    print(\"x ist gr\u00f6\u00dfer als 10.\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#2-if-else","title":"2. if-else:","text":"<pre><code>if zahl % 2 == 0: \n    print(\"Die Zahl ist gerade.\") \nelse:   \n    print(\"Die Zahl ist ungerade.\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#3-negativ-oder-positiv","title":"3. Negativ oder Positiv:","text":"<pre><code>if zahl &gt; 0: \n    print(\"Positiv\") \nelif zahl &lt; 0: \n    print(\"Negativ\") \nelse: \n    print(\"Null\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#4-groer-oder-kleiner","title":"4. Gr\u00f6\u00dfer oder kleiner:","text":"<pre><code>if a &gt; b: \n    print(\"a ist gr\u00f6\u00dfer als b\") \nelif a &lt; b: \n    print(\"a ist kleiner als b\") \nelse: \n    print(\"a ist gleich b\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#5-alter-uberprufen","title":"5. Alter \u00fcberpr\u00fcfen:","text":"<pre><code>if alter &gt;= 18: \n    print(\"Vollj\u00e4hrig\") \nelse: \n    print(\"Minderj\u00e4hrig\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#6-passwortuberprufung","title":"6. Passwort\u00fcberpr\u00fcfung:","text":"<pre><code>if eingegebenes_passwort == gespeichertes_passwort: \n    print(\"Passwort korrekt!\") \nelse: \n    print(\"Falsches Passwort!\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#7-maximalwert","title":"7. Maximalwert:","text":"<pre><code>if zahl1 &gt; zahl2: \n    print(zahl1) \nelse: \nprint(zahl2)\n</code></pre>"},{"location":"content/bedingter_code/solutions/#8-bewertung","title":"8. Bewertung:","text":"<pre><code>if note &gt;= 1.0 and note &lt; 1.5: \n    print(\"sehr gut\") \nelif note &lt; 2.5: \n    print(\"gut\") \nelif note &lt; 3.5: \n    print(\"befriedigend\") \nelif note &lt; 4.0: \n    print(\"ausreichend\") \nelse: \n    print(\"nicht ausreichend\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#9-temperaturen","title":"9. Temperaturen:","text":"<pre><code>if temperatur &lt; 10: \n    print(\"Kalt\") \nelif temperatur &lt; 25:\n    print(\"Warm\") \nelse: \n    print(\"Hei\u00df\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#10-einfache-rechnung","title":"10. Einfache Rechnung:","text":"<pre><code>if operation == '+': \n    print(a + b) \nelif operation == '-': \n    print(a - b) \nelif operation == '*': \n    print(a * b) \nelif operation == '/':\n    print(a / b)\n</code></pre>"},{"location":"content/bedingter_code/solutions/#11-jahreszeiten","title":"11. Jahreszeiten:","text":"<pre><code>if monat in [3, 4, 5]: \n    print(\"Fr\u00fchling\") \nelif monat in [6, 7, 8]: \n    print(\"Sommer\") \nelif monat in [9, 10, 11]: \n    print(\"Herbst\") \nelse: \n    print(\"Winter\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#12-teilbarkeit","title":"12. Teilbarkeit:","text":"<pre><code>if zahl1 % zahl2 == 0: \n    print(\"Teilbar\") \nelse: \n    print(\"Nicht teilbar\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#13-einkaufsliste","title":"13. Einkaufsliste:","text":"<pre><code>if artikel in einkaufsliste: \n    print(\"Artikel vorhanden\") \nelse: \n    print(\"Artikel nicht vorhanden\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#14-grote-von-drei-zahlen","title":"14. Gr\u00f6\u00dfte von drei Zahlen:","text":"<pre><code>if a &gt; b and a &gt; c: \n    print(a) \nelif b &gt; a and b &gt; c: \n    print(b) \nelse: \n    print(c)\n</code></pre>"},{"location":"content/bedingter_code/solutions/#15-rabattaktion","title":"15. Rabattaktion:","text":"<pre><code>if einkaufswert &gt;= 100: \n    print(\"Rabatt: 20%\") \nelif einkaufswert &gt;= 50: \n    print(\"Rabatt: 10%\") \nelse: \n    print(\"Kein Rabatt\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#16-lichtschalter","title":"16. Lichtschalter:","text":"<pre><code>if lichtstatus: \n    print(\"Licht an\") \nelse: \n    print(\"Licht aus\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#17-fahrzeugklasse","title":"17. Fahrzeugklasse:","text":"<pre><code>if gewicht &lt; 1000: \n    print(\"Leicht\") \nelif gewicht &lt; 3000: \n    print(\"Mittel\") \nelse: \n    print(\"Schwer\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#18-kinotag","title":"18. Kinotag:","text":"<pre><code>if wochentag == \"Montag\": \n    print(\"Preis: 5 Euro\") \nelse: \n    print(\"Preis: 10 Euro\")\n</code></pre>"},{"location":"content/bedingter_code/solutions/#19-schaltjahr","title":"19. Schaltjahr:","text":"<pre><code>if jahr % 4 == 0 and (jahr % 100 != 0 or jahr % 400 == 0): \n    print(\"Schaltjahr\")\nelse: \n    print(\"Kein Schaltjahr\")\n</code></pre>"},{"location":"content/collections/dictionaries/","title":"Dictionaries (Schl\u00fcssel-Wert-Paare):","text":"<p>Dictionaries sind ein Datentyp in Python, mit dem wir Schl\u00fcssel-Wert-Paar beschreiben k\u00f6nnen.  Sie erm\u00f6glichen uns, Werte mithilfe von Schl\u00fcsseln zu speichern und abzurufen, \u00e4hnlich wie ein echtes W\u00f6rterbuch es  erlaubt, die Bedeutung eines Wortes zu finden. Wir erinnern uns an Listen oder Tupels, bei denen wir auf die Elemente durch ihre Position in der Sammlung, also deren Index, auf die Elemente zugreifen k\u00f6nnen. </p> <pre><code>mein_dict = {\"Name\": \"Max\", \"Alter\": 25, \"Stadt\": \"Berlin\"}\nprint(mein_dict)\n</code></pre>"},{"location":"content/collections/dictionaries/#eigenschaften-von-dictionaries","title":"Eigenschaften von Dictionaries","text":"<ul> <li> <p>Schl\u00fcssel und Werte: Jeder Eintrag in einem Dictionary besteht aus einem Schl\u00fcssel und einem zugeh\u00f6rigen Wert.</p> </li> <li> <p>Einzigartige Schl\u00fcssel: Jeder Schl\u00fcssel in einem Dictionary muss einzigartig sein. Sollen mehrere Elemente      in einem Schl\u00fcssel gespeichert werden, kann man nat\u00fcrlich auch eine Liste f\u00fcr diesen Schl\u00fcssel speichern.</p> </li> <li> <p>Ver\u00e4nderbar: Dictionaries sind ver\u00e4nderbar, was bedeutet, dass Eintr\u00e4ge hinzugef\u00fcgt, entfernt oder ge\u00e4ndert    werden k\u00f6nnen.</p> </li> <li> <p>Ungeordnet: Die Elemente in einem Dictionary sind nicht in einer bestimmten Reihenfolge gespeichert. Man greift      auf die Elemente \u00fcber deren Schl\u00fcssel zu.</p> </li> <li> <p>Dynamisch: Die Gr\u00f6\u00dfe eines Dictionaries kann sich w\u00e4hrend der Laufzeit des Programms \u00e4ndern.</p> </li> </ul>"},{"location":"content/collections/dictionaries/#operationen-mit-dictionaries","title":"Operationen mit Dictionaries","text":""},{"location":"content/collections/dictionaries/#erstellen-und-initialisieren-eines-dictionaries","title":"Erstellen und Initialisieren eines Dictionaries","text":"<p>Es gibt verschiedene M\u00f6glichkeiten ein Dictionary anzulegen:</p> <pre><code>a = dict(one=1, two=2, three=3)\nb = {'one': 1, 'two': 2, 'three': 3}\nc = dict([('two', 2), ('one', 1), ('three', 3)])\nd = dict({'three': 3, 'one': 1, 'two': 2})\ne = dict({'one': 1, 'three': 3}, two=2)\n\nprint(a == b == c == d == e)\n</code></pre>"},{"location":"content/collections/dictionaries/#zugriff-auf-werte","title":"Zugriff auf Werte","text":"<p>Der Zugriff auf die Werte erfolgt \u00fcber den entsprechenden Schl\u00fcssel in eckigen Klammern. Das sieht \u00e4hnlich aus wie bei Listen, nur dass wir keinen Index verwenden, sondern den entsprechenden Schl\u00fcssel.</p> <pre><code>mein_dict = {\"Name\": \"Max\", \"Alter\": 25, \"Stadt\": \"Berlin\"}\nprint(mein_dict[\"Name\"])\n</code></pre> <p>Eine weitere M\u00f6glichkeit auf die Values eines Dictionaries zuzugreifen besteht in der Methode <code>get()</code>. Das besondere: Wenn der Key nicht existiert, wird <code>None</code> zur\u00fcckgegeben. Das ist in <code>if</code>-Bedingungen n\u00fctzlich, bei denen ich Code nur durchf\u00fchren m\u00f6chte, wenn der Schl\u00fcssel auch tats\u00e4chlich existiert. Denn <code>bool(None)</code>  ist immer <code>False</code>.</p> <pre><code>my_dict = dict(one=1, two=2, three=3)\n\nv1 = my_dict.get(\"one\")\n\nif v1:\n    print(f\"Found value: {v1}\")\nelse:\n    print(\"No Value found\")\n\nv2 = my_dict.get(\"four\")\n\nif v2:\n    print(f\"Found value: {v2}\")\nelse:\n    print(\"No Value found\")\n</code></pre>"},{"location":"content/collections/dictionaries/#hinzufugen-und-andern-von-eintragen","title":"Hinzuf\u00fcgen und \u00c4ndern von Eintr\u00e4gen","text":"<p>Werte k\u00f6nnen hinzugef\u00fcgt werden, in dem wir einem Element, einen Schl\u00fcssel hinzuf\u00fcgen und diesem einen Wert zuweisen. Existiert der Schl\u00fcssel bereits wird der vorhandene Wert einfach \u00fcberschrieben.</p> <p>Als Schl\u00fcssel k\u00f6nnen dabei nur Objekte genutzt werden, die hashable sind (also z.B. Zahlen, Strings, Tupel)</p> <pre><code>mein_dict = {\"Name\": \"Max\", \"Alter\": 25, \"Stadt\": \"Berlin\"}\n# Hinzuf\u00fcgen eines neuen Eintrags\nmein_dict[\"Beruf\"] = \"Ingenieur\"\n\n# \u00c4ndern eines vorhandenen Eintrags\nmein_dict[\"Alter\"] = 26\n</code></pre>"},{"location":"content/collections/dictionaries/#entfernen-von-eintragen","title":"Entfernen von Eintr\u00e4gen","text":"<p>Das Entfernen von Eintr\u00e4gen sieht leider nicht wie typischer Python-Code aus. Man greift auf das Element, welches man  l\u00f6schen will wie gewohnt zu und l\u00f6scht das Element mit einem vorangestellten <code>del</code>.</p> <pre><code>mein_dict = {\"Name\": \"Max\", \"Alter\": 25, \"Stadt\": \"Berlin\"}\n\ndel mein_dict[\"Stadt\"]\n</code></pre>"},{"location":"content/collections/dictionaries/#durchlaufen-eines-dictionaries","title":"Durchlaufen eines Dictionaries","text":"<p>Um die Keys und Values eines Dictionaries zu durchlaufen, muss die Methode <code>items()</code> verwendet werden. Hier erhalten wir dann zwei Werte in unserer <code>for</code>-Schleife auf ein Mal:</p> <pre><code>mein_dict = {\"Name\": \"Max\", \"Alter\": 25, \"Stadt\": \"Berlin\"}\n\nfor key, value in mein_dict.items():\n    print(key, value)\n\nprint(\"fertig\")\n</code></pre>"},{"location":"content/collections/dictionaries/#haufige-funktionen-und-methoden-fur-dictionaries-in-python","title":"H\u00e4ufige Funktionen und Methoden f\u00fcr Dictionaries in Python","text":"<p>Hier haben wir eine Auswahl einiger Methoden auf Dictionaries. Hier ist die gesamte Liste.</p> Funktion Beschreibung Beispiel <code>my_dict[key]</code> Greif auf den Wert mit dem Key <code>key</code> zu. Existiert dieser nicht wird er beim Schreiben erstellt. Beim Lesen gibt es einen Fehler <code>dict[\"Key\"] = Value</code> <code>get(key)</code> Gibt den Wert f\u00fcr den angegebenen Schl\u00fcssel zur\u00fcck. Gibt <code>None</code> zur\u00fcck, wenn der Schl\u00fcssel nicht existiert. <code>wert = dict.get('schluessel')</code> <code>keys()</code> Gibt ein neues Ansichtsobjekt zur\u00fcck, das alle Schl\u00fcssel des Dictionaries enth\u00e4lt. <code>schluessel = dict.keys()</code> <code>values()</code> Gibt ein neues Ansichtsobjekt zur\u00fcck, das alle Werte des Dictionaries enth\u00e4lt. <code>werte = dict.values()</code> <code>items()</code> Gibt ein neues Ansichtsobjekt zur\u00fcck, das alle Schl\u00fcssel-Wert-Paare des Dictionaries als Tupel enth\u00e4lt. <code>paare = dict.items()</code> <code>update(dict2)</code> Aktualisiert das Dictionary mit Schl\u00fcssel-Wert-Paaren aus einem anderen Dictionary oder iterierbaren Schl\u00fcssel-Wert-Paaren. <code>dict.update(dict2)</code> <code>pop(key)</code> Entfernt den Eintrag mit dem angegebenen Schl\u00fcssel und gibt dessen Wert zur\u00fcck. <code>wert = dict.pop('schluessel')</code> <code>popitem()</code> Entfernt und gibt ein zuf\u00e4lliges Schl\u00fcssel-Wert-Paar als Tupel zur\u00fcck. <code>schluessel, wert = dict.popitem()</code> <code>clear()</code> Entfernt alle Elemente aus dem Dictionary. <code>dict.clear()</code> <code>copy()</code> Erstellt eine flache Kopie des Dictionaries. <code>neues_dict = dict.copy()</code>"},{"location":"content/collections/dictionaries/#anwendungsbeispiele","title":"Anwendungsbeispiele","text":"<p>Dictionaries sind n\u00fctzlich f\u00fcr die Speicherung und Manipulation von Schl\u00fcssel-Wert-Paaren und bieten schnellen Zugriff sowie flexible Datenstrukturen.</p> <ul> <li>Datenorganisation: Dictionaries sind ideal f\u00fcr die Speicherung und Organisation komplexer Daten, wie z.B.   Benutzerinformationen oder Konfigurationseinstellungen.</li> <li>Schneller Zugriff: Aufgrund ihrer internen Struktur bieten Dictionaries einen schnellen Zugriff auf ihre Elemente.</li> </ul>"},{"location":"content/collections/dictionaries/#aufgaben","title":"Aufgaben","text":"Grundlegendes Dictionary <p>Erstelle ein Dictionary mit drei Schl\u00fcssel-Wert-Paaren und gib es aus.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nprint(mein_dict)\n</code></pre> Zugriff auf Werte <p>Greife auf einen Wert in einem Dictionary zu und gib ihn aus.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nprint(mein_dict[\"Name\"])  # Gibt \"Anna\" aus\n</code></pre> Hinzuf\u00fcgen eines Eintrags zum Dictionary <p>F\u00fcge einem bestehenden Dictionary einen neuen Schl\u00fcssel-Wert-Eintrag hinzu.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nmein_dict[\"Stadt\"] = \"Berlin\"\nprint(mein_dict)\n</code></pre> \u00c4ndern eines Wertes <p>\u00c4ndere den Wert eines bestehenden Eintrags in einem Dictionary.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nmein_dict[\"Alter\"] = 31\nprint(mein_dict)\n</code></pre> Entfernen eines Eintrags <p>Entferne einen Eintrag aus einem Dictionary.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\ndel mein_dict[\"Beruf\"]\nprint(mein_dict)\n</code></pre> Durchlaufen eines Dictionaries mit Schleifen <p>Durchlaufe ein Dictionary und gib alle Schl\u00fcssel und deren zugeh\u00f6rige Werte aus.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nfor key, value in mein_dict.items():\n    print(f\"{key}: {value}\")\n</code></pre> Nur Schl\u00fcssel eines Dictionaries durchlaufen <p>Durchlaufe ein Dictionary und gib nur die Schl\u00fcssel aus.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nfor key in mein_dict.keys():\n    print(key)\n</code></pre> Nur Werte eines Dictionaries durchlaufen <p>Durchlaufe ein Dictionary und gib nur die Werte aus.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nfor value in mein_dict.values():\n    print(value)\n</code></pre> Schl\u00fcssel-Existenz pr\u00fcfen <p>\u00dcberpr\u00fcfe, ob ein bestimmter Schl\u00fcssel in einem Dictionary existiert.</p> L\u00f6sung <pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nkey = \"Name\"\nif key in mein_dict:\n   print(f\"{key} ist im Dictionary vorhanden.\")\nelse:\n   print(f\"{key} ist nicht im Dictionary vorhanden.\")\n</code></pre> Nested Dictionary <p>Erstelle ein verschachteltes Dictionary (ein Dictionary innerhalb eines anderen Dictionaries) und greife auf ein Element des inneren Dictionaries zu.</p> L\u00f6sung <pre><code>mein_nested_dict = {\n    \"person1\": {\"Name\": \"Max\", \"Alter\": 25},\n    \"person2\": {\"Name\": \"Lisa\", \"Alter\": 28}\n}\nprint(mein_nested_dict[\"person1\"][\"Name\"])  # Gibt \"Max\" aus\n</code></pre>"},{"location":"content/collections/dictionaries/#anspruchsvolle-aufgaben","title":"Anspruchsvolle Aufgaben","text":"Wortz\u00e4hler <p>Schreibe ein Programm, das einen Text (String) entgegennimmt und ein Dictionary zur\u00fcckgibt, das die H\u00e4ufigkeit jedes Wortes im Text z\u00e4hlt. W\u00f6rter sollen unabh\u00e4ngig von Gro\u00df- und Kleinschreibung gez\u00e4hlt werden. Verwende <code>input()</code> zur Eingabe des Textes.</p> L\u00f6sung <pre><code>text = input(\"Gib einen Text ein: \")\ntext = text.lower()\nwort_haeufigkeit = {}\n\nfor wort in text.split():\n    if wort in wort_haeufigkeit:\n        wort_haeufigkeit[wort] += 1\n    else:\n        wort_haeufigkeit[wort] = 1\n\nprint(wort_haeufigkeit)\n</code></pre> Telefonbuch <p>Erstelle ein einfaches Telefonbuch-Programm, das es dem Benutzer erm\u00f6glicht, Namen und Telefonnummern hinzuzuf\u00fcgen, zu suchen, zu \u00e4ndern und zu l\u00f6schen. Verwende ein Dictionary zur Speicherung der Daten. Das Programm soll fortlaufend laufen, bis der Benutzer sich entscheidet, es zu beenden. Achte darauf, dass es nicht bei Fehleingaben abst\u00fcrzt.</p> <p>Implementiere folgende Funktionen: - hinzuf\u00fcgen: F\u00fcge einen neuen Kontakt hinzu - suchen: Suche nach einer Telefonnummer anhand des Namens - \u00e4ndern: \u00c4ndere die Telefonnummer eines bestehenden Kontakts - l\u00f6schen: L\u00f6sche einen Kontakt aus dem Telefonbuch - anzeigen: Zeige alle Kontakte im Telefonbuch an - beenden: Beende das Programm</p> <p>Verwende die folgende Grundstruktur f\u00fcr dein Programm:</p> <pre><code>telefonbuch = {}\n\nwhile True:\n    aktion = input(\"W\u00e4hle eine Aktion: anzeigen, hinzuf\u00fcgen, suchen, \u00e4ndern, l\u00f6schen, beenden: \")\n\n    if aktion == \"beenden\":\n        ...\n    elif aktion == \"hinzuf\u00fcgen\":\n        ...\n    elif aktion == \"suchen\":\n        ...\n    elif aktion == \"\u00e4ndern\":\n        ...\n    elif aktion == \"l\u00f6schen\":\n        ...\n    elif aktion == \"anzeigen\":\n        ...\n    else:\n        ...\n</code></pre> L\u00f6sung <pre><code>telefonbuch = {}\n\nwhile True:\n    aktion = input(\"W\u00e4hle eine Aktion: anzeigen, hinzuf\u00fcgen, suchen, \u00e4ndern, l\u00f6schen, beenden: \")\n\n    if aktion == \"beenden\":\n        print(\"Programm wird beendet. Auf Wiedersehen!\")\n        break\n    elif aktion == \"hinzuf\u00fcgen\":\n        name = input(\"Name: \")\n        nummer = input(\"Telefonnummer: \")\n        telefonbuch[name] = nummer\n        print(f\"{name} wurde zum Telefonbuch hinzugef\u00fcgt.\")\n    elif aktion == \"suchen\":\n        name = input(\"Name: \")\n        nummer = telefonbuch.get(name, \"Nicht gefunden\")\n        print(f\"Telefonnummer von {name}: {nummer}\")\n    elif aktion == \"\u00e4ndern\":\n        name = input(\"Name: \")\n        if name in telefonbuch:\n            nummer = input(\"Neue Telefonnummer: \")\n            telefonbuch[name] = nummer\n            print(f\"Telefonnummer von {name} wurde aktualisiert.\")\n        else:\n            print(f\"{name} nicht im Telefonbuch gefunden.\")\n    elif aktion == \"l\u00f6schen\":\n        name = input(\"Name: \")\n        if name in telefonbuch:\n            del telefonbuch[name]\n            print(f\"{name} wurde aus dem Telefonbuch gel\u00f6scht.\")\n        else:\n            print(f\"{name} nicht im Telefonbuch gefunden.\")\n    elif aktion == \"anzeigen\":\n        if telefonbuch:\n            print(\"Aktuelles Telefonbuch:\")\n            for name, nummer in telefonbuch.items():\n                print(f\"{name}: {nummer}\")\n        else:\n            print(\"Das Telefonbuch ist leer.\")\n    else:\n        print(\"Ung\u00fcltige Aktion. Bitte w\u00e4hle eine der angegebenen Aktionen.\")\n\n    print()  # Leerzeile f\u00fcr bessere Lesbarkeit\n</code></pre> Lagerbestandsverwaltung <p>Implementiere ein Lagerbestandsverwaltungssystem. Erstelle ein Dictionary, das Produkte und ihre Mengen enth\u00e4lt. Das Programm soll es dem Benutzer erm\u00f6glichen, neue Produkte hinzuzuf\u00fcgen, vorhandene zu aktualisieren und Produkte zu l\u00f6schen. Zus\u00e4tzlich soll das Programm eine \u00dcbersicht \u00fcber alle Produkte und Mengen anzeigen k\u00f6nnen.</p> <p>Implementiere folgende Funktionen: - hinzuf\u00fcgen: F\u00fcge ein neues Produkt hinzu oder erh\u00f6he die Menge eines vorhandenen Produkts - aktualisieren: \u00c4ndere die Menge eines bestehenden Produkts - l\u00f6schen: Entferne ein Produkt aus dem Lager - anzeigen: Zeige alle Produkte und ihre Mengen im Lager an - beenden: Beende das Programm</p> <p>Verwende die folgende Grundstruktur f\u00fcr dein Programm:</p> <pre><code>lager = {}\n\nwhile True:\n    aktion = input(\"Aktion w\u00e4hlen: hinzuf\u00fcgen, aktualisieren, l\u00f6schen, anzeigen, beenden: \")\n\n    if aktion == \"beenden\":\n        ...\n    elif aktion == \"hinzuf\u00fcgen\":\n        ...\n    elif aktion == \"aktualisieren\":\n        ...\n    elif aktion == \"l\u00f6schen\":\n        ...\n    elif aktion == \"anzeigen\":\n        ...\n    else:\n        ...\n</code></pre> L\u00f6sung <pre><code>lager = {}\n\nwhile True:\n    aktion = input(\"Aktion w\u00e4hlen: hinzuf\u00fcgen, aktualisieren, l\u00f6schen, anzeigen, beenden: \")\n\n    if aktion == \"beenden\":\n        print(\"Programm wird beendet. Auf Wiedersehen!\")\n        break\n    elif aktion == \"hinzuf\u00fcgen\":\n        produkt = input(\"Produktname: \")\n        menge = int(input(\"Menge: \"))\n        lager[produkt] = lager.get(produkt, 0) + menge\n        print(f\"{menge} {produkt} wurde(n) zum Lager hinzugef\u00fcgt.\")\n    elif aktion == \"aktualisieren\":\n        produkt = input(\"Produktname: \")\n        if produkt in lager:\n            menge = int(input(\"Neue Menge: \"))\n            lager[produkt] = menge\n            print(f\"Menge von {produkt} wurde auf {menge} aktualisiert.\")\n        else:\n            print(f\"{produkt} nicht im Lager gefunden.\")\n    elif aktion == \"l\u00f6schen\":\n        produkt = input(\"Produktname: \")\n        if produkt in lager:\n            del lager[produkt]\n            print(f\"{produkt} wurde aus dem Lager entfernt.\")\n        else:\n            print(f\"{produkt} nicht im Lager gefunden.\")\n    elif aktion == \"anzeigen\":\n        if lager:\n            print(\"Aktueller Lagerbestand:\")\n            for produkt, menge in lager.items():\n                print(f\"{produkt}: {menge}\")\n        else:\n            print(\"Das Lager ist leer.\")\n    else:\n        print(\"Ung\u00fcltige Aktion. Bitte w\u00e4hle eine der angegebenen Aktionen.\")\n\n    print()  # Leerzeile f\u00fcr bessere Lesbarkeit\n</code></pre> Verschachteltes Dictionary analysieren <p>Gegeben sei ein verschachteltes Dictionary, das Daten von Studenten und ihren Noten in verschiedenen F\u00e4chern enth\u00e4lt. Schreibe ein Programm, das f\u00fcr jeden Studenten den Durchschnitt seiner Noten berechnet und diesen ausgibt. Nutze Schleifen, um durch das Dictionary zu iterieren.</p> <p>Beispiel f\u00fcr das Dictionary: <pre><code>studenten = {\n    \"Anna\": {\"Mathe\": 1, \"Englisch\": 2},\n    \"Max\": {\"Mathe\": 3, \"Englisch\": 2}\n}\n</code></pre></p> L\u00f6sung <pre><code>studenten = {\n    \"Anna\": {\"Mathe\": 1, \"Englisch\": 2},\n    \"Max\": {\"Mathe\": 3, \"Englisch\": 2}\n}\n\nfor name, faecher in studenten.items():\n    durchschnitt = sum(faecher.values()) / len(faecher)\n    print(f\"{name}: Durchschnittsnote = {durchschnitt:.2f}\")\n</code></pre> H\u00e4ufigster Buchstabe in einem String <p>Schreibe ein Python-Programm, das den h\u00e4ufigsten Buchstaben in einem gegebenen String findet. Falls mehrere Buchstaben gleich h\u00e4ufig vorkommen, sollen alle diese Buchstaben zur\u00fcckgegeben werden. Beachte Gro\u00df- und Kleinschreibung nicht.</p> <p>Beispiel: F\u00fcr den String \"Mississippi\" soll das Programm ausgeben: \"Die h\u00e4ufigsten Buchstaben sind ['i', 's'], die jeweils 4 mal vorkommen.\"</p> L\u00f6sung <pre><code>text = \"Mississippi\"\ntext = text.lower()  # Konvertiere zu Kleinbuchstaben\n\n# Z\u00e4hle die H\u00e4ufigkeit jedes Buchstabens\nbuchstaben_zaehler = {}\nfor buchstabe in text:\n    buchstaben_zaehler[buchstabe] = buchstaben_zaehler.get(buchstabe, 0) + 1\n\n# Finde die h\u00f6chste H\u00e4ufigkeit\nmax_haeufigkeit = max(buchstaben_zaehler.values())\n\n# Finde alle Buchstaben mit der h\u00f6chsten H\u00e4ufigkeit\nhaeufigste_buchstaben = [buchstabe for buchstabe, anzahl in buchstaben_zaehler.items() if anzahl == max_haeufigkeit]\n\nprint(f\"Die h\u00e4ufigsten Buchstaben sind {haeufigste_buchstaben}, die jeweils {max_haeufigkeit} mal vorkommen.\")\n</code></pre>"},{"location":"content/collections/for_loop/","title":"for-Schleife","text":"<p>H\u00e4ufig wollen wir bestimmte Operationen auf allen Elementen einer Liste durchf\u00fchren. Dies kann zwar \u00fcber eine <code>while</code>-Schleife implementiert werden, ist aber etwas  umst\u00e4ndlich und sogar fehleranf\u00e4llig. Lieber wird mit der <code>for</code>-Schleife gearbeitet, die erlaubt alle Elemente einer Liste nacheinander durchzugehen, ohne dass dabei der Index zum Zugriff auf die Elemente genutzt werden muss. </p> for-loopwhile-loop <pre><code>produkte = [\"Butter\", \"Milch\", \"Wurst\"] # (1)!\n\nfor produkt in produkte: # (2)!\n    print(f\"Heute gibt es {produkt}.\") # (3)!\n</code></pre> <ol> <li>Lege eine Liste mit Elementen an, die durchlaufen werden sollen.</li> <li>Hier wird eine Variable <code>produkt</code> angelegt und diese wird nun nacheinander mit allen Elementen der Liste <code>produkte</code> bef\u00fcllt. Zuerst gilt also <code>produkt = \"Butter\"</code> und mit diesem Wert werden die n\u00e4chsten einger\u00fcckten Zeilen durgef\u00fchrt. Danach ist <code>produkt = \"Milch\"</code> und die einger\u00fcckten Zeilen werden erneut durchgef\u00fchrt. Dies geht so lange weiter, bis alle Elemente in der Liste durchlaufen wurden. </li> <li>Der einger\u00fcckte Code ist der Schleifenrumpf. Dieser wird so oft durchlaufen, wie es Elemente in der Liste gibt.</li> </ol> <p>So w\u00fcrde die Implementierung mit einer <code>while</code>-Schleife aussehen.</p> <pre><code>produkte = [\"Butter\", \"Milch\", \"Wurst\"] # (1)!\ni = 0 # (2)!\n\nwhile i &lt; len(produkte): # (3)!\n    print(f\"Heute gibt es {produkte[i]}.\") # (4)!\n    i = i + 1 # (5)!\n</code></pre> <ol> <li>Lege eine Liste mit Elementen an, die durchlaufen werden sollen.</li> <li>Es wird eine Variable <code>i</code> angelegt, die f\u00fcr den Zugriff auf die Liste \u00fcber den Index ben\u00f6tigt wird.</li> <li>Solange <code>i</code> nicht gr\u00f6\u00dfer ist, als der gr\u00f6\u00dftm\u00f6gliche Index, soll die Schleife durchlaufen werden. <code>len(prodcukte)</code> gibt die Anzahl der Elemente in der Liste zur\u00fcck und ist hier <code>3</code>.</li> <li>Um nun auf die Elemente zuzugreifen, wird die Index-Notation <code>produkte[i]</code> verwendet.</li> <li>Abschlie\u00dfend muss der <code>i</code> vergr\u00f6\u00dfert werden, um sicher zu stellen, dass im n\u00e4chsten Schleifendurchlauf auch auf das n\u00e4chste Element zugegriffen wird.</li> </ol> <p>Konsolenausgabe:</p> <pre><code>Heute gibt es Butter\nHeute gibt es Milch\nHeute gibt es Wurst\n</code></pre> <p>Code im Debugger</p> <p> </p> for-Schleifen lesen <p>Gegeben sei der folgende Code. Sagen sie voraus, was auf der Konsole erscheinen wird: <pre><code>print(\"Meine Freunde hei\u00dfen:\")\nfor name in [\"Karl\", \"Jannik\", \"Alexa\"]:\n    print(f\"{name}, \")\nprint(\"und mein bester Freund hei\u00dft Max.\")\n</code></pre></p> L\u00f6sung <pre><code>Meine Freunde hei\u00dfen:\nKarl,\nJannik,\nAlexa,\nund mein bester Freund hei\u00dft Max.\n</code></pre> Summen bilden <p>Gegeben sei der folgende Code. Sagen sie voraus, was auf der Konsole erscheinen wird, wenn</p> <ul> <li><code>summanden = [1,2,3,4]</code></li> <li><code>summanden = [3, -3, 4, -2]</code></li> <li><code>summanden = [1]</code></li> <li><code>summanden = []</code></li> </ul> <pre><code>summanden = ...\nsumme = 0\nfor s in summanden:\n    summe = summe + s\nprint(f\"Die Summe von {summanden} ist {summe}.\")\n</code></pre> L\u00f6sung Vorraussetzung Konsolenausgabe <code>summanden = [1,2,3,4]</code> <code>Die Summe von [1,2,3,4] ist 10.</code> <code>summanden = [3, -3, 4, -2]</code> <code>Die Summe von [3, -3, 4, -2] ist 2.</code> <code>summanden = [1]</code> <code>Die Summe von [1] ist 1.</code> <code>summanden = []</code> <code>Die Summe von [0] ist 0}.</code> for-Schleife schreiben <p>Schreiben Sie mithilfe der <code>for</code>-Schleife ein Programm, dass alle Elemente einer Liste miteinander multipliziert und Diese Produkt am Ende ausgibt.</p> Tipp <p>Erstellen Sie eine Variable <code>product = 1</code>, in der Sie die L\u00f6sung speichern wollen.</p> L\u00f6sung <pre><code>factors = [2, 3, 2]\nproduct = 1\nfor f in factors:\n    product = product * f\n\nprint(f\"Das Produkt von {factors} ist {product}\") \n</code></pre> Marstransport <p>Die folgende Funktion berechnet das Marsgewicht f\u00fcr eine einzelne Variable.</p> <pre><code>gewicht = 65\nmars_faktor = 0.38\nmars_gewicht = gewicht * mars_faktor\nprint(f'Dein Marsgewicht: {mars_gewicht}')\n</code></pre> <p>a) Passe das Programm so an, dass f\u00fcr eine Liste <code>gewichte = [100, 65, 23]</code> die Berechnung durchgef\u00fchrt wird und auf der Konsole erscheint:</p> <pre><code>Dein Marsgewicht: 38.0\nDein Marsgewicht: 24.7\nDein Marsgewicht: 8.74\n</code></pre> <p>b) Erweitere das Programm, sodass zus\u00e4tzlich alle Marsgewichte in einer Liste  gespeichert und am Ende ausgegeben werden.</p> <pre><code>Dein Marsgewicht: 38.0\nDein Marsgewicht: 24.7\nDein Marsgewicht: 8.74\nMarsgewichte: [38.9, 24.7, 8.74]\n</code></pre> L\u00f6sung <p>a)</p> <pre><code>gewichte = [100, 65, 23]\nmars_faktor = 0.38\nfor gewicht in gewichte:\n    mars_gewicht = gewicht * mars_faktor\n    print(f'Dein Marsgewicht: {mars_gewicht}')\n</code></pre> <p>b)</p> <pre><code>gewichte = [100, 65, 23]\nmars_gewichte = []\nmars_faktor = 0.38\nfor gewicht in gewichte:\n    mars_gewicht = gewicht * mars_faktor\n    mars_gewichte.append(mars_gewicht)\n    print(f'Dein Marsgewicht: {mars_gewicht}')\nprint(f\"Marsgewichte: {Marsgewichte:}\")\n</code></pre> Usernamen \u00fcberpr\u00fcfen <p>In einem Onlineportal d\u00fcrfen Nutzer ihren Username frei w\u00e4hlen, jedoch gibt es bestimmte Begriffe, die nicht als Teil des Namens auftauchen d\u00fcrfen. Diese sind in der folgenden Liste verbotener W\u00f6rter notiert:</p> <pre><code>verboten = ['admin', 'super', 'user']\n</code></pre> <p>Folgende Nutzernamen w\u00e4hren hier also verboten:</p> <ul> <li>superman</li> <li>administrator</li> <li>Radminister</li> <li>H\u00e4user</li> <li>superadmin</li> <li>admin</li> </ul> <p>Schreibe ein Programm, das den Nutzer um einen Namen bitten und eine Warnmeldung gibt, wenn der Name verboten ist.</p> Tipp <pre><code>username = input('Nutzername eingeben: ')\nverboten = ['admin', 'super', 'user']\n\nfor ...:\n    if ...:\n        print(\"Nutzername nicht erlaubt!\")\n</code></pre> L\u00f6sung <pre><code>username = input('Nutzername eingeben: ')\nverboten = ['admin', 'super', 'user']\n\nfor v in verboten:\n    if v in username:\n        print(\"Nutzername nicht erlaubt!\")\n</code></pre>"},{"location":"content/collections/lists/","title":"Listen","text":"Video <p>Derzeit k\u00f6nnen wir in einer Variablen genau einen Wert speichern.</p> <p>Wir werden nun M\u00f6glichkeiten kennenlernen, wie wir in einer Variable eine gro\u00dfe Menge von Daten speichern k\u00f6nnen.</p> <p>Die wichtigste M\u00f6glichkeit zum Speichern gro\u00dfer Datenmengen in einer Variable sind Listen.</p> <p>Eine Liste kann man sich vorstellen, wie eine Variable mit mehrere Schubladen und diese Schubladen sind durchnummeriert. Die Nummerierung startet mit <code>0</code>, geht dann weiter zu <code>1</code>, weiter zu <code>2</code> usw.</p>"},{"location":"content/collections/lists/#eigenschaften-von-listen","title":"Eigenschaften von Listen","text":"<ol> <li>Geordnet: Listen speichern Elemente in einer festgelegten Reihenfolge.</li> <li>Ver\u00e4nderlich (Mutable): Die Inhalte einer Liste k\u00f6nnen nach ihrer Erstellung ver\u00e4ndert werden.</li> <li>Vielseitig: Listen k\u00f6nnen verschiedene Datentypen enthalten, einschlie\u00dflich Zahlen, Strings und andere Listen.</li> <li>Dynamisch: Listen k\u00f6nnen in ihrer Gr\u00f6\u00dfe wachsen oder schrumpfen.</li> <li>Duplikate erlaubt: Listen k\u00f6nnen Duplikate von Elementen enthalten.</li> </ol>"},{"location":"content/collections/lists/#listenoperationen","title":"Listenoperationen","text":""},{"location":"content/collections/lists/#erstellung-und-zugriff","title":"Erstellung und Zugriff","text":"<p>Wir k\u00f6nnen eine Liste definieren, indem wir die Elemente, die gespeichert werden sollen in eckige Klammern (<code>[...]</code>) schreiben:</p> <pre><code>trinkgeld = [70, 60, 15, 15, 0, 100, 0]\n</code></pre> <p>Um nun auf die Elemente zuzugreifen geben wir den schreiben wir nach dem Variablennamen in eckigen Klammern, welchen Eintrag wir haben m\u00f6chten.</p> <pre><code>print(trinkgeld[0]) # (1)!\n</code></pre> <ol> <li>Konsolenausgabe: <code>70</code></li> </ol> <p>Code im Debugger</p> <p> </p>"},{"location":"content/collections/lists/#elemente-andern","title":"Elemente \u00e4ndern","text":"<p>Wir k\u00f6nnen Werte in der Liste \u00fcberschreiben:</p> <pre><code>trinkgeld[0] = 10\nprint(trinkgeld[0])  # Gibt 10 aus\n</code></pre> <ol> <li>Konsolenausgabe: <code>10</code></li> <li>Schreibe <code>10</code> an die erste Stelle (Index <code>0</code>) der Liste.</li> </ol> <p>Code im Debugger</p> <p> </p>"},{"location":"content/collections/lists/#haufige-listenmethoden","title":"H\u00e4ufige Listenmethoden","text":"Methode Beschreibung Beispiel <code>append(x)</code> F\u00fcgt ein Element am Ende der Liste hinzu <code>lst.append(5)</code> - F\u00fcgt <code>5</code> zu <code>lst</code> hinzu <code>extend([x, y, ...])</code> Erweitert die Liste um die Elemente in der angegebenen Liste <code>lst.extend([6, 7])</code> - F\u00fcgt <code>6</code> und <code>7</code> zu <code>lst</code> hinzu <code>insert(i, x)</code> F\u00fcgt an Position <code>i</code> das Element <code>x</code> ein <code>lst.insert(2, 'a')</code> - F\u00fcgt <code>'a'</code> an der Position 2 in <code>lst</code> ein <code>remove(x)</code> Entfernt das erste Vorkommen von <code>x</code> aus der Liste <code>lst.remove('a')</code> - Entfernt das erste Vorkommen von <code>'a'</code> aus <code>lst</code> <code>pop(i)</code> Entfernt und gibt das Element an der Position <code>i</code> zur\u00fcck <code>lst.pop(3)</code> - Entfernt und gibt das Element an Position 3 in <code>lst</code> zur\u00fcck <code>clear()</code> Entfernt alle Elemente aus der Liste <code>lst.clear()</code> - Entfernt alle Elemente aus <code>lst</code> <code>index(x)</code> Gibt den Index des ersten Vorkommens von <code>x</code> zur\u00fcck <code>lst.index('a')</code> - Gibt den Index von <code>'a'</code> in <code>lst</code> zur\u00fcck <code>count(x)</code> Z\u00e4hlt, wie oft <code>x</code> in der Liste vorkommt <code>lst.count(5)</code> - Z\u00e4hlt, wie oft <code>5</code> in <code>lst</code> vorkommt <code>sort()</code> Sortiert die Elemente der Liste <code>lst.sort()</code> - Sortiert die Elemente in <code>lst</code> <code>reverse()</code> Kehrt die Reihenfolge der Elemente in der Liste um <code>lst.reverse()</code> - Kehrt die Reihenfolge der Elemente in <code>lst</code>"},{"location":"content/collections/lists/#slicing","title":"Slicing","text":"<p>Mit Slices kann man auf mehrere Elemente zugreifen:</p> <pre><code>fruechte = [\"Apfel\", \"Banane\", \"Zitrone\", \"Birne\"]\nprint(fruechte[0:2])  # gibt ['Apfel', 'Banane'] aus\n</code></pre> <p>Slices werden mit 3 Werten angegeben: <code>[inclusive_start_value:exclusive_stop_value:stepsize]</code></p>"},{"location":"content/collections/lists/#verkettung-von-listen","title":"Verkettung von Listen","text":"<p>Listen k\u00f6nnen einfach miteinander verkettet werden:</p> <pre><code>liste1 = [1,2,3,4,5]\nliste2 = [4,3,2,1]\nfinale_liste = liste1 + liste2\nprint(finale_liste)  # gibt [1,2,3,4,5,4,3,2,1] aus\n</code></pre> <p>Variablen</p> <p> <pre><code>my_var = 5\n\nprint(my_var) # (1)!\n\nmy_var = 6 # (2)!\n</code></pre></p> <ol> <li>Zugriff direkt \u00fcber den Namen der Variablen.</li> <li>\u00dcberschreiben der Variablen. </li> </ol> <p>Listen</p> <p> <pre><code>my_list = [5, 8, 5, 1, 0,80]\n\nprint(my_list[0]) # (1)!\n\nmy_list[0] = 10 # (2)!\n</code></pre></p> <ol> <li>Zugriff auf Element \u00fcber den Index <code>0</code>.</li> <li>\u00dcberschreiben des Elements an dem Index <code>0</code>.</li> </ol> <p>Listen niemals <code>list</code> nennen!</p> <p>Der Variablenname einer Liste (oder sonst irgendeines Objektes), darf niemals <code>list</code> hei\u00dfen.</p> <p>Dies w\u00fcrde zu einer \u00dcberschreibung des <code>list</code>-Konstruktors f\u00fchren und ggf. den Rest des Pythonprogramms zerst\u00f6ren .</p> <p><code>list</code> isthier keine Ausnahme. Hier findest du noch eine Liste aller Build-In-Functions, die man nicht als Variablennamen verwenden soll.</p> Listen lesen <p>Was erscheint hier auf der Konsole?</p> <pre><code>produkte = ['Milch', 'Butter', 'K\u00e4se']\n\nprint(produkte[2])\nprint(produkte[1])\nprint(produkte[0])\n\nprodukte[1] = 'Magarine'\n\nprint(produkte[0])\nprint(produkte[1])\nprint(produkte[1+1])\n\npos = 2\nprint(produkte[pos])\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Konsolenausgabe</p> <pre><code>K\u00e4se\nButter\nMilch\nMilch\nMagarine\nK\u00e4se\nK\u00e4se\n</code></pre> Listen definieren <p>Definieren Sie eine Liste namens <code>meine_lieblinge</code> mit ihren Lieblingsfilmen.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>meine_lieblinge = ['Alles steht Kopf', 'Die Schlange im Schatten des Adlers', 'Der Pate']\n</code></pre> Listen mit Zahlen definieren <p>Definieren Sie eine Liste mit den Zaheln von <code>0</code> bis <code>8</code>. Speichern Sie diese in eine  Variable namens <code>spielfeld</code>.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>spielfeld = [0, 1, 2, 3, 4, 5, 6, 7, 8] \n</code></pre> Listen manipulieren <p>Gegeben Sei die folgende Liste:</p> <pre><code>mitarbeiter = ['Anton', 'Bernd', 'Clara', 'Dennis']\n</code></pre> <p>Tauschen Sie die <code>Bernd</code> durch eine <code>Emil</code> aus. </p> <p>Geben Sie dann jedes zweite Element der Liste aus. Die Konsolenausgabe ist also diese:</p> <pre><code>Emil\nDennis\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>mitarbeiter = ['Anton', 'Bernd', 'Clara', 'Dennis']\n\nmitarbeiter[1] = 'Emil'\n\nprint(mitarbeiter[1])\nprint(mitarbeiter[3])\n</code></pre> Erstelle eine Liste <p>Erstelle eine Liste mit den Zahlen 1 bis 5 und speichere sie in der Variable <code>zahlen</code>.</p> L\u00f6sung <pre><code>zahlen = [1, 2, 3, 4, 5]\n</code></pre> Hinzuf\u00fcgen von Elementen <p>F\u00fcge die Zahl 6 zur Liste <code>zahlen</code> hinzu.</p> L\u00f6sung <pre><code>zahlen.append(6)\n</code></pre> Entfernen von Elementen <p>Entferne die Zahl 3 aus der Liste <code>zahlen</code>.</p> L\u00f6sung <pre><code>zahlen.remove(3)\n</code></pre> Zugreifen auf ein Listenelement <p>Greife auf das dritte Element in der Liste <code>zahlen</code> zu und speichere es in der Variable <code>drittes_element</code>.</p> L\u00f6sung <pre><code>drittes_element = zahlen[2]\n</code></pre> Listenl\u00e4nge <p>Finde heraus, wie lang die Liste <code>zahlen</code> ist und speichere das Ergebnis in der Variable <code>l\u00e4nge</code>.</p> L\u00f6sung <pre><code>l\u00e4nge = len(zahlen)\n</code></pre> Slicing <p>Erstelle eine neue Liste <code>erste_drei</code>, die die ersten drei Elemente von <code>zahlen</code> enth\u00e4lt.</p> L\u00f6sung <pre><code>erste_drei = zahlen[:3]\n</code></pre> Elemente z\u00e4hlen <p>Z\u00e4hle, wie oft die Zahl 2 in der Liste <code>zahlen</code> vorkommt und speichere das Ergebnis in <code>anzahl_zweien</code>.</p> L\u00f6sung <pre><code>anzahl_zweien = zahlen.count(2)\n</code></pre> Liste umkehren <p>Kehre die Reihenfolge der Elemente in der Liste <code>zahlen</code> um.</p> L\u00f6sung <pre><code>zahlen.reverse()\n</code></pre> Liste sortieren <p>Sortiere die Liste <code>zahlen</code> in absteigender Reihenfolge.</p> L\u00f6sung <pre><code>zahlen.sort(reverse=True)\n</code></pre> Listen verschachteln <p>Erstelle eine neue Liste <code>verschachtelt</code>, die zwei Listen enth\u00e4lt: die urspr\u00fcngliche Liste <code>zahlen</code> und eine Liste mit den Buchstaben ['a', 'b', 'c'].</p> L\u00f6sung <pre><code>verschachtelt = [zahlen, ['a', 'b', 'c']]\n</code></pre>"},{"location":"content/collections/lists_append/","title":"Listen erweitern","text":"Video <p>Zu einer Liste k\u00f6nnen neue Elemente mit der Methode <code>append</code> hinzugef\u00fcgt werden. Das sieht dann wie folgt aus:</p> <pre><code>fragezeichen = ['Justus'] # (1)!\nfragezeichen.append('Peter') # (2)!\nfragezeichen.append('Bob')\nprint(fragezeichen)\n</code></pre> <ol> <li>Liste wird erstellt.</li> <li>Neues Element wird mit <code>append</code> hinzugef\u00fcgt.</li> </ol> <p>Code im Debugger</p> <p> </p> Listen mit Operationen bei der Definition <p>Was erscheint hier auf der Konsole?</p> <pre><code>list_0 = []\nlist_0.append(15)\nlist_0.append(3 * 2)\nprint(list_0)\n\na = 5\nb = 15\nlist_1 = [1 + 1, 1 / 2, a, a + b]\nlist_1.append(a * b + 7)\nlist_1.append(list_1[0])\nprint(list_1)\n</code></pre> Tipp <p><code>list_0 = []</code> beschreibt eine leere Liste, ohne Elemente.</p> <p>Berechne zun\u00e4chst den Inhalt der Elemente in <code>list_1</code>. Die Elemente sind durch Kommas (<code>,</code>) getrennt.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Konsolenausgabe</p> <pre><code>[15, 6]\n[2, 0.5, 5, 20, 15, 82, 2]\n</code></pre> Listen fortlaufend erweitern <p>Schreibe ein Programm, dass den Nutzer wiederholt nach einer Zahl fragt. Das Programm hat intern eine Liste namens <code>eingaben</code>, in der alle bisher eingegebenen Zahlen gespeichert werden. Es soll vor der Eingabe immer die bisher gespeicherten Elemente eingeblendet werden.</p> <p>Die Konsolenausgabe soll also etwa so aussehen:</p> <pre><code>Bisherige Zahlen: []\nGib eine Zahl ein: 3\nBisherige Zahlen: [3]\nGib eine Zahl ein: 10\nBisherige Zahlen: [3, 10]\nGib eine Zahl ein: -20\nBisherige Zahlen: [3, 10, -20]\nGib eine Zahl ein: \n</code></pre> Tipp Tipps ohne CodeCodevorlage mit Schleife <ul> <li>Lege dir zun\u00e4chst eine Variable <code>eingaben</code> an, in der du die Eingaben sammeln wirst. Zun\u00e4chst ist <code>eingabe</code> eine leere Liste.</li> <li>Um eine Schleife dauerhaft f\u00fcr immer zu durchlaufen kann als Bedingung <code>True</code> genutzt werden.</li> <li>Mit <code>int(input(\"Gib eine Zahl ein: \"))</code> kann man den Nutzer um eine Zahl bitten.</li> <li>F\u00fcge neue Elemente in eine Liste mit <code>append</code> ein.</li> </ul> <pre><code>eingaben = ...\nwhile ...: \n    print(f\"Bisherige Zahlen: {eingaben}\")\n    eingabe = ...\n    eingaben. ...\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>eingaben = []\nwhile True:\n    print(f\"Bisherige Zahlen: {eingaben}\")\n    eingabe = int(input(\"Gib eine Zahl ein: \"))\n    eingaben.append(eingabe)\n</code></pre> Speicher manipulieren <p>Schreibe ein Programm, dass in einer Liste die Zahlen von <code>0</code> bis <code>8</code> gespeichert hat. Ziel dieses Programms ist es nun die gespeicherten Zahlen durch Nutzereingaben zu manipulieren.</p> <p>Das Programm fragt dann den Nutzer nach einer Zahl zwischen <code>0</code> und <code>8</code>. Es speichert diese Eingabe in der Variablen namens <code>pos</code>.</p> <p>Das Programm fragt den Nutzer dann, nach der zu speichernden Text. Dieser Text wird nun in der Liste an der Postion <code>pos</code> gespeichert und der bisherige Wert wird \u00fcberschrieben.</p> <p>Erweitern Sie das Programm so, dass der Nutzer immer wieder abgefragt wird.</p> <p>Die Konsolenausgabe sollte dann wie folgt aussehen:</p> <pre><code>Bisheriger Speicher: [0, 1, 2, 3, 4, 5, 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? 1 \nWas soll gespeichert werden? Anton\n\nBisheriger Speicher: [0, 'Anton', 2, 3, 4, 5, 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? 5 \nWas soll gespeichert werden? Britta\n\nBisheriger Speicher: [0, 'Anton', 2, 3, 4, 'Britta', 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? 1 \nWas soll gespeichert werden? Carlo\n\nBisheriger Speicher: [0, 'Carlo', 2, 3, 4, 'Britta', 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? \n</code></pre> Tipp Tipps ohne CodeCodevorlage mit Schleife <ul> <li>Lege dir zun\u00e4chst eine Variable <code>speicher</code> an mit den Zahlen von <code>0</code> bis <code>8</code> (siehe \u00dcbungsaufgabe Listen definieren mit Zahlen).</li> <li>Um eine Schleife dauerhaft f\u00fcr immer zu durchlaufen kann als Bedingung <code>True</code> genutzt werden.</li> <li>Nutzerabfragen k\u00f6nnen mit der <code>input</code> Funktion eingeholt werden.</li> <li>Nutzer eingaben liefern immer nur Strings zur\u00fcck. Wenn sie als Integer gebraucht werden, nutze <code>int(input(...))</code>.</li> <li>Der Postion, die manipuliert werden muss, steht in <code>pos</code>.</li> </ul> <pre><code>speicher = ...\nwhile ...:\n    print(f\"Bisheriger Speicher: { speicher }\")\n    pos = ...\n    eingabe = ...\n    speicher[...] = ...\n    print()\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>speicher = [0, 1, 2, 3, 4, 5, 6, 7, 8]\nwhile True:\n    print(f\"Bisheriger Speicher: { speicher }\")\n    pos = int(input('An welcher Stelle (0-8) soll gespeichert werden? '))\n    eingabe = input('Was soll gespeichert werden? ')\n    speicher[pos] = eingabe\n    print()\n</code></pre>"},{"location":"content/collections/lists_new/","title":"Listen in Python","text":"<p>Listen in Python sind eine der grundlegendsten und n\u00fctzlichsten Datentypen. Sie erm\u00f6glichen es uns, mehrere Elemente in einer einzigen Struktur zu speichern, auf die wir dann \u00fcber ihre Indizes zugreifen k\u00f6nnen.</p> <p>Listen k\u00f6nnen nach ihrer Erstellung ver\u00e4ndert werden, das hei\u00dft, dass sie mutabel sind. </p> <p>Listen in Python sind eine der vielseitigsten Datenstrukturen und werden verwendet,  um eine Sammlung von Elementen zu speichern. Hier sind einige Schl\u00fcsseleigenschaften:</p>"},{"location":"content/collections/lists_new/#eigenschaften-von-listen","title":"Eigenschaften von Listen","text":"<ol> <li> <p>Geordnet:</p> <ul> <li>Listen speichern Elemente in einer festgelegten Reihenfolge.</li> <li>Der Zugriff auf Elemente erfolgt \u00fcber deren Position oder Index.</li> </ul> </li> <li> <p>Ver\u00e4nderlich (Mutable):</p> <ul> <li>Die Inhalte einer Liste k\u00f6nnen nach ihrer Erstellung ver\u00e4ndert werden.</li> <li>Elemente k\u00f6nnen hinzugef\u00fcgt, entfernt oder ge\u00e4ndert werden.</li> </ul> </li> <li> <p>Vielseitig:</p> <ul> <li>Listen k\u00f6nnen verschiedene Datentypen enthalten, einschlie\u00dflich Zahlen, Strings und andere Listen.</li> <li>Sie sind nicht auf einen einzelnen Datentyp beschr\u00e4nkt.</li> </ul> </li> <li> <p>Dynamisch:</p> <ul> <li>Listen k\u00f6nnen in ihrer Gr\u00f6\u00dfe dynamisch wachsen oder schrumpfen.</li> <li>Sie passen sich automatisch der neuen Gr\u00f6\u00dfe an, wenn Elemente hinzugef\u00fcgt oder entfernt werden.</li> </ul> </li> <li> <p>Duplikate erlaubt:</p> <ul> <li>Listen k\u00f6nnen Duplikate von Elementen enthalten, d.h., ein Element kann mehrmals in einer Liste vorkommen.</li> </ul> </li> </ol>"},{"location":"content/collections/lists_new/#mutabilitat-und-immunitat","title":"Mutabilit\u00e4t und Immunit\u00e4t","text":"<ul> <li>Mutability bedeutet, dass ein Objekt nach seiner Erstellung ver\u00e4ndert werden kann, ohne dabei ein anderes Objekt    zu werden. Listen sind mutable; daher k\u00f6nnen wir Elemente hinzuf\u00fcgen, entfernen oder \u00e4ndern.</li> <li>Immunit\u00e4t bezieht sich darauf, wenn ein Objekt nach seiner Erstellung nicht ver\u00e4ndert werden kann. Ein Beispiel   f\u00fcr einen immutablen Datentyp in Python ist ein Tupel, welches wir auch bald kennenlernen.</li> </ul>"},{"location":"content/collections/lists_new/#listenoperationen","title":"Listenoperationen","text":"<p>Schauen wir uns kurz ein paar Beispiele an wie man mit Listen arbeiten kann. Das wichtigste zuerst, n\u00e4mlich die Erstellung von Listen.</p> <ol> <li>Erstellung einer Liste: <code>meine_liste = [1, 2, 3]</code></li> <li>Zugriff auf Listenelemente: <code>meine_liste[1]</code> (Zugriff auf Element an Index 1). Indices starten bei 0!</li> <li>Hinzuf\u00fcgen eines Elements: <code>meine_liste.append(4)</code> - F\u00fcgt <code>4</code> am Ende der Liste hinzu.</li> <li>Entfernen eines Elements: <code>meine_liste.remove(2)</code> - Entfernt das erste Vorkommen von <code>2</code> aus der Liste.</li> </ol> <p>Im Folgenden sehen wir weitere Beispiele.</p>"},{"location":"content/collections/lists_new/#tabelle-der-haufigsten-listenmethoden","title":"Tabelle der h\u00e4ufigsten Listenmethoden","text":"Methode Beschreibung Beispiel <code>append(x)</code> F\u00fcgt ein Element am Ende der Liste hinzu <code>lst.append(5)</code> - F\u00fcgt <code>5</code> zu <code>lst</code> hinzu <code>extend([x, y, ...])</code> Erweitert die Liste um die Elemente in der angegebenen Liste <code>lst.extend([6, 7])</code> - F\u00fcgt <code>6</code> und <code>7</code> zu <code>lst</code> hinzu <code>insert(i, x)</code> F\u00fcgt an Position <code>i</code> das Element <code>x</code> ein <code>lst.insert(2, 'a')</code> - F\u00fcgt <code>'a'</code> an der Position 2 in <code>lst</code> ein <code>remove(x)</code> Entfernt das erste Vorkommen von <code>x</code> aus der Liste <code>lst.remove('a')</code> - Entfernt das erste Vorkommen von <code>'a'</code> aus <code>lst</code> <code>pop(i)</code> Entfernt und gibt das Element an der Position <code>i</code> zur\u00fcck <code>lst.pop(3)</code> - Entfernt und gibt das Element an Position 3 in <code>lst</code> zur\u00fcck <code>clear()</code> Entfernt alle Elemente aus der Liste <code>lst.clear()</code> - Entfernt alle Elemente aus <code>lst</code> <code>index(x)</code> Gibt den Index des ersten Vorkommens von <code>x</code> zur\u00fcck <code>lst.index('a')</code> - Gibt den Index von <code>'a'</code> in <code>lst</code> zur\u00fcck <code>count(x)</code> Z\u00e4hlt, wie oft <code>x</code> in der Liste vorkommt <code>lst.count(5)</code> - Z\u00e4hlt, wie oft <code>5</code> in <code>lst</code> vorkommt <code>sort()</code> Sortiert die Elemente der Liste <code>lst.sort()</code> - Sortiert die Elemente in <code>lst</code> <code>reverse()</code> Kehrt die Reihenfolge der Elemente in der Liste um <code>lst.reverse()</code> - Kehrt die Reihenfolge der Elemente in <code>lst</code> <p>Listen in Python sind vielseitig und ein wesentlicher Bestandteil der meisten Python-Programme. Durch die Verwendung dieser Methoden k\u00f6nnen Listen effektiv zur Verarbeitung von Daten in einer Vielzahl von Anwendungen genutzt werden.</p>"},{"location":"content/collections/lists_new/#beispiel","title":"Beispiel","text":"<p>Stellen wir uns vor, wir haben eine Aufgabe, bei der wir eine Liste von Zahlen verwalten und verschiedene Operationen darauf durchf\u00fchren m\u00fcssen. Wir werden:</p> <ol> <li>Eine Liste erstellen</li> <li>Elemente hinzuf\u00fcgen und entfernen</li> <li>Die Liste sortieren</li> <li>Elemente durchsuchen</li> </ol> <pre><code># 1. Eine Liste erstellen\nzahlen = [3, 1, 4, 1, 5, 9, 2]\n\n# 2. Elemente hinzuf\u00fcgen und entfernen\nzahlen.append(6)  # F\u00fcgt die Zahl 6 am Ende der Liste hinzu\nzahlen.insert(2, 7)  # F\u00fcgt die Zahl 7 an der Position 2 ein\nzahlen.remove(1)  # Entfernt das erste Vorkommen der Zahl 1\n\n# 3. Die Liste sortieren\nzahlen.sort()  # Sortiert die Liste in aufsteigender Reihenfolge\n\n# 4. Elemente durchsuchen\nposition = zahlen.index(5)  # Findet die Position von 5 in der Liste\nanzahl_von_4 = zahlen.count(4)  # Z\u00e4hlt, wie oft die Zahl 4 in der Liste vorkommt\n\n# Ergebnisse ausgeben\nprint(\"Sortierte Liste:\", zahlen)\nprint(\"Position von 5:\", position)\nprint(\"Anzahl von 4:\", anzahl_von_4)\n</code></pre> <p>In diesem Beispiel:</p> <ul> <li>Beginnen wir mit einer Liste von Zahlen.</li> <li>F\u00fcgen dann die Zahl 6 hinzu, f\u00fcgen die Zahl 7 an der zweiten Position ein und entfernen das erste Vorkommen der Zahl  \"1\".</li> <li>Danach sortieren wir die Liste.</li> <li>Und schlie\u00dflich suchen wir nach spezifischen Elementen (z.B. der Position von 5 und der Anzahl der 4 in der Liste).</li> </ul>"},{"location":"content/collections/lists_new/#slicing","title":"Slicing","text":"<p>Mit sogenannten Slices kann man auch direkt auf mehrere Elemente zugreifen:</p> <pre><code>fruechte = [\"Apfel\", \"Banane\", \"Zitrone\", \"Birne\"]\nprint(fruechte[0:2]) # gibt ('Apfel', 'Banane') aus\n</code></pre> <p>Slices werden mit 3 Werten angegeben. Dem Startwert, dem nicht-inklusiven Endwert und der Schrittweite:</p> <pre><code>[inclusive_start_value:exclusive_stop_value:stepsize]\n</code></pre> <p>Wenn wir also <code>[2:6:2]</code> schreiben, sagen wir, dass wir beim dritten Element starten wollen, dann jedes zweite Element  nehmen und bei f\u00fcnf (Stopwert ist exklusiv) aufh\u00f6ren. Also erhalten wir das dritte und das f\u00fcnfte Element. </p>"},{"location":"content/collections/lists_new/#verkettung-von-listen","title":"Verkettung von Listen","text":"<p>Wir k\u00f6nnen Listen au\u00dferdem sehr einfach miteinander verketten, wie wir am folgenden Code sehen:</p> <pre><code>liste1 = [1,2,3,4,5]\nliste2 = [4,3,2,1]\n\nfinale_liste = liste1 + liste2\nprint(finale_liste) # gibt [1,2,3,4,5,4,3,2,1] aus\n</code></pre>"},{"location":"content/collections/lists_new/#aufgaben","title":"Aufgaben","text":""},{"location":"content/collections/lists_new/#1-erstellen-einer-liste","title":"1. Erstellen einer Liste:","text":"<p>Erstelle eine Liste mit den Zahlen 1 bis 5.</p>"},{"location":"content/collections/lists_new/#2-hinzufugen-von-elementen","title":"2. Hinzuf\u00fcgen von Elementen:","text":"<p>F\u00fcge die Zahl 6 zur Liste <code>zahlen</code> hinzu.</p>"},{"location":"content/collections/lists_new/#3-entfernen-von-elementen","title":"3. Entfernen von Elementen:","text":"<p>Entferne die Zahl 3 aus der Liste <code>zahlen</code>.</p>"},{"location":"content/collections/lists_new/#4-zugreifen-auf-ein-listenelement","title":"4. Zugreifen auf ein Listenelement:","text":"<p>Greife auf das dritte Element in der Liste <code>zahlen</code> zu.</p>"},{"location":"content/collections/lists_new/#5-listenlange","title":"5. Listenl\u00e4nge:","text":"<p>Finde heraus, wie lang die Liste <code>zahlen</code> ist.</p>"},{"location":"content/collections/lists_new/#6-slicing","title":"6. Slicing:","text":"<p>Erstelle eine neue Liste, die die ersten drei Elemente von <code>zahlen</code> enth\u00e4lt.</p>"},{"location":"content/collections/lists_new/#7-elemente-zahlen","title":"7. Elemente z\u00e4hlen:","text":"<p>Z\u00e4hle, wie oft die Zahl 2 in der Liste <code>zahlen</code> vorkommt.</p>"},{"location":"content/collections/lists_new/#8-liste-umkehren","title":"8. Liste umkehren:","text":"<p>Kehre die Reihenfolge der Elemente in der Liste <code>zahlen</code> um.</p>"},{"location":"content/collections/lists_new/#9-liste-sortieren","title":"9. Liste sortieren:","text":"<p>Sortiere die Liste <code>zahlen</code> in absteigender Reihenfolge.</p>"},{"location":"content/collections/lists_new/#10-listen-verschachteln","title":"10. Listen verschachteln:","text":"<p>Erstelle eine neue Liste <code>verschachtelt</code>, die zwei Listen enth\u00e4lt: die urspr\u00fcngliche     Liste <code>zahlen</code> und eine Liste mit den Buchstaben ['a', 'b', 'c'].</p> <p>L\u00f6sungen</p>"},{"location":"content/collections/sets/","title":"Sets","text":"<p>Ein Set ist eine Datenstruktur, die f\u00fcr die Speicherung einer ungeordneten Sammlung von einzigartigen Elementen verwendet wird. Das hei\u00dft, dass sich die Elemente in einem Set nicht wiederholen. </p> <p>Sets bieten folgende Eigenschaften:</p> <ul> <li> <p>Ungeordnet: Sets haben keine feste Reihenfolge der Elemente.</p> </li> <li> <p>Einzigartige Elemente: Jedes Element in einem Set ist einzigartig. Duplikate werden ignoriert und tauchen im Set nur einmal auf.</p> </li> <li> <p>Unver\u00e4nderliche Elemente: Sets k\u00f6nnen nur unver\u00e4nderliche (immutable) Datentypen als Elemente enthalten, wie Zahlen, Strings und Tupel. Das hei\u00dft, Listen und Dictionaries k\u00f6nnen zum Beispiel nicht in Sets gespeichert werden.</p> </li> <li> <p>Ver\u00e4nderlich: Sets selbst sind ver\u00e4nderlich, das hei\u00dft man kann Elemente hinzuf\u00fcgen und entfernen.</p> </li> <li> <p>Kein Indexzugriff: Aufgrund der Ungeordnetheit der Elemente gibt es keinen direkten Indexzugriff. Die Mitgliedschaft eines Elements wird mit Methoden wie <code>in</code> \u00fcberpr\u00fcft.</p> </li> </ul> <p>Sets werden mit geschweiften Klammern <code>{}</code> oder der <code>set()</code>-Funktion erstellt.</p> <pre><code>einzigartige_zahlen = {1, 2, 3, 2, 1} \nbuchstaben = {'a', 'a', 'b', 'b'}\n\ntext = \"Python ist cool. Mathe ist auch cool.\"\nunique_words = set(text.split())\n\nfor word in unique_words:\n    print(word)\n</code></pre> <p>Hier eine Auswahl \u00fcber h\u00e4ufig verwendete Funktionen im Zusammenhang mit Sets.  Du findest alle Set Methoden hier.</p> Funktion Beschreibung Beispiel <code>set1.add(x)</code> F\u00fcgt das Element <code>x</code> zum Set hinzu. <code>set1.add(5)</code> <code>set1.remove(x)</code> Entfernt das Element <code>x</code> aus dem Set. Wirft einen Fehler, falls <code>x</code> nicht vorhanden ist. <code>set1.remove(5)</code> <code>set1.discard(x)</code> Entfernt das Element <code>x</code> aus dem Set. Kein Fehler, wenn <code>x</code> nicht vorhanden ist. <code>set1.discard(5)</code> <code>set1.pop()</code> Entfernt und gibt ein zuf\u00e4lliges Element aus dem Set zur\u00fcck. <code>element = set1.pop()</code> <code>set1.clear()</code> Entfernt alle Elemente aus dem Set. <code>set1.clear()</code> <code>set1.union(set2)</code> oder <code>set1 \u01c0 set2</code> Gibt ein Set zur\u00fcck, dass die Summe der Elemente von <code>set1</code> und <code>set2</code> enth\u00e4lt <code>set3 = set1.union(set2)</code> <code>set1.intersection(set2)</code> oder <code>set1 &amp; set2</code> Gibt ein neues Set zur\u00fcck, das die Schnittmenge von <code>set1</code> und <code>set2</code> ist. <code>set3 = set1.intersection(set2)</code> <code>set1.difference(set2)</code> oder <code>set1 - set2</code> Gibt ein neues Set zur\u00fcck, das die Elemente von <code>set1</code> enth\u00e4lt, die nicht in <code>set2</code> sind. <code>set3 = set1.difference(set2)</code> <code>set1.symmetric_difference(set2)</code> oder <code>set1 ^ set2</code> Gibt ein neues Set zur\u00fcck, das Elemente enth\u00e4lt, die in <code>set1</code> oder <code>set2</code>, aber nicht in beiden sind. <code>set3 = set1.symmetric_difference(set2)</code> <p></p> <pre><code>setA = {1,2,3,2,1}\nsetB = set(range(3))\n\nprint(setA | setB)\nprint(setA &amp; setB)\nprint(setA - setB)\nprint(setB - setA)\nprint(setA ^ setB)\n</code></pre> <p>H\u00e4ufig werden Sets verwendet, um Duplikate aus Listen zu entfernen oder um zu pr\u00fcfen, ob Elemente in einer Struktur sind. Dies ist n\u00e4mlich aufgrund der internen Struktur von Sets h\u00e4ufig schneller, als bei Listen.</p>"},{"location":"content/collections/sets/#aufgaben","title":"Aufgaben","text":"Set Erstellung <p>Erstelle ein Set aus den Zahlen 1 bis 5 und gib es aus.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5}\nprint(mein_set)\n</code></pre> Duplikatentfernung <p>Konvertiere die Liste <code>[1, 2, 2, 3, 4, 5, 5, 6]</code> in ein Set, um Duplikate zu entfernen.</p> L\u00f6sung <pre><code>meine_liste = [1, 2, 2, 3, 4, 5, 5, 6]\nmein_set = set(meine_liste)\nprint(mein_set)\n</code></pre> Elemente Hinzuf\u00fcgen <p>F\u00fcge die Zahlen 6, 7 und 8 zu dem Set aus Aufgabe 1 hinzu.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5}\nmein_set.update([6, 7, 8])\nprint(mein_set)\n</code></pre> Element Entfernen <p>Entferne die Zahl 5 aus dem Set, das du in Aufgabe 3 erstellt hast.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5, 6, 7, 8}\nmein_set.remove(5)\nprint(mein_set)\n</code></pre> Set Durchlaufen <p>Durchlaufe ein Set in einer Schleife und drucke jedes Element aus.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5}\nfor element in mein_set:\n   print(element)\n</code></pre> Set Union <p>Erstelle zwei Sets, <code>set1 = {1, 2, 3}</code> und <code>set2 = {3, 4, 5}</code>, und finde ihre Vereinigung.</p> L\u00f6sung <pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1 | set2\nprint(union_set)\n</code></pre> Set Schnittmenge <p>Finde die Schnittmenge von <code>set1</code> und <code>set2</code> aus der vorherigen Aufgabe.</p> L\u00f6sung <pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nschnittmenge = set1 &amp; set2\nprint(schnittmenge)\n</code></pre> Set Differenz <p>Ermittle die Differenz zwischen <code>set1</code> und <code>set2</code> und umgekehrt.</p> L\u00f6sung <pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\ndifferenz = set1 - set2\nprint(differenz)\n</code></pre> Symmetrische Differenz <p>Finde die symmetrische Differenz zwischen <code>set1</code> und <code>set2</code>.</p> L\u00f6sung <pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nsym_differenz = set1 ^ set2\nprint(sym_differenz)\n</code></pre> Set L\u00e4nge <p>Ermittle die Anzahl der Elemente in einem Set deiner Wahl.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5}\nprint(len(mein_set))\n</code></pre> Set Mitgliedschaftstest <p>\u00dcberpr\u00fcfe, ob ein bestimmtes Element in einem Set vorhanden ist.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5}\nprint(3 in mein_set)\n</code></pre> Set Leeren <p>Entferne alle Elemente aus einem Set.</p> L\u00f6sung <pre><code>mein_set = {1, 2, 3, 4, 5}\nmein_set.clear()\nprint(mein_set)\n</code></pre> Subsets <p>\u00dcberpr\u00fcfe, ob ein Set eine Teilmenge eines anderen Sets ist.</p> L\u00f6sung <pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nprint(set1.issubset(set2))\n</code></pre> Supersets <p>\u00dcberpr\u00fcfe, ob ein Set eine Obermenge eines anderen Sets ist.</p> L\u00f6sung <pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nprint(set2.issuperset(set1))\n</code></pre>"},{"location":"content/collections/sets/#unveranderliche-sets-frozenset","title":"Unver\u00e4nderliche Sets: <code>frozenset</code>","text":"<p>M\u00f6chte man ein Set erstellen, das jedoch unver\u00e4nderlich (immutable) ist, so steht hier die Struktur <code>frozenset</code> bereit. Wir k\u00f6nnen hier dieselben nicht manipulierenden Operationen anwenden wie bei normalen Sets.</p> <pre><code>S = frozenset({'red', 'green', 'blue'})\nprint(len(S)) # 3\n\nS = frozenset({'red', 'green', 'blue'})\nprint(S | {'yellow'}) # frozenset({'blue', 'green', 'yellow', 'red'})\n</code></pre> <p>Versuchen wir jedoch das Set zu ver\u00e4ndern, erhalten wir Exceptions:</p> <pre><code># Element entfernen\nS = frozenset({'red', 'green', 'blue'})\nS.pop() # AttributeError: 'frozenset' object has no attribute 'pop'\n\n# Item hinzuf\u00fcgen\nS = frozenset({'red', 'green', 'blue'})\nS.add('yellow') # AttributeError: 'frozenset' object has no attribute 'add'\n</code></pre>"},{"location":"content/collections/solution_dictionaries/","title":"L\u00f6sungen","text":""},{"location":"content/collections/solution_dictionaries/#1-grundlegendes-dictionary","title":"1. Grundlegendes Dictionary","text":"<pre><code>mein_dict = {\"Name\": \"Anna\", \"Alter\": 30, \"Beruf\": \"Ingenieurin\"}\nprint(mein_dict)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#2-zugriff-auf-werte","title":"2. Zugriff auf Werte","text":"<pre><code>print(mein_dict[\"Name\"])  # Gibt \"Anna\" aus\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#3-hinzufugen-eines-eintrags","title":"3. Hinzuf\u00fcgen eines Eintrags","text":"<pre><code>mein_dict[\"Stadt\"] = \"Berlin\"\nprint(mein_dict)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#4-andern-eines-wertes","title":"4. \u00c4ndern eines Wertes","text":"<pre><code>mein_dict[\"Alter\"] = 31\nprint(mein_dict)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#5-entfernen-eines-eintrags","title":"5. Entfernen eines Eintrags","text":"<pre><code>del mein_dict[\"Beruf\"]\nprint(mein_dict)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#6-durchlaufen-mit-schleifen","title":"6. Durchlaufen mit Schleifen","text":"<pre><code>for key, value in mein_dict.items():\n   print(f\"{key}: {value}\")\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#7-nur-schlussel-durchlaufen","title":"7. Nur Schl\u00fcssel durchlaufen","text":"<pre><code>for key in mein_dict.keys():\n   print(key)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#8-nur-werte-durchlaufen","title":"8. Nur Werte durchlaufen","text":"<pre><code>for value in mein_dict.values():\n   print(value)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#9-schlussel-existenz-prufen","title":"9. Schl\u00fcssel-Existenz pr\u00fcfen","text":"<pre><code>key = \"Name\"\nif key in mein_dict:\n   print(f\"{key} ist im Dictionary vorhanden.\")\nelse:\n   print(f\"{key} ist nicht im Dictionary vorhanden.\")\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#10-nested-dictionary","title":"10. Nested Dictionary","text":"<pre><code>mein_nested_dict = {\n    \"person1\": {\"Name\": \"Max\", \"Alter\": 25},\n    \"person2\": {\"Name\": \"Lisa\", \"Alter\": 28}\n}\nprint(mein_nested_dict[\"person1\"][\"Name\"])  # Gibt \"Max\" aus\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#anspruchsvolle-aufgaben","title":"Anspruchsvolle Aufgaben","text":"<p>Hier sind die L\u00f6sungen f\u00fcr die vorgeschlagenen komplexen Aufgaben mit Python Dictionaries:</p>"},{"location":"content/collections/solution_dictionaries/#losung-zu-aufgabe-1-wortzahler","title":"L\u00f6sung zu Aufgabe 1: Wortz\u00e4hler","text":"<pre><code>text = input(\"Gib einen Text ein: \")\ntext = text.lower()\nwort_haeufigkeit = {}\n\nfor wort in text.split():\n    if wort in wort_haeufigkeit:\n        wort_haeufigkeit[wort] += 1\n    else:\n        wort_haeufigkeit[wort] = 1\n\nprint(wort_haeufigkeit)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#losung-zu-aufgabe-2-telefonbuch","title":"L\u00f6sung zu Aufgabe 2: Telefonbuch","text":"<pre><code>telefonbuch = {}\n\nwhile True:\n    aktion = input(\"W\u00e4hle eine Aktion: hinzuf\u00fcgen, suchen, \u00e4ndern, l\u00f6schen, beenden: \")\n\n    if aktion == \"beenden\":\n        break\n    elif aktion == \"hinzuf\u00fcgen\":\n        name = input(\"Name: \")\n        nummer = input(\"Telefonnummer: \")\n        telefonbuch[name] = nummer\n    elif aktion == \"suchen\":\n        name = input(\"Name: \")\n        print(telefonbuch.get(name, \"Nicht gefunden\"))\n    elif aktion == \"\u00e4ndern\":\n        name = input(\"Name: \")\n        if name in telefonbuch:\n            nummer = input(\"Neue Telefonnummer: \")\n            telefonbuch[name] = nummer\n        else:\n            print(\"Name nicht im Telefonbuch\")\n    elif aktion == \"l\u00f6schen\":\n        name = input(\"Name: \")\n        if name in telefonbuch:\n            del telefonbuch[name]\n        else:\n            print(\"Name nicht im Telefonbuch\")\n\n    print(\"Aktuelles Telefonbuch:\", telefonbuch)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#losung-zu-aufgabe-3-lagerbestandsverwaltung","title":"L\u00f6sung zu Aufgabe 3: Lagerbestandsverwaltung","text":"<pre><code>lager = {}\n\nwhile True:\n    aktion = input(\"Aktion w\u00e4hlen: hinzuf\u00fcgen, aktualisieren, l\u00f6schen, anzeigen, beenden: \")\n\n    if aktion == \"beenden\":\n        break\n    elif aktion == \"hinzuf\u00fcgen\":\n        produkt = input(\"Produktname: \")\n        menge = int(input(\"Menge: \"))\n        lager[produkt] = lager.get(produkt, 0) + menge\n    elif aktion == \"aktualisieren\":\n        produkt = input(\"Produktname: \")\n        if produkt in lager:\n            menge = int(input(\"Neue Menge: \"))\n            lager[produkt] = menge\n        else:\n            print(\"Produkt nicht gefunden\")\n    elif aktion == \"l\u00f6schen\":\n        produkt = input(\"Produktname: \")\n        if produkt in lager:\n            del lager[produkt]\n        else:\n            print(\"Produkt nicht gefunden\")\n    elif aktion == \"anzeigen\":\n        for produkt, menge in lager.items():\n            print(f\"{produkt}: {menge}\")\n\n    print(\"Aktueller Lagerbestand:\", lager)\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#losung-zu-aufgabe-4-verschachteltes-dictionary-analysieren","title":"L\u00f6sung zu Aufgabe 4: Verschachteltes Dictionary analysieren","text":"<pre><code>studenten = {\"Anna\": {\"Mathe\": 1, \"Englisch\": 2}, \"Max\": {\"Mathe\": 3, \"Englisch\": 2}}\n\nfor name, faecher in studenten.items():\n    durchschnitt = sum(faecher.values()) / len(faecher)\n    print(f\"{name}: Durchschnittsnote = {durchschnitt:.2f}\")\n</code></pre>"},{"location":"content/collections/solution_dictionaries/#losung-zu-aufgabe-5-haufigster-buchstabe-in-einem-string-finden","title":"L\u00f6sung zu Aufgabe 5. H\u00e4ufigster Buchstabe in einem String finden:","text":"<pre><code>text = \"Mississippi\"\n\n# Lege Dictionary an\nletters = dict()\n\n# Durchlaufe den text Buchstabenweise.\nfor letter in text:\n    # \u00dcberpr\u00fcfe, ob der Buchstabe schon im Dictionary vorhanden ist. Wenn nein, setze den current_count auf 0.\n    current_count = letters.get(letter, 0)\n    # Speichere den erh\u00f6hten Wert f\u00fcr den Buchstaben\n    letters[letter] = current_count + 1\n\n# Ermittle, welche Buchstabe der h\u00e4ufigste ist.    \ngreatest_number = max(letters.values())\n\n# W\u00e4hle alle Buchstaben aus, die am h\u00e4ufigsten auftauchen.\nresult = []\nfor letter, count in letters:\n    if count == greatest_number:\n        result.append(letter)\n\nprint(f\"Im Text '{text}' sind die h\u00e4ufigsten Buchstaben {result}, die jeweils {greatest_number} mal auftauchen.\")\n</code></pre>"},{"location":"content/collections/solutions_lists/","title":"L\u00f6sungen","text":""},{"location":"content/collections/solutions_lists/#1-erstellen-einer-liste","title":"1. Erstellen einer Liste:","text":"<pre><code>zahlen = [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"content/collections/solutions_lists/#2-hinzufugen-von-elementen","title":"2. Hinzuf\u00fcgen von Elementen:","text":"<pre><code>zahlen.append(6)\n</code></pre>"},{"location":"content/collections/solutions_lists/#3-entfernen-von-elementen","title":"3. Entfernen von Elementen:","text":"<pre><code>zahlen.remove(3)\n</code></pre>"},{"location":"content/collections/solutions_lists/#4-zugreifen-auf-ein-listenelement","title":"4. Zugreifen auf ein Listenelement:","text":"<pre><code>drittes_element = zahlen[2]\n</code></pre>"},{"location":"content/collections/solutions_lists/#5-listenlange","title":"5. Listenl\u00e4nge:","text":"<pre><code>laenge = len(zahlen)\n</code></pre>"},{"location":"content/collections/solutions_lists/#6-slicing","title":"6. Slicing:","text":"<pre><code>erste_drei = zahlen[:3]\n</code></pre>"},{"location":"content/collections/solutions_lists/#7-elemente-zahlen","title":"7. Elemente z\u00e4hlen:","text":"<pre><code>anzahl_zwei = zahlen.count(2)\n</code></pre>"},{"location":"content/collections/solutions_lists/#8-liste-umkehren","title":"8. Liste umkehren:","text":"<pre><code>zahlen.reverse()\n# or\nzahlen = zahlen[::-1]\n</code></pre>"},{"location":"content/collections/solutions_lists/#9-liste-sortieren","title":"9. Liste sortieren:","text":"<pre><code>zahlen.sort(reverse=True)\n</code></pre>"},{"location":"content/collections/solutions_lists/#10-listen-verschachteln","title":"10. Listen verschachteln:","text":"<pre><code>verschachtelt = [zahlen, ['a', 'b', 'c']]\n</code></pre>"},{"location":"content/collections/solutions_sets/","title":"L\u00f6sungen","text":""},{"location":"content/collections/solutions_sets/#1-set-erstellung","title":"1. Set Erstellung","text":"<pre><code>mein_set = {1, 2, 3, 4, 5}\nprint(mein_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#2-duplikatentfernung","title":"2. Duplikatentfernung","text":"<pre><code>meine_liste = [1, 2, 2, 3, 4, 5, 5, 6]\nmein_set = set(meine_liste)\nprint(mein_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#3-elemente-hinzufugen","title":"3. Elemente Hinzuf\u00fcgen","text":"<pre><code>mein_set = {1, 2, 3, 4, 5}\nmein_set.update([6, 7, 8])\nprint(mein_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#4-element-entfernen","title":"4. Element Entfernen","text":"<pre><code>mein_set = {1, 2, 3, 4, 5, 6, 7, 8}\nmein_set.remove(5)\nprint(mein_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#5-set-durchlaufen","title":"5. Set Durchlaufen","text":"<pre><code>mein_set = {1, 2, 3, 4, 5}\nfor element in mein_set:\n   print(element)\n</code></pre>"},{"location":"content/collections/solutions_sets/#6-set-union","title":"6. Set Union","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1 | set2\nprint(union_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#7-set-schnittmenge","title":"7. Set Schnittmenge","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nschnittmenge = set1 &amp; set2\nprint(schnittmenge)\n</code></pre>"},{"location":"content/collections/solutions_sets/#8-set-differenz","title":"8. Set Differenz","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\ndifferenz = set1 - set2\nprint(differenz)\n</code></pre>"},{"location":"content/collections/solutions_sets/#9-symmetrische-differenz","title":"9. Symmetrische Differenz","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nsym_differenz = set1 ^ set2\nprint(sym_differenz)\n</code></pre>"},{"location":"content/collections/solutions_sets/#10-set-lange","title":"10. Set L\u00e4nge","text":"<pre><code>mein_set = {1, 2, 3, 4, 5}\nprint(len(mein_set))\n</code></pre>"},{"location":"content/collections/solutions_sets/#11-set-mitgliedschaftstest","title":"11. Set Mitgliedschaftstest","text":"<pre><code>mein_set = {1, 2, 3, 4, 5}\nprint(3 in mein_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#12-set-leeren","title":"12. Set Leeren","text":"<pre><code>mein_set = {1, 2, 3, 4, 5}\nmein_set.clear()\nprint(mein_set)\n</code></pre>"},{"location":"content/collections/solutions_sets/#13-subsets","title":"13. Subsets","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nprint(set1.issubset(set2))\n</code></pre>"},{"location":"content/collections/solutions_sets/#14-supersets","title":"14. Supersets","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nprint(set2.issuperset(set1))\n</code></pre>"},{"location":"content/collections/weitere_datenstrukturen/","title":"Set","text":"Video <p>Sets (deutsch: Mengen ) sind listen sehr \u00e4hnlich, sie haben aber zwei f\u00fcr uns wichtige unterschiede:</p> <ul> <li>Jedes Element in der Liste darf nur ein mal auftauchen.</li> <li>Jedes Mengen haben keine Ordnung, das hei\u00dft, wir k\u00f6nnen nicht auf das <code>x</code>-te Element zugreifen.</li> <li>Sets werden mit geschweifen Klammern definiert, statt mit eckigen.</li> </ul> <p>Ein Anwendungsfall f\u00fcr Sets ist das finden einmaliger Elementen in Listen.</p> <pre><code>my_list = [1, 1, 2, 1, 2, 3] # (1)!\nmy_set = set(my_list) # (2)!\nprint(my_set) # (3)!\n</code></pre> <ol> <li>Liste <code>my_list</code> wird erstellt. Manche Elemente sind doppelt und dreifach vorhanden.</li> <li>Aus der Liste wird ein Set (Menge) gemacht.</li> <li>In der Liste sind nun alle Elemente einmalig.</li> </ol> <p>Code im Debugger</p> <p> </p>"},{"location":"content/collections/weitere_datenstrukturen/#tupel","title":"Tupel","text":"Video <p>Tupel sind fast identisch zu listen. Hier sind die f\u00fcr uns entscheidenden Unterschiede:</p> <ul> <li>Tupel werden mit runden <code>()</code> statt mit eckigen Klammern <code>[]</code> definiert.</li> <li>Tupel lassen sich im Nachhinein nicht mehr \u00e4ndern.</li> </ul> <pre><code>my_tuple = (1, 2, 3) # (1)!\nprint(f\"Erstes Element: {my_tuple[0]}\") # (2)!\n\nmy_tuple[0] = 4 # (3)! \n</code></pre> <ol> <li>Ein Tupel wird hier definiert.</li> <li>Der Zugriff auf die Elemente des Tupels sieht genau so aus, wie bei Listen.</li> <li>Hier kommt es bei der Ausf\u00fchrung zu einem Fehler, denn der Inhalt eines Tupels kann im Nachhinein nicht mehr ge\u00e4ndert werden. Auch Methoden wie <code>append</code> exitieren nicht bei Tupeln.</li> </ol>"},{"location":"content/collections/weitere_datenstrukturen/#dictionary","title":"Dictionary","text":"Video <p>Dictionaries sind eine h\u00e4ufig verwendete Datenstruktur, die man als eine Liste mit speziellen Zugriffsm\u00f6glichkeiten betrachten kann. Bei einer Liste greift man auf die Werte immer \u00fcber Zahlen zu. Bei einem Dictionary werden auf die Werte (Values) \u00fcber  vorher definierte Schl\u00fcssel (Keys) zugegriffen.</p> <p>Wir k\u00f6nnen uns also vorstellen, dass die Schubladen in unseren Schr\u00e4nken nicht durchnummeriert sind, sondern eine Aufschrift haben.</p> <p>Listen</p> <p> <pre><code>my_list = [5, 8, 5, 1, 0,80]\n\nprint(my_list[0]) # (1)!\n\nmy_list[0] = 10 # (2)!\n</code></pre></p> <ol> <li>Zugriff auf Element \u00fcber den Index <code>0</code>.</li> <li>\u00dcberschreiben des Elements an dem Index <code>0</code>.</li> </ol> <p>Dictionaries</p> <p> <pre><code>my_dict = {\n    'Hunde': 5,\n    'Katzen': 8,\n    'H\u00fchner': 5,\n    'H\u00e4hne': 1,\n    'Schweine': 0,\n    'K\u00fche': 80\n}\n\nprint(my_dict['Hunde']) # (1)!\n\nmy_dict['Hunde'] = 6 # (2)!\n</code></pre></p> <ol> <li>\u00dcber den Schl\u00fcssel <code>Hunde</code> wird auf das Value <code>5</code> zugegriffen.</li> <li>Ein neuer Value <code>6</code> wird beim Schl\u00fcssel <code>Hunde</code> gespeichert. </li> </ol>"},{"location":"content/dateioperationen/dateioperationen/","title":"Dateioperationen","text":""},{"location":"content/dateioperationen/dateioperationen/#dateien-manuell-offnen-und-schlieen","title":"Dateien manuell \u00f6ffnen und schlie\u00dfen","text":"<p>Lade die Datei <code>beispiel.txt</code> herunter\ud83d\udd3d und lese sie mit folgendem Code aus:</p> <pre><code>datei = open(\"beispiel.txt\")\ninhalt = datei.read()\nprint(inhalt)\ndatei.close()\n</code></pre> <p><code>open</code> \u00f6ffnet die Datei, <code>read</code> liest sie aus und <code>close</code> schlie\u00dft sie wieder.</p> <p>Beim Arbeiten mit Dateien ohne <code>with open</code> musst du darauf achten, die Datei manuell zu \u00f6ffnen und zu schlie\u00dfen. Das kann zu Problemen f\u00fchren, wenn ein Fehler auftritt, bevor die Datei geschlossen wird. Daher wird dieser Weg nicht empfohlen, sondern man sollte immer mit <code>with</code> arbeiten.</p> Alternativen zu read <p>\u00c4ndere das folgende Beispiel ab, sodass statt <code>read</code> die Methoden <code>readline</code> und <code>readlines</code> verwendet werden. Was liefern diese Methoden und wie kann man sie nutzen? Was passiert, wenn man <code>readline</code> mehrfach hintereinander ausf\u00fchrt?</p> <pre><code>with open(\"beispiel.txt\", \"r\") as datei:\n    inhalt = datei.read()\n    print(inhalt)\n</code></pre> L\u00f6sung <pre><code># Mit readline\nwith open(\"beispiel.txt\", \"r\") as datei:\n    erste_zeile = datei.readline()\n    zweite_zeile = datei.readline()\n    print(\"Erste Zeile:\", erste_zeile)\n    print(\"Zweite Zeile:\", zweite_zeile)\n\n# Mit readlines\nwith open(\"beispiel.txt\", \"r\") as datei:\n    alle_zeilen = datei.readlines()\n    print(\"Alle Zeilen:\", alle_zeilen)\n</code></pre> <p><code>readline()</code> gibt jeweils eine einzelne Zeile zur\u00fcck. Bei mehrfachem Aufruf werden nacheinander die Zeilen der Datei gelesen. <code>readlines()</code> gibt eine Liste mit allen Zeilen der Datei zur\u00fcck.</p> Fehler beim Dateizugriff abfangen <p>Welcher Fehler wird geworfen, wenn eine Datei nicht existiert? Schreibe Code, der diesen Fehler bewusst ausl\u00f6st und auff\u00e4ngt. Gib eine Nachricht auf der Konsole aus und lies den Namen der nicht existierenden Datei aus der Exception aus.</p> <pre><code># Vervollst\u00e4ndige den Code hier\ndatei = open(\"nicht_existierende_datei.txt\", \"r\")\ninhalt = datei.read()\nprint(inhalt)\ndatei.close()\n</code></pre> Tipp <p>Verwende <code>try</code> und <code>except</code> um den Fehler abzufangen.</p> L\u00f6sung <pre><code>try:\n    datei = open(\"nicht_existierende_datei.txt\", \"r\")\n    inhalt = datei.read()\n    print(inhalt)\n    datei.close()\nexcept FileNotFoundError as e:\n    print(f\"Datei existiert nicht: {e.filename}\")\n</code></pre> <p>Der geworfene Fehler ist <code>FileNotFoundError</code>. Durch das Auffangen der Exception mit <code>except FileNotFoundError as e</code> k\u00f6nnen wir auf die Eigenschaften des Fehlers zugreifen, wie z.B. den Dateinamen mit <code>e.filename</code>.</p>"},{"location":"content/dateioperationen/dateioperationen/#dateien-mit-with-open-nutzen","title":"Dateien mit <code>with open</code> nutzen","text":"<p>Um sicherzustellen, dass Dateien immer geschlossen werden (auch bei Fehlern), sollten Dateien mit <code>with open</code> ge\u00f6ffnet und gelesen werden:</p> <pre><code>with open(\"beispiel.txt\") as datei:\n    inhalt = datei.read()\n\nprint(inhalt)\n</code></pre> <p>Die <code>with open</code>-Anweisung ist eine sicherere Methode, um mit Dateien umzugehen. Sie stellt sicher, dass die Datei ordnungsgem\u00e4\u00df geschlossen wird, selbst wenn ein Fehler auftritt.</p> Zeilenweise Datei lesen <p>Erstelle ein Programm, das eine Datei ausliest und die erste Zeile der Datei ausgibt. Dann wartet das Programm auf eine Nutzereingabe (z.B. das Dr\u00fccken von <code>enter</code>) und gibt dann die n\u00e4chste Zeile aus. Dies wird so lange wiederholt, bis die ganze Datei gelesen wurde. Das Programm endet dann.</p> <pre><code># Vervollst\u00e4ndige den Code hier\npath = \"beispiel.txt\"\n# \u00d6ffne die Datei und lies zeilenweise\n</code></pre> Tipp <p>Verwende eine Schleife mit <code>readline()</code> und <code>input()</code> f\u00fcr die Nutzereingabe.</p> L\u00f6sung <pre><code>path = \"beispiel.txt\"\nwith open(path) as file:\n    while True:\n        line = file.readline()\n        if not line:\n            break\n        print(line, end='')\n        input(\"Dr\u00fccke Enter f\u00fcr die n\u00e4chste Zeile...\")\n</code></pre> <p>Dieses Programm \u00f6ffnet die Datei \"beispiel.txt\", liest sie zeilenweise aus und gibt jede Zeile aus. Nach jeder Zeile wartet es auf eine Benutzereingabe (Enter-Taste), bevor es zur n\u00e4chsten Zeile \u00fcbergeht. Wenn keine Zeilen mehr zu lesen sind, beendet sich das Programm.</p> Zeichen in Datei z\u00e4hlen <p>Erstelle ein Programm, das die Anzahl der Zeichen in einer Textdatei z\u00e4hlt und ausgibt. Ber\u00fccksichtige dabei auch Leerzeichen und Sonderzeichen.</p> <pre><code># Vervollst\u00e4ndige den Code hier\npath = \"beispiel.txt\"\n# \u00d6ffne die Datei und z\u00e4hle die Zeichen\n</code></pre> Tipp <p>Wie erh\u00e4lt man die Anzahl der Zeichen in einem String?</p> L\u00f6sung <pre><code>path = \"beispiel.txt\"\nwith open(path, 'r') as file:\n    content = file.read()\n    character_count = len(content)\n    print(f\"Die Datei enth\u00e4lt {character_count} Zeichen.\")\n</code></pre> <p>Dieses Programm \u00f6ffnet die Datei \"beispiel.txt\", liest den gesamten Inhalt in einen String ein und z\u00e4hlt dann die Anzahl der Zeichen in diesem String mithilfe der <code>len()</code> Funktion. Das Ergebnis wird anschlie\u00dfend ausgegeben.</p>"},{"location":"content/dateioperationen/dateioperationen/#zugriffsmodi","title":"Zugriffsmodi","text":"<p>Es gibt verschiedene Zugriffsmodi auf Dateien, die mit dem zweiten Parameter von <code>open</code> ausgew\u00e4hlt werden.</p> <p>Link zur Dokumentation von open</p> Modus Beschreibung <code>\"r\"</code> Lesen (default) <code>\"w\"</code> Schreiben <code>\"x\"</code> Exklusives Schreiben <code>\"a\"</code> Anh\u00e4ngen <code>\"b\"</code> Bin\u00e4rmodus <code>\"t\"</code> Textmodus (default) <code>\"+\"</code> Aktualisieren (Lesen/Schreiben) <p>Es k\u00f6nnen auch mehrere dieser Modi auf ein mal gew\u00e4hlt werden, indem man diese in einem String zusammenstellt. Z.B. erlaubt <code>\"rw\"</code> das Lesen und Schreiben der Datei.</p> Bin\u00e4res Lesen von Dateien <p>Erstelle ein Programm, das die Dateien \"beispiel.txt\" und \"mein_passwort.png\" mit den Modi <code>r</code>, <code>rt</code> und <code>rb</code> \u00f6ffnet und liest.  Gib f\u00fcr jeden Modus und jede Datei aus, ob das Lesen erfolgreich war oder ob ein Fehler aufgetreten ist.</p> <pre><code># Vervollst\u00e4ndige den Code hier\nfiles = [\"beispiel.txt\", \"mein_passwort.png\"]\nmodes = [\"r\", \"rt\", \"rb\"]\n\n# \u00d6ffne und lies die Dateien in verschiedenen Modi\n</code></pre> Tipp <p>Verwende eine verschachtelte Schleife, um durch die Dateien und Modi zu iterieren.  Nutze try-except, um Fehler abzufangen und zu melden.</p> L\u00f6sung <pre><code>files = [\"beispiel.txt\", \"mein_passwort.png\"]\nmodes = [\"r\", \"rt\", \"rb\"]\n\nfor file in files:\n    for mode in modes:\n        try:\n            with open(file, mode) as f:\n                content = f.read()\n                print(f\"Erfolgreich gelesen: {file} im Modus {mode}\")\n        except Exception as e:\n            print(f\"Fehler beim Lesen von {file} im Modus {mode}: {str(e)}\")\n</code></pre> <p>Dieses Programm versucht, beide Dateien in allen drei Modi zu \u00f6ffnen und zu lesen. Es gibt f\u00fcr jede Kombination aus Datei und Modus an, ob das Lesen erfolgreich war oder ob ein Fehler aufgetreten ist.</p> <p>Erwartetes Ergebnis: - \"beispiel.txt\" kann in allen Modi gelesen werden. - \"mein_passwort.png\" kann nur im Modus \"rb\" ohne Fehler gelesen werden.</p> <p>Dies demonstriert, dass Textdateien in allen Modi gelesen werden k\u00f6nnen, w\u00e4hrend Bin\u00e4rdateien wie Bilder nur im Bin\u00e4rmodus (\"rb\") korrekt gelesen werden k\u00f6nnen.</p>"},{"location":"content/dateioperationen/dateioperationen/#in-dateien-schreiben","title":"In Dateien schreiben","text":"<p>Mit dem folgenden Code wird in eine Datei geschrieben</p> <pre><code>with open(\"save_file\", \"w\") as datei:\n    datei.write(\"Hallo\")\n</code></pre> <p>Beachte, dass die Datei automatisch erstellt wird, wenn sie nicht existiert. Das ist doch nett \ud83d\ude09</p> Inhalte in Datei schreiben <p>Erstelle ein Programm, das den Nutzer wiederholt nach einer Eingabe fragt und diese in eine Datei schreibt. Das Programm soll so lange laufen, bis der Nutzer 'quit' eingibt. Am Ende soll die Datei ge\u00f6ffnet werden.</p> Tipp <p>Nutze <code>os.system()</code> zum \u00d6ffnen der Datei am Ende.</p> L\u00f6sung <pre><code>from os import system\n\npath = \"meintext.txt\"\nwith open(path, \"wt\") as file:\n    while True:\n        user_input = input(\"Gib etwas ein (oder 'quit' zum Beenden): \")\n        if user_input == \"quit\":\n            break\n        file.write(user_input + \"\\n\")\n\n# \u00d6ffne die Datei am Ende\nsystem(\"open -a TextEdit \" + path)  # MacOS\nsystem(\"notepad.exe \" + path)  # Windows\n</code></pre> <p>Dieses Programm \u00f6ffnet die Datei \"meintext.txt\" im Schreibmodus. Es fragt den Benutzer wiederholt nach Eingaben und schreibt diese in die Datei, bis der Benutzer 'quit' eingibt. Jede Eingabe wird in einer neuen Zeile gespeichert. Am Ende versucht das Programm, die Datei zu \u00f6ffnen.</p> <p>Hinweis: Die Methode zum \u00d6ffnen der Datei am Ende h\u00e4ngt vom Betriebssystem ab. Dieser Code versucht, beide g\u00e4ngigen Methoden abzudecken.</p> Anh\u00e4ngen an eine Datei <p>Erstelle ein Programm, das den Text \"Hallo\" in eine Datei namens \"greetings.txt\" schreibt. Das Programm soll so funktionieren, dass bei jeder Ausf\u00fchrung ein neuer Absatz mit \"Hallo\" an das Ende der Datei angeh\u00e4ngt wird, anstatt den vorherigen Inhalt zu \u00fcberschreiben.</p> Tipp <p>Schaue in die Modus-Tabelle und finde den richtigen Modus zum Anh\u00e4ngen von Inhalten an eine Datei.</p> L\u00f6sung <pre><code>filename = \"greetings.txt\"\nwith open(filename, \"a\") as file:\n    file.write(\"Hallo\\n\")\n\nprint(f\"'Hallo' wurde an {filename} angeh\u00e4ngt.\")\n</code></pre> <p>Dieses Programm \u00f6ffnet die Datei \"greetings.txt\" im Anh\u00e4nge-Modus (\"a\" f\u00fcr append). Es schreibt dann \"Hallo\" gefolgt von einem Zeilenumbruch (\"\\n\") ans Ende der Datei. Bei jeder Ausf\u00fchrung des Programms wird ein neues \"Hallo\" in einer neuen Zeile hinzugef\u00fcgt, ohne den vorherigen Inhalt zu \u00fcberschreiben.</p> <p>Hinweis: Wenn die Datei noch nicht existiert, wird sie automatisch erstellt.</p>"},{"location":"content/dateioperationen/dateioperationen/#mehrere-dateien-offnen","title":"Mehrere Dateien \u00f6ffnen","text":"<p>Wir k\u00f6nnen nat\u00fcrlich auch den Inhalt der einen Datei in die andere Schreiben und ggf. auf dem Weg manipulieren. Hier werden alle <code>\"e\"</code> durch <code>\"*\"</code> ersetzt:</p> <pre><code>with open(\"beispiel.txt\", \"rt\") as org, open(\"censored_text.txt\", \"wt\") as censored:\n    text = org.read()\n    censored.write(text.replace(\"e\", \"*\"))\n</code></pre> Umkehrung einer Datei <p>Schreibe eine Funktion <code>reverse_file_content(file_path, save_file_path)</code>, die den Inhalt einer Textdatei ausliest, sie umkehrt und in eine andere Datei speichert. Das hei\u00dft, die erste Zeile wird zur letzten, die zweite zur vorletzten, usw.</p> Tipp <p>Zum Umkehren von Listen l\u00e4sst sich <code>reversed()</code> nutzen.</p> L\u00f6sung <pre><code>def reverse_file_content(file_path, save_file_path):\n    with open(file_path, 'r') as file_in, open(save_file_path, 'w') as file_out:\n        lines = file_in.readlines()\n        file_out.writelines(reversed(lines))\n\n# Beispielaufruf\nreverse_file_content(\"beispiel.txt\", \"beispiel_reversed.txt\")\n</code></pre> <p>Diese Funktion \u00f6ffnet die Eingabedatei im Lesemodus und die Ausgabedatei im Schreibmodus. Sie liest alle Zeilen der Eingabedatei, kehrt ihre Reihenfolge mit <code>reversed()</code> um und schreibt sie dann in die Ausgabedatei. </p> <p>Hinweis: Diese Methode l\u00e4dt den gesamten Dateiinhalt in den Speicher. F\u00fcr sehr gro\u00dfe Dateien k\u00f6nnte eine speichereffizientere Methode erforderlich sein.</p> ZENSUR!!! <p>Schreibe eine Klasse <code>Censorer</code> mit einer statischen Methode <code>create_censored_file(org_file_path, censored_file_path, censored_words, symbol)</code>, die die angegebenen Strings mit einem Symbol ersetzt. Dieses Symbol soll standardm\u00e4\u00dfig <code>*</code> sein.</p> <p>Wenn alles richtig gemacht wurde, dann wird der folgende Unittest funktionieren:</p> <pre><code>import unittest\nimport os\nfrom tempfile import NamedTemporaryFile\n\n\nclass TestCensorer(unittest.TestCase):\n    def test_create_censored_file(self):\n        original_text = \"Dies ist ein Test, um zu \u00fcberpr\u00fcfen, ob bestimmte W\u00f6rter zensiert werden.\"\n        censored_words = [\"Test\", \"W\u00f6rter\"]\n        expected_censored_text = \"Dies ist ein ****, um zu \u00fcberpr\u00fcfen, ob bestimmte ****** zensiert werden.\"\n\n        # Erstelle tempor\u00e4re Dateien\n        with NamedTemporaryFile(mode='w', delete=False) as org_file, NamedTemporaryFile(mode='w', delete=False) as censored_file:\n            org_file.write(original_text)\n            org_file_path = org_file.name\n            censored_file_path = censored_file.name\n\n        # Zensiere die Datei\n        Censorer.create_censored_file(org_file_path, censored_file_path, censored_words)\n\n        # \u00dcberpr\u00fcfe, ob die zensierte Datei existiert\n        self.assertTrue(os.path.exists(censored_file_path))\n\n        # \u00dcberpr\u00fcfe den Inhalt der zensierten Datei\n        with open(censored_file_path, 'r') as censored_file:\n            actual_censored_text = censored_file.read()\n\n        self.assertEqual(actual_censored_text, expected_censored_text)\n\n        # Bereinige die tempor\u00e4ren Dateien\n        os.remove(org_file_path)\n        os.remove(censored_file_path)\n\n# Starte den Test\nunittest.main(argv=[''], exit=False)\n</code></pre> Tipp <p>Eine statische Methode wird mit <code>@staticmethod</code> dekoriert.</p> L\u00f6sung <pre><code>class Censorer:\n    @staticmethod\n    def create_censored_file(org_file_path, censored_file_path, censored_words, symbol=\"*\"):\n        with open(org_file_path, \"rt\") as org, open(censored_file_path, \"wt\") as censored:\n            text = org.read()\n            for word_to_censor in censored_words:\n                replacement = symbol * len(word_to_censor)\n                text = text.replace(word_to_censor, replacement)\n            censored.write(text)\n</code></pre> <p>Diese L\u00f6sung definiert die Klasse <code>Censorer</code> mit der statischen Methode <code>create_censored_file</code>. Die Methode liest den Inhalt der Originaldatei, ersetzt die zu zensierenden W\u00f6rter durch das angegebene Symbol (standardm\u00e4\u00dfig \"*\") und schreibt den zensierten Text in eine neue Datei.</p> <p>Die Methode funktioniert wie folgt: 1. \u00d6ffnet die Originaldatei im Lesemodus und die Zieldatei im Schreibmodus. 2. Liest den gesamten Inhalt der Originaldatei. 3. Iteriert durch die Liste der zu zensierenden W\u00f6rter. 4. F\u00fcr jedes Wort wird ein Ersatzstring erstellt, der aus dem Zensursymbol besteht und die gleiche L\u00e4nge wie das Originalwort hat. 5. Ersetzt jedes Vorkommen des zu zensierenden Wortes im Text durch den Ersatzstring. 6. Schreibt den zensierten Text in die Zieldatei.</p> <p>Diese Implementierung erf\u00fcllt die Anforderungen der Aufgabe und sollte den bereitgestellten Unittest bestehen.</p>"},{"location":"content/dateioperationen/dateioperationen/#csv-dateien","title":"CSV-Dateien","text":"<p>CSV-Dateien dienen dazu tabulare Daten zu speichern. In diesen werden Zeilen einer Tabelle gespeichert. Meist sind Zeilen mit einem Absatz getrennt und Eintr\u00e4ge in einer Zeile mit einem <code>,</code>.</p> <p>F\u00fclle eine Exceltabelle mit Inhalt und speichere dann die Datei als <code>.csv</code>. \u00d6ffne die Datei dann mit einem Texteditor, um die Struktur einer CSV zu sehen.</p> <p>Das <code>csv</code>-Modul erm\u00f6glicht das Lesen von CSV-Dateien. Mit der <code>csv.reader</code>-Funktion kannst du die Zeilen der CSV-Datei durchgehen. Der folgende Code zeigt, wie man die CSV-Datei persons.csv\ud83d\udd3d \u00f6ffnen und lesen kann:</p> <pre><code>import csv\n\nwith open(\"persons.csv\", \"r\") as csv_datei:\n    csv_reader = csv.reader(csv_datei)\n    for zeile in csv_reader:\n        print(zeile)\n</code></pre> <p>Wenn du Daten in eine CSV-Datei schreiben m\u00f6chtest, kannst du auch die <code>csv</code>-Bibliothek ebenfalls verwenden. Hier ist ein Beispiel:</p> <pre><code>import csv\n\n# Daten, die in die CSV-Datei geschrieben werden sollen\ndaten = [\n    [\"Name\", \"Alter\", \"Stadt\"],\n    [\"Max\", 25, \"Berlin\"],\n    [\"Anna\", 30, \"M\u00fcnchen\"],\n    [\"Tom\", 22, \"Hamburg\"]\n]\n\n# \u00d6ffne die CSV-Datei im Schreib-Modus\nwith open(\"ausgabe.csv\", \"w\", newline=\"\") as csv_datei:\n    # Erstelle einen CSV-Writer\n    csv_writer = csv.writer(csv_datei)\n\n    # Schreibe die Daten in die CSV-Datei\n    for zeile in daten:\n        csv_writer.writerow(zeile)\n</code></pre> CSV als Speicherformat nutzen <p>Erweitere die folgende Klasse um zwei Methoden:</p> <ul> <li><code>create_persons_from_csv(cls, file_path)</code> ist eine Klassenmethode, die aus einer csv-Datei Personen ausliest und   erstellt.</li> <li><code>def save_to_csv(self, file_path, mode='a')</code> speichert die <code>Person</code>-Instanz in einer CSV.</li> </ul> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __eq__(self, other):\n        return isinstance(other, Person) and self.name == other.name and self.age == other.age\n</code></pre> <p>CSV-Datei:</p> <pre><code>Swantje,32\nMaja,12\nNiko,31\nSven,38\n</code></pre> Tipp <p>Nutze das <code>csv</code>-Modul f\u00fcr das Lesen und Schreiben von CSV-Dateien. Die <code>@classmethod</code>-Dekoration wird f\u00fcr die Klassenmethode ben\u00f6tigt.</p> L\u00f6sung <pre><code>from csv import reader, writer\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __eq__(self, other):\n        return isinstance(other, Person) and self.name == other.name and self.age == other.age\n\n    def __str__(self):\n        return f\"Person: {self.name}, {self.age}\"\n\n    @classmethod\n    def create_persons_from_csv(cls, file_path):\n        result = list()\n        with open(file_path) as csv_file:\n            for zeile in reader(csv_file):\n                name, age = zeile\n                result.append(cls(name, int(age)))\n\n        return result\n\n    def save_to_csv(self, file_path, mode=\"a\"):\n        with open(file_path, mode, newline=\"\") as csv_file:\n            writer(csv_file).writerow([self.name, self.age])\n\n# Beispielnutzung:\ncsv_file_path = \"persons.csv\"\npersons = Person.create_persons_from_csv(csv_file_path)\n\nfor person in persons:\n    print(person)\n\nPerson(\"Gustav\", 32).save_to_csv(csv_file_path)\n</code></pre> <p>Diese L\u00f6sung implementiert die beiden geforderten Methoden:</p> <ol> <li> <p><code>create_persons_from_csv(cls, file_path)</code> ist eine Klassenmethode, die die CSV-Datei liest und f\u00fcr jede Zeile eine neue <code>Person</code>-Instanz erstellt.</p> </li> <li> <p><code>save_to_csv(self, file_path, mode=\"a\")</code> ist eine Instanzmethode, die die aktuelle <code>Person</code>-Instanz als neue Zeile an die CSV-Datei anh\u00e4ngt.</p> </li> </ol> <p>Zus\u00e4tzlich wurde eine <code>__str__</code>-Methode hinzugef\u00fcgt, um eine sch\u00f6ne String-Repr\u00e4sentation der <code>Person</code>-Objekte zu erhalten.</p> <p>Beachten Sie, dass das Alter in der <code>create_persons_from_csv</code>-Methode zu einem Integer konvertiert wird, da es in der CSV-Datei als String gespeichert ist.</p> CSV-Datei filtern <p>Erweitere die Funktion <code>create_persons_from_csv</code> um einen Parameter <code>csv_filter</code>, mit dem man einen Teil der Elemente aus der CSV herausgefiltert wird. Achte darauf, dass die Funktion auch noch funktioniert, wenn kein <code>csv_filter</code> gesetzt ist.</p> <pre><code>def no_underaged(name, age):\n    return age &gt;= 18\n\n\npersons = Person.create_persons_from_csv(\"persons.csv\", no_underaged)\n\nfor person in persons:\n    print(person)\n# Swantje,32\n# Niko,31\n# Sven,38\n</code></pre> Tipp <p>Erinnere dich, wie man Funktionen als Parameter \u00fcbergeben hat und diese dann ausgef\u00fchrt hat.</p> L\u00f6sung <pre><code>from csv import reader, writer\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __eq__(self, other):\n        return isinstance(other, Person) and self.name == other.name and self.age == other.age\n\n    def __str__(self):\n        return f\"Person: {self.name}, {self.age}\"\n\n    @classmethod\n    def create_persons_from_csv(cls, file_path, csv_filter=None):\n        result = list()\n        with open(file_path) as csv_file:\n            for zeile in reader(csv_file):\n                name, age = zeile\n                age = int(age)\n                if csv_filter is None or csv_filter(name, age):\n                    result.append(cls(name, age))\n\n        return result\n\n    def save_to_csv(self, file_path, mode=\"a\"):\n        with open(file_path, mode, newline=\"\") as csv_file:\n            writer(csv_file).writerow([self.name, self.age])\n\n# Beispielnutzung:\ndef no_underaged(name, age):\n    return age &gt;= 18\n\ncsv_file_path = \"persons.csv\"\npersons = Person.create_persons_from_csv(csv_file_path, no_underaged)\n\nfor person in persons:\n    print(person)\n</code></pre> <p>Diese L\u00f6sung erweitert die <code>create_persons_from_csv</code>-Methode um den optionalen <code>csv_filter</code>-Parameter. Wenn ein Filter \u00fcbergeben wird, wird er auf jede Zeile der CSV-Datei angewendet. Nur wenn der Filter <code>True</code> zur\u00fcckgibt (oder wenn kein Filter gesetzt ist), wird eine neue <code>Person</code>-Instanz erstellt und zur Ergebnisliste hinzugef\u00fcgt.</p> <p>Beachten Sie, dass das Alter zu einem Integer konvertiert wird, bevor es an den Filter \u00fcbergeben oder zur Erstellung einer <code>Person</code>-Instanz verwendet wird. Dies stellt sicher, dass der Vergleich im <code>no_underaged</code>-Filter korrekt funktioniert.</p>"},{"location":"content/functions/functions/","title":"Funktionen definieren","text":"Video <p>Bisher sind alle unsere Codebeispiel so geschrieben, dass dieser einmalig ausgef\u00fchrt  wird und dann nicht mehr gebraucht wird. Das ist normalerweise nicht der Fall. Normalerweise werden Codeabschnitte immer wieder und in verschiedenen Kontexten aufgerufen. Zum Beispiel wollen wir Code bereitstellen, um den BMI einer Person zu berechnen. Den Code m\u00f6chte man einerseits f\u00fcr beliebige Personen ausf\u00fchren und andererseits an verschiedenen Stellen (z.B. bei verschiedenen Anzeigen in einer App).</p> <p>Die wichtigste M\u00f6glichkeit zur Strukturierung des Codes sind Funktionen bzw. Methoden.</p> <p>In Python ist eine Funktion eine selbstst\u00e4ndige, wiederverwendbare Codeeinheit, die dazu dient, eine bestimmte Aufgabe zu erledigen. Funktionen k\u00f6nnen Parameter akzeptieren,  Operationen durchf\u00fchren und einen k\u00f6nnen R\u00fcckgabewert liefern.</p> <p>Beliebte Metaphern, um sie Funktionen vorzustellen sind:</p> <ul> <li>Eine Funktion, ist eine Maschine, in die wir Argumente stopfen, damit sie diese verarbeitet und uns Ergebnisse liefert.</li> <li>Eine Funktion ist wie ein Rezept. Es erwartet bestimmte Zutaten und wenn wir der Anleitung folgen, erhalten wir eine raffinierte Mahlzeit.</li> </ul> <pre><code>graph TD;\n    A([Parameter]) --&gt; B[Funktion] --&gt; C([R\u00fcckgabewert])\n    A1([Zutaten]) --&gt; B1[Rezept] --&gt; C1([Mahlzeit])\n    A2([Rohstoffe]) --&gt; B2[Maschine] --&gt; C2([Produkt])</code></pre> Ein alter Schuh <p>Wir haben bereits an vielen Stellen Funktionen genutzt, die in Python eingebaut sind. Welche sind das?</p> Tipp <ul> <li>Wie wurden Inhalte auf der Konsole ausgegeben?</li> <li>Wie konnten Nutzereingaben vorgenommen werden?</li> </ul> L\u00f6sung <p>Wir haben bereits die in Python eingebauten Funktionen <code>print()</code> und <code>input()</code> genutzt. Auch <code>int()</code> und <code>float()</code> sind Funktionen.</p> <p>Im folgenden Code wird unsere erste eigene Funktion <code>hoch()</code> definiert und diese dann drei mal aufgerufen wird:</p> <pre><code>def hoch(): # (1)!\n    print(\"Er lebe...\") # (2)!\n    print(\"HOCH!\")\n\nhoch() # (3)!\nhoch() # (4)!\nhoch() # (5)!\n</code></pre> <ol> <li>Die Funktion wird it dem Schl\u00fcsselwort <code>def</code> definiert. Wir geben ihr den Namen <code>hoch</code>. Da sie keine Parameter hat schreiben wir hier einfach runde Klammern <code>()</code> und danach einen <code>:</code> (so wie beim <code>if</code>).Diese Erste Zeile einer Funktion wird Funktionskopf genannt.</li> <li>Die nun einger\u00fcckten Zeilen sind der Funktionsrumpf oder Funktionsk\u00f6rper. Diese werden nur durchgef\u00fchrt, wenn die Funktion aufgerufen wird.</li> <li>Wir f\u00fchren in dieser Zeile die Funktion aus. Dazu schreiben wir den Funktionsnamen auf, gefolgt von runden Klammern.</li> <li>Wir f\u00fchren die Funktion erneut aus...</li> <li>Und noch ein drittes mal\ud83e\udd73</li> </ol> <p>Code im Debugger</p> <p> </p> Seid gegr\u00fc\u00dft! <p>Gegeben sei der folgende Code. Beschreiben Sie, auf der Konsole erscheint, wenn dieser durchgef\u00fchrt wird:</p> <pre><code>def gru\u00df_nord():\n    print('Moin')\n\ndef gru\u00df_s\u00fcd():\n    print('Gr\u00fc\u00df Gott')\n\ngru\u00df_nord()\ngru\u00df_s\u00fcd()\ngru\u00df_s\u00fcd()\ngru\u00df_nord()\n</code></pre> <p>Wie m\u00fcsste man den Code anpassen, damit alle norddeutschen Gr\u00fc\u00dfe <code>Moin moin!</code> sind? </p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Auf der Konsole erscheint: <pre><code>Moin\nGr\u00fc\u00df Gott\nGr\u00fc\u00df Gott\nMoin\n</code></pre></p> <p>Zeile 2 muss wie folgt ge\u00e4ndert werden, f\u00fcr einen ver\u00e4nderten Gru\u00df:</p> <pre><code>def gru\u00df_nord():\n    print('Moin moin!')\n</code></pre> Eigene Funktion schreiben <p>Erstellen Sie eine Funktion <code>countdown</code>, die auf der Konsole die Zahlen von <code>10</code> bis <code>0</code> ausgibt.</p> <p>Bonus \ud83d\ude80 Verwenden Sie eine <code>while</code>-Schleife in ihrer implementierung.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def countdown():\n    print(10)\n    print(9)\n    print(8)\n    print(7)\n    print(6)\n    print(5)\n    print(4)\n    print(3)\n    print(2)\n    print(1)\n    print(0)\n\ncountdown()\n</code></pre> <p>L\u00f6sung mit <code>while</code>:</p> <pre><code>def countdown():\n    counter = 10\n    while counter &gt; -1:\n        print(counter)\n        counter = counter - 1\n\ncountdown()\n</code></pre>"},{"location":"content/functions/functions_with_parameters/","title":"Funktionen mit Parametern","text":"Video <p>\u00dcber Parameter k\u00f6nnen wir daf\u00fcr sorgen, dass Funktionen nicht immer exakt das Gleiche tun, sondern, eben abh\u00e4ngig von  den \u00fcbergebenen Parametern, in ihren Ergebnissen variieren, obwohl die Rechenvorschriften gleich sind.</p> <p>Im Bild gesprochen: Ein Rezept besteht einerseits aus einer Liste von Zubereitungsschritten (Funktionsk\u00f6rper) aber auch aus einer Auflistung der Zutaten (Parameter). Nun kann man zwei verschiedene Kuchen mit demselben Rezept  backen, indem man die Zutaten variiert. So macht es z.B. einen Unterschied welche konkrete Apfelsorte man in einem Apfelkuchen verwendet.</p> <p>Definieren wir Parameter in einer Funktion, so m\u00fcssen wir diese beim Funktionsaufruf mit Klammern angeben:</p> <pre><code>def print_greeting(name, age): # (1)!\n    print(f\"Hallo {name}!\") # (2)!\n    if age &gt; 65: # (3)!\n        print(f\"Geht es?\") # (4)! \n\nprint_greeting(\"J\u00f6rg\", 68) # (5)!\nprint_greeting(\"Kevin\", 20) # (6)!\n</code></pre> <ol> <li>Bei der Funktionsdefinition werden alle Parameter mit <code>,</code> getrennt in die runden Klammern geschrieben.</li> <li>Der erste \u00fcbergebene Parameter wird hier in der Konsolenausgabe verwendet.</li> <li>Der zweite \u00fcbergebene Parameter wird hier in der Bedingung benutzt.</li> <li>Auch diese zwei Mal einger\u00fcckte Zeile geh\u00f6rt noch zum Funktionsrumpf.</li> <li>Die Funktion wird hier aufgerufen. Die Argumente sind <code>J\u00f6rg</code> und <code>68</code>, welche f\u00fcr die Paramter <code>name</code> und <code>age</code> eingesetzt werden.</li> <li>Die Funktion wird hier erneut aufgerufen, aber mit anderen Argumenten. Dies f\u00fchrt zu anderen Konsolenausgaben als bei der ersten Durchf\u00fchrung. </li> </ol> <pre><code>graph TD;\n    P1([\"age\"]) --&gt; F[print_greeting]\n    P2([\"name\"]) --&gt; F</code></pre> <p>Code im Debugger</p> <p> </p> Eigene Funktion mit Parameter schreiben <p>Erstellen Sie eine Funktion <code>countdown_from(n)</code>, die auf der Konsole die Zahlen von <code>n</code> bis <code>0</code> ausgibt.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def countdown_from(n):\n    counter = n\n    while counter &gt;= 0:\n        print(counter)\n        counter = counter - 1\n\ncountdown_from(7)\n</code></pre>"},{"location":"content/functions/functions_with_returns/","title":"R\u00fcckgabewerte","text":"Video <p>Nun ist noch wichtig zu erw\u00e4hnen, dass Funktionen nicht nur verarbeiten, sondern auch ein Ergebnis am Ende ihrer Durchf\u00fchrung zur\u00fcckgeben k\u00f6nnen. Der Wert der zur\u00fcckgegeben werden soll steht in einer Zeile mit einem vorangehenden <code>return</code>.</p> <pre><code>def quadrat(zahl): # (1)!\n    return zahl * zahl # (2)!\n\nx = 4 # (3)!\nq = quadrat(x) # (4)!\n\nprint(f\"{x}\u00b2 = {q}\") # (5)!\n</code></pre> <ol> <li>Beim Funktionskopf sagen wir, dass es einen Paramter gibt. Dass es eine R\u00fcckgabe geben wird, l\u00e4sst sich hier nicht erkennen.</li> <li>Der Parameter <code>zahl</code> wird mit sich selbst multipliziert und das Ergebnis dann zur\u00fcckgegeben, da ein <code>return</code> am anfang der einger\u00fcckten Zeile steht. </li> <li>Wir speichern in der Variablen <code>x</code> das Argument.</li> <li>Wir \u00fcbergeben <code>x</code> an die Funktion und speichern die R\u00fcckgabe in der Variablen <code>q</code>.</li> <li>Wir geben die Ergebnisse fein s\u00e4uberlich auf der Konsole aus.</li> </ol> <pre><code>graph TD;\n    P1([zahl]) --&gt; F[quadrat] --&gt; R([Ergebnis])</code></pre> <p>Code im Debugger</p> <p> </p> Eigene Funktion mit R\u00fcckgabe schreiben <p>Schreibe eine Funktion <code>alle_gleich(a, b, c)</code>, die drei Parameter annimmt und <code>True</code> zur\u00fcckgibt, wenn alle gleich sind und <code>False</code>, wenn nicht.</p> <pre><code>print(alle_gleich(1, 1, 1)) # True\nprint(alle_gleich(3, 1 + 1 + 1, 5 - 2)) # True\nprint(alle_gleich(1, 1, 2)) # False\nprint(alle_gleich(3, 2, 1)) # False\n</code></pre> Tipp <p>Mit <code>a == b</code> k\u00f6nnen wir pr\u00fcfen, ob zwei Elemente gleich sind.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def alle_gleich(a, b, c):\n    return a == b == c\n\nprint(alle_gleich(1, 1, 1)) # True\nprint(alle_gleich(3, 1 + 1 + 1, 5 - 2)) # True\nprint(alle_gleich(1, 1, 2)) # False\nprint(alle_gleich(3, 2, 1)) # False\n</code></pre> Komplexe Funktion lesen <p>Was folgende Programm berechnet einen Preis.</p> <p>Was erscheint hier auf der Konsole, wenn das Programm ausgef\u00fchrt wird?</p> <p>Erkl\u00e4ren Sie, wie sich der Preis berechnet.</p> <pre><code>def berechne_rabbatierten_preis(preis, wochentag, alter):\n    rabatt = 0\n\n    if wochentag == \"Sonntag\" or wochentag == \"Samstag\":\n        rabatt = rabatt + 0.25\n\n    if alter &gt; 65 or alter &lt; 6:\n        rabatt = rabatt + 0.5\n\n    return preis * (1 - rabatt)\n\n\nbasis_preis = 10\nheute = \"Montag\"\nalter_kunde = 70\n\nend_preis = berechne_rabbatierten_preis(basis_preis, heute, alter_kunde)\nprint(end_preis)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Am Wochenende gibt es einen Rabatt von 25% und f\u00fcr Kinder bis einschlie\u00dflich f\u00fcnf Jahren und Erwachsene ab 66 Jahren einen Rabatt zus\u00e4tzlichen Rabatt von 50%.</p> <p>Konsolenausgabe:</p> <pre><code>5.0\n</code></pre> Erstellung eines Einkaufsladens <p>Erstelle ein Programm, welches einen online Einkaufladen in der Konsole abbildet.</p> <ul> <li>Der Einkaufsladen soll mindestens 5 Produkte anbieten (am Besten ein Dictionary)<ul> <li>Preis</li> <li>Name</li> <li>Kategorie</li> <li>Menge</li> <li>Einheit</li> </ul> </li> <li>Der Benutzer soll die M\u00f6glichkeit haben, Produkte in den Warenkorb zu legen (Liste)</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Warenkorb einzusehen</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Warenkorb zu leeren</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Warenkorb zu kaufen</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Einkaufsladen zu verlassen</li> </ul> L\u00f6sung <pre><code>Siehe Live Coding\n</code></pre>"},{"location":"content/git/git/","title":"Einf\u00fchrung in Git: Lokales Arbeiten","text":""},{"location":"content/git/git/#problem","title":"Problem","text":"<p>Stell dir vor, du arbeitest, mit anderen an einem Projekt. Wie arbeitet ihr zusammen?</p> <ul> <li>Kommunikation \u00fcber E-Mail (Dateien als Anh\u00e4nge austauschen).</li> <li>Gemeinsames Laufwerk, auf das alle Projektbeteiligten Zugreifen k\u00f6nnen.</li> <li>Paralleles Arbeiten an einer Datei, die in der Cloud liegt, wie mit Google Docs oder Microsoft Word.</li> </ul> <p></p>"},{"location":"content/git/git/#losung-versionieren-mit-git","title":"L\u00f6sung: Versionieren mit Git!","text":"<p>Git ist ein Versionsverwaltungssystem, um im Team gemeinsam einfach und sicher an Projekten zu arbeiten.</p> <p>Git erm\u00f6glicht:</p> <ul> <li>Speicherung, Einsicht und Wiederherstellung von verschiedenen Projektversionen. </li> <li>Eine beliebige Anzahl von Projektversionen.</li> <li>\u00dcbersicht \u00fcber alle verschiedenen Projektversionen.</li> <li>Die Differenz zwischen zwei Projektversionen ansehen.</li> <li>Verschiedene Projektversionen zu einer zusammenf\u00fchren.</li> <li>Neue Projektversionen basierend auf beliebigen alten Projektversionen zu erstellen.</li> <li>Nachverfolgbarkeit (Wer erstellte welche \u00c4nderung?) mit Begr\u00fcndung.</li> <li>Paralleles Arbeiten.</li> <li>Einzelnes Arbeiten (ungest\u00f6rt).</li> <li>Offline Arbeiten (Unabh\u00e4ngigkeit vom Internet).</li> </ul>"},{"location":"content/git/git/#1-aufbau-von-git","title":"1. Aufbau von Git:","text":"<p>Ein Projekt wird dabei in einem Repository gespeichert. In einem Repository liegen alle Versionen des Projektes vor, die jemals von gespeichert wurden.</p> <p>Eine einzelne Projektversion wird in einem Commit gespeichert. Man kann es sich wie ein Bild vorstellen, dass man vom Projekt zu einem gewissen Zeitpunkt erstellt hat. Man kann dann immer wieder den Zustand vom Projekt auf den im Commit festgehaltenen Zustand wieder herstellen. (Man stellt also den Zustand auf dem Bild wieder her.)</p> <p>Der Working Tree ist die Version deines Projektes, die im Moment auf deinem Computer verf\u00fcgbar ist und betrachtet und bearbeitet werden kann.</p> <p>Der Index/Staging Area ist eine Datei von git, in der hinterlegt ist, welche Inhalte beim Erstellen eines neuen Commits tats\u00e4chlich gespeichert werden sollen. Bei git m\u00fcssen n\u00e4mlich alle \u00c4nderungen, die du in einem Projekt vornimmt auch in einer neuen Projektversion (Commit) gespeichert werden. Es ist n\u00e4mlich m\u00f6glich auch nur bestimmte \u00c4nderungen auszuw\u00e4hlen, indem man nur diese der Staging Area hinzuf\u00fcgt. Dann werden auch nur diese  \u00c4nderungen im neuen Commit gespeichert.</p> <p>Ein Branch ist ein Zeiger auf eine Projektversion. Dieser ist n\u00fctzlich, um bei den vielen Projektversionen die \u00dcbersicht zu behalten, was die aktuellsten Projektversionen sind. Mehr dazu sp\u00e4ter</p> Metaphorisch gesprochen <p>In dem Text unten tauchen die folgenden Objekte auf:</p> <ul> <li>B\u00fccherregal</li> <li>Erster Tisch</li> <li>Zweiter Tisch mit Kamera</li> <li>Foto vom zweiten Tisch</li> <li>Zettel auf aktuellem Foto</li> </ul> <p>Diese symbolisieren eines der folgenden Dinge aus dem git-Universium. Welches Objekt geh\u00f6rt zu welchem?</p> <ul> <li>Repository</li> <li>Index/Staging Area</li> <li>Branch</li> <li>Commit</li> <li> <p>Working Tree</p> <p>   Man stelle sich ein leeres B\u00fccherregal vor. <p>Auf dem Tisch arbeiten wir an einem Projekt (z.B. einer Motion Cutout Animation).   Auf diesem Tisch befindet sich unsere aktuelle Projektversion.</p> <p>Es gibt einen zweiten Tisch. \u00dcber diesen Tisch schwebt eine Kamera.   Auf diesem zweiten Tisch k\u00f6nnen wir eine alles, was auf dem ersten Tisch   liegt, mit einem magischen Knopf her\u00fcber kopieren. Wir k\u00f6nnen aber auch sagen,   dass nur bestimmte Dinge auf den zweiten Tisch mit der Kamera kopiert werden.   Alles, was wir mit dem magischen Knopf auf den zweiten Tisch gepackt haben,   erscheint \u00fcbrigens auch im B\u00fccherregal und ordnet sich da sch\u00f6n ein.</p> <p>Wir k\u00f6nnen jederzeit ein Foto vom zweiten Tisch machen. Dieses Foto k\u00f6nnen wir   ins Regal legen. Das Projekt ist nun in einer neuen Version gesichert.   Solange dieser Schrank existiert, ist sie f\u00fcr immer sicher.</p> <p>Wir k\u00f6nnen nun jederzeit unseren Tisch wieder auf den im Bild gespeicherten Zustand bringen.</p> <p>Auf dem aktuellsten Foto kleben wir einen Zettel, damit wir es sp\u00e4ter besser wiederfinden.   </p> L\u00f6sung Metapher git B\u00fccherregal Repository Erster Tisch Working Tree Zweiter Tisch mit Kamera Index / Staging Area Foto vom zweiten Tisch Commit Zettel auf aktuellem Foto Branch"},{"location":"content/git/git/#11-installation-von-git","title":"1.1 Installation von GIT","text":"<p>Wir k\u00f6nnen Git auf den g\u00e4ngigsten Betriebssystemen wie Windows, Mac und Linux installieren. Tats\u00e4chlich ist Git auf den meisten Mac- und Linux-Rechnern standardm\u00e4\u00dfig installiert.</p> <p>Falls git bei dir nicht installiert ist, folge dieser Anleitung.</p> <p>Um zu sehen, ob Git bereits installiert ist, \u00f6ffnen wir ein Terminal und f\u00fchren Folgendes aus:</p> <p><pre><code>$ git version\ngit version 2.24.3 (Apple Git-128)\n</code></pre> Dar\u00fcber hinaus verf\u00fcgt Git \u00fcber integrierte GUI-Tools zum Festschreiben (git-gui) und Durchsuchen (gitk). Es gibt auch zahlreiche Tools oder IDE-Plugins von Drittanbietern, die das Arbeiten vereinfachen. Wir lernen es in diesem Kurs aber von Grund auf mit der Konsole zu bedienen.</p>"},{"location":"content/git/git/#2-die-konfiguration-von-git","title":"2. Die Konfiguration von GIT","text":"<p>Sobald wir Git installiert haben, k\u00f6nnen wir es einfach mit dem Befehl <code>git config</code> konfigurieren.</p> <p><pre><code>$ git config --global user.name \"Qualidy User\"\n</code></pre> Mit diesem Befehl legen wir den Nutzernamen fest, der bei allen Commits, die wir Erstellen als Autor hinterlegt werden soll. Die Option <code>--global</code> legt fest, dass diese Option f\u00fcr alle Repositories des aktuellen Nutzers des Betriebssystems gilt.</p> <p>Um die Liste der wirksamen Optionen auszugeben, tippen wir:</p> <pre><code>$ git config -l\nuser.name=Qualidy User\n</code></pre> Nutzer korrekt einstellen <p>Starte git und stelle sicher, dass der richtige Nutzername und E-Mail eingestellt ist.</p> <p>Hinweis: Verwende den Befehl <code>git config</code> mit der Option <code>--global</code>, um die Einstellungen f\u00fcr alle Repositories des aktuellen Nutzers festzulegen.</p> Tipp <p>Denke daran, sowohl den Nutzernamen als auch die E-Mail-Adresse zu konfigurieren.</p> L\u00f6sung <p>Um den Nutzernamen und die E-Mail-Adresse korrekt einzustellen, verwende die folgenden Befehle:</p> <pre><code>git config --global user.name \"Paul Kenntner\"\ngit config --global user.email \"paul@co-dex.de\"\n</code></pre> <p>Diese Befehle setzen den Nutzernamen auf \"Paul Kenntner\" und die E-Mail-Adresse auf \"paul@co-dex.de\" f\u00fcr alle Git-Repositories des aktuellen Benutzers.</p> <p>Um zu \u00fcberpr\u00fcfen, ob die Einstellungen korrekt vorgenommen wurden, kannst du folgenden Befehl ausf\u00fchren:</p> <pre><code>git config --global --list | grep user\n</code></pre> <p>Dies sollte die eingestellten Werte f\u00fcr user.name und user.email anzeigen.</p>"},{"location":"content/git/git/#21-lokales-repository-erstellen","title":"2.1 Lokales Repository erstellen","text":"<p>Um ein neues Repository zu initialisieren, m\u00fcssen wir den Befehl git init verwenden.  Es verwandelt das aktuelle Verzeichnis in ein Git-Repository und git beginnt mit der Verfolgung seines Inhalts:</p> <p>Neuen Ordner erstellen:  <pre><code>$ mkdir simple-repo\n</code></pre></p> <p>In den neuen Ordner wechseln (<code>cd</code> steht f\u00fcr \"change directory\"): <pre><code>$ cd simple-repo\n</code></pre></p> <p>Repository erstellen: <pre><code>$ git init\nInitialized empty Git repository in /simple-repo/.git/\n</code></pre></p> <p>Git erstellt darin auch ein verstecktes Verzeichnis namens <code>.git</code>. In diesem Verzeichnis werden  alle Objekte und Referenzen gespeichert, die Git im Rahmen unseres Projektverlaufs erstellt und verwendet. </p> <p>Im Moment ist dieses Repository noch leer.</p>"},{"location":"content/git/git/#3-dateien-erstellen-und-zum-speichern-markieren","title":"3. Dateien erstellen und zum speichern markieren","text":"<p>Wir k\u00f6nnen nun Dateien im Ordner <code>simple-repo</code> erstellen. Erstellen wir z.B. die Datei <code>main.py</code>:</p> <pre><code># my first python program\nprint(\"Hallo Welt\")\n</code></pre> <p>Wir k\u00f6nnen nun mit dem Befehl <code>git status</code> sehen, dass git registiert, dass eine neue Datei im Ordner ist, diese Aber noch nicht versioniert wird:</p> <pre><code>$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        main.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Wir k\u00f6nnen nun sagen, dass wir die Datei in die n\u00e4chste Version mit aufnehmen wollen, indem wir  es mit dem Befehl <code>git add main.py</code> dem Index hinzuf\u00fcgen. Wenn wir hier keine R\u00fcckmeldung erhalten ist alles gut gelaufen.</p> <p>Wenn wir dann erneut den Status erfragen, sehen wir nun, dass die Datei dem Index hinzugef\u00fcgt wurde:</p> <pre><code>$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   main.py\n</code></pre>"},{"location":"content/git/git/#31-ersten-commit-erstellen","title":"3.1 Ersten Commit erstellen","text":"<p>Wir k\u00f6nnen nun eine Versions unseres Projektes speichern, indem wir einen Commit erstellen mit dem Befehl <code>git commit</code>. Wenn wir das tun, landen wir im VIM Editor. Keine Panik\ud83e\uddd8\u200d\u2640\ufe0f\ud83e\uddd8\u200d\u2642\ufe0f</p> <p></p> <p>VIM ist ein ausgefeilter Texteditor, der in der Konsole benutzt werden kann. Wir sind dazu aufgerufen hier die Commit-Message zu notieren. Das ist eine Nachricht, die beschreiben soll, was in dieser Projektversion neues passiert ist, im Vergleich zu der bisher genutzten Projektversion.</p> <p>F\u00fcr uns gibt es bei Vim nur drei wichtige Befehle:</p> <ul> <li>Dr\u00fccke <code>i</code>, um in den Insert-Modus zu kommen. Das erkennst du daran, dass ganz unten <code>-- INSERT --</code> erscheint. Du kannst jetzt im Text schreiben und mit den Pfeiltasten navigieren. Schreibe nun in die erste Zeile deine Commit-Message</li> </ul> <p></p> <ul> <li> <p>Um den Insert-Modus zu verlassen d\u00fcrcke <code>ESC</code>. Jetzt kannst du den Text nicht mehr bearbeiten.</p> </li> <li> <p>Gebe nun <code>:x</code> ein, um zu speichern und den Editor zu schlie\u00dfen. </p> </li> </ul> <p></p> <p>Wir haben nun den commit erfolgreich erstellt und k\u00f6nnen diesen mit dem Befehl <code>git log</code> untersuchen: <pre><code>$ git log\ncommit f8e4d3fc8111a78da61a0ed28ec420eb9fb5aeb4 (HEAD -&gt; master)\nAuthor: Viktor Reichert &lt;viktor.reichert@qualidy.de&gt;\nDate:   Sat Feb 24 13:04:13 2024 +0100\n\n    main.py hinzugef\u00fcgt\n</code></pre></p> <p>Wir haben nun unsere erste Projektversion erstellt. Wir k\u00f6nnen diesen Zustand des Projektes zuk\u00fcnftig jederzeit wiederherstellen.</p>"},{"location":"content/git/git/#32-weitere-commits-erstellen","title":"3.2 Weitere Commits erstellen.","text":"<p>Wir k\u00f6nnen nun weitere Projektversionen erstellen. Dazu f\u00fcgen wir neue Dateien hinzu oder \u00e4ndern bestehende. Immer wenn wir das tun, k\u00f6nnen wir mit <code>git status</code> sehen, welche \u00c4nderungen nur im Working-Tree vorliegen und welche wir mit <code>git add</code> bereits dem Index hinzugef\u00fcgt wurden und so in der n\u00e4chsten Projektversion (dem n\u00e4chsten Commit) dauerhaft persistiert werden.</p> <p>Wir k\u00f6nnen z.B. eine neue Datei <code>my_calculator.py</code> erstellen:</p> <pre><code>def multiply_all(my_list):\n    product = 1\n    for faktor in my_list:\n        product *= faktor\n    return product\n</code></pre> <p>Wir k\u00f6nnen z.B. die Datei <code>main.py</code> erweitern:</p> <pre><code># my first python program\nfrom my_calculator import multiply_all \n\nprint(\"Hallo Welt\")\nprint(multiply_all([2,4,5]))\n</code></pre> <p>Mit <code>git status</code> wird uns nun gesagt, dass die neue Datei noch nicht versioniert wird und die zweite Datei  Modifizierungen aufweist, die noch nicht versioniert werden:</p> <pre><code>$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   main.py\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        my_calculator.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Wir k\u00f6nnen nun die \u00c4nderungen einzeln dem Index hinzuf\u00fcgen, indem wir <code>git add main.py</code> und <code>git add my_calculator.py</code> ausf\u00fchren, oder wir lassen alles auf ein Mal mit dem Befehl <code>git add .</code> hinzuf\u00fcgen. Wir sehen dann mit <code>git status</code>, dass die Datein dem Index hinzugef\u00fcgt wurden:</p> <pre><code>$ git add .\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   main.py\n        new file:   my_calculator.py\n</code></pre> <p>Wir k\u00f6nnen nun einen Commit erstellen. Um etwas schneller zu sein und nicht wieder in VIM zu landen, k\u00f6nnen wir beim Befehlsaufruf direkt die Commit-Message mit angeben, indem wir das Flag <code>-m</code> mit einer Commit-Message hinzuf\u00fcgen. Etwa so:</p> <pre><code>$ git commit -m \"added my_calculator with multiply_all method\"\n[master 58ea6a4] added my_calculator with multiply_all method\n 2 files changed, 8 insertions(+)\n create mode 100644 my_calculator.py\n</code></pre> <p>Wir sehen nun, dass im <code>git log</code> zwei Commit auftauchen: <pre><code>$ git log\ncommit 58ea6a40de9de9370a47032e3637eaa77273448b (HEAD -&gt; master)\nAuthor: Viktor Reichert &lt;viktor.reichert@qualidy.de&gt;\nDate:   Sat Feb 24 13:26:47 2024 +0100\n\n    added my_calculator with multiply_all method\n\ncommit f8e4d3fc8111a78da61a0ed28ec420eb9fb5aeb4\nAuthor: Viktor Reichert &lt;viktor.reichert@qualidy.de&gt;\nDate:   Sat Feb 24 13:04:13 2024 +0100\n\n    main.py hinzugef\u00fcgt\n</code></pre></p> <p>Mit dem Befehl <code>git log --all --oneline --graph</code> kannst du alle Commits in Kurzform sehen, die in diesem Projekt erstellt wurden. In dieser Ansicht kannst du mit den Pfeiltasten nach oben und unten navigieren und sie mit der Taste <code>q</code> verlassen.</p> <pre><code>$ git log --all --oneline --graph\n* 58ea6a4 (HEAD -&gt; master) added my_calculator with multiply_all method\n* f8e4d3f main.py hinzugef\u00fcgt\n</code></pre> <p>Der Zeiger <code>HEAD</code> zeigt uns \u00fcbrigens an, welche Projektversion wir derzeit als Ausgangspunkt unserer Arbeit betrachten.</p>"},{"location":"content/git/git/#4-zwischen-projektversionencommits-wechseln","title":"4. Zwischen Projektversionen/Commits wechseln","text":"<p>Um von einer Projektversion zur anderen zu wechseln, nutzen wir die Befehle <code>git switch</code> oder <code>git checkout</code>.</p> <p>Man gibt dann den Hash des Commits an oder einen Tag oder Branch, der auf den Commit zeigt.</p> <p>Der Hash eines Commits kann mit dem Befehl <code>git log</code> ermittelt werden und ist die lange Hexadezimalzahl in der ersten Zeile. In unserem Beispiel  w\u00e4ren das <code>58ea6a40d...</code> und <code>f8e4d3fc...</code>. Bei <code>git log --graph --oneline --all</code> sehen wir nur den Anfang von diesem Hash. Die ersten vier Zeichen eines Hash gen\u00fcgen normalerweise.</p> <p>Ein Tag ist eine dauerhafte Referenz auf einen Commit, der verwendet wird, um z.B. Releaseversionen zu kennzeichnen. Hier verwenden wir diese noch nicht.</p> <p>Ein Branch ist auch eine Referenz auf einen Tag, jedoch kann diese im Laufe der Zeit verschiedene Commits referenzieren. Der einzige Branch, den wir hier bisher vorliegen haben ist <code>master</code>.</p> <p>Wenn wir also auf den ersten Commit wecheln, k\u00f6nnen wir <code>git checkout f8e4</code> verwenden. Wir sehen dann, dass wir eine Warnung erhalten, dass wir im \"'detached HEAD' state\" sind, aber das ist erstmal nicht so schlimm. Wir sehen n\u00e4mlich auch, dass wir den alten Projektzustand mit nur einer Datei wiederhergestellt haben.</p> <p></p> <p>Wenn wir dann zum aktuellen Projektstand zur\u00fcckwechseln wollen, dann k\u00f6nnen wir das  \u00fcber den Befehl <code>git checkout master</code>. Dann haben wir wieder beide Dateien.</p> <p></p> Fremdes Repository untersuchen <p>Lade diesen Ordner herunter. Er enth\u00e4lt ein Git-Repository. Untersuche es mit Hilfe des Befehls:</p> <pre><code>git log --all [--oneline] --graph\n</code></pre> <p>Beantworte folgende Fragen:</p> <ul> <li>Wie viele Commits gibt es?</li> <li>Wie viele Branches gibt es?</li> <li>Wie viele Tags gibt es?</li> </ul> Tipp <p>Denk daran, dass du das Repository zuerst entpacken und in das Verzeichnis wechseln musst, bevor du Git-Befehle ausf\u00fchren kannst.</p> L\u00f6sung <p>Um die Informationen zu erhalten, f\u00fchre folgende Schritte aus:</p> <ol> <li>Entpacke die ZIP-Datei</li> <li>\u00d6ffne ein Terminal und navigiere in das entpackte Verzeichnis</li> <li>F\u00fchre den Befehl <code>git log --all --oneline --graph</code> aus</li> <li>Analysiere die Ausgabe:</li> <li>Jede Zeile, die mit einem * beginnt, repr\u00e4sentiert einen Commit</li> <li>Branches werden in Klammern angezeigt, z.B. (HEAD -&gt; master)</li> <li>Tags werden ebenfalls in Klammern angezeigt, z.B. (tag: v1.0)</li> </ol> <p>Diese Aufgabe hilft dir, die Struktur und Geschichte eines Git-Repositories zu verstehen und wichtige Git-Befehle zur Analyse zu \u00fcben.</p> Zwischen Projektversionen wechseln <p>Verwende das Repository aus der vorherigen Aufgabe (Bewerbung.zip).</p> <ol> <li>Wechsle zwischen verschiedenen Projektversionen mit <code>git checkout</code> oder <code>git switch</code>.</li> <li>Springe zu mindestens einem Commit \u00fcber den Hash, zu einem Tag und zu einem Branch.</li> <li>Untersuche die Unterschiede zwischen den Projektversionen.</li> </ol> <p>Beantworte folgende Fragen:</p> <ul> <li>Welche Unterschiede kannst du zwischen den verschiedenen Projektversionen erkennen?</li> <li>Inwiefern sind die Commit-Messages hilfreich, um zu verstehen, was in den jeweiligen Commits passiert ist?</li> <li>Welche Methode (Hash, Tag, Branch) findest du am einfachsten zu verwenden und warum?</li> </ul> L\u00f6sung <ol> <li> <p>Unterschiede zwischen Projektversionen:</p> <ul> <li>\u00c4nderungen im Inhalt von Dateien</li> <li>Hinzugef\u00fcgte oder gel\u00f6schte Dateien</li> <li>Strukturelle \u00c4nderungen (z.B. Verschieben von Dateien)</li> </ul> </li> <li> <p>N\u00fctzlichkeit der Commit-Messages:</p> <ul> <li>Gute Commit-Messages sollten kurz und pr\u00e4gnant beschreiben, was ge\u00e4ndert wurde</li> <li>Sie helfen, den Zweck und Kontext der \u00c4nderungen zu verstehen</li> <li>Qualit\u00e4t der Messages kann variieren (einige k\u00f6nnten informativer sein als andere)</li> </ul> </li> <li> <p>Methoden zum Wechseln zwischen Versionen:</p> <ul> <li>Hash: Pr\u00e4zise, aber schwer zu merken</li> <li>Tag: Einfach f\u00fcr wichtige Meilensteine oder Releases</li> <li>Branch: Praktisch f\u00fcr aktive Entwicklungslinien</li> </ul> </li> </ol> <pre><code>gitGraph\n    commit id: \"0f3c214\"\n    commit id: \"0fb8d7\"\n    branch zeugnisse\n    checkout zeugnisse\n    commit id: \"03ddaff\"\n    commit id: \"a5a60d4\"\n    checkout main\n    merge zeugnisse id: \"1842726\"</code></pre> Hilfe zur Selbsthilfe <p>Untersuche, was der Befehl <code>git help</code> tut.</p> <p>Was passiert, wenn du die folgenden Befehle ausf\u00fchrst: <pre><code>$ git --help init\n$ git help init\n$ git init --help\n$ git help -g\n</code></pre></p> <p>Erkl\u00e4re, was die Bedeutung der verschiedenen Klammern bei Anzeigen von <code>git help</code> bedeuten. Welche Bedeutung haben</p> <ul> <li>die spitzen Klammern <code>&lt;...&gt;</code>?</li> <li>die eckigen Klammern <code>[..]</code>?</li> <li>die eckigen Klammern mit Pipes <code>[..|..|..]</code>?</li> <li>die runden Klammern mit Pipes <code>(..|..)</code>?</li> <li>Warum wird der untersuchte Befehl mehrfach bei \"usage\" aufgef\u00fchrt?</li> </ul> L\u00f6sung <p>Der Befehl <code>git help</code> zeigt eine \u00dcbersicht der Git-Befehle und deren Verwendung an.</p> <p>Die ersten drei Befehle (<code>git --help init</code>, <code>git help init</code>, <code>git init --help</code>) rufen alle die Hilfe f\u00fcr den Befehl <code>init</code> auf und zeigen detaillierte Informationen zu diesem Befehl an.</p> <p><code>git help -g</code> zeigt eine Liste der verf\u00fcgbaren Git-Anleitungen an.</p> <p>Bedeutung der Klammern in der Git-Hilfe:</p> <ul> <li>Spitze Klammern <code>&lt;...&gt;</code>: Platzhalter f\u00fcr erforderliche Inhalte, wie Branchnamen oder Dateipfade.</li> <li>Eckige Klammern <code>[..]</code>: Optionale Parameter, die verwendet werden k\u00f6nnen, aber nicht m\u00fcssen.</li> <li>Eckige Klammern mit Pipes <code>[..|..|..]</code>: Optionale Parameter, von denen nur einer gew\u00e4hlt werden kann.</li> <li>Runde Klammern mit Pipes <code>(..|..)</code>: Parameter, von denen einer gew\u00e4hlt werden muss.</li> </ul> <p>Der untersuchte Befehl wird mehrfach bei \"usage\" aufgef\u00fchrt, weil sich nur so in dieser Syntax alle m\u00f6glichen Aufrufm\u00f6glichkeiten und Kombinationen von Optionen darstellen lassen.</p>"},{"location":"content/git/git/#5-was-speichert-git","title":"5. Was speichert GIT?","text":"<p>Wenn du ein Repository anlegst, wird ein versteckter Ordner <code>.git</code> angelegt. In diesem Ordner befindet sich das Repository. Normalerweise fasst man diesen Ordner niemals an, aber um git zu erlernen, ist es sch\u00f6n zu sehen, wo was gespeichert wird.</p> <p>Alle Projektdateien und Ordner, die git speichert, findet man im Ordner <code>.git/objects</code>. Es gibt vier Arten von Objekten in git:</p> <ul> <li>Blobs (Dateien mit Inhalt)</li> <li>Trees (Bildet Ordnerstrukturen ab. Hat Referenzen zu Blobs und Trees)</li> <li>Commits (Wird bei einem Commit erstellt, hat verschiedene Metainfos und Referenz zu einem Tree)</li> <li>Annotatet Tags (Referenziert eine dauerhaft einen Commit)</li> </ul> <p>Die Dateien sind in gehashter Form gespeichert. </p> Untersuche die Git-Objekte <p>Mit dem Befehl <code>git cat-file -p &lt;hash&gt;</code> und <code>git show &lt;hash&gt;</code> k\u00f6nnen die Inhalte der Dateien im Ordner <code>.git/objects</code> angezeigt werden. Untersuche das Repository von oben. Erstelle ein Bild, das zeigt, wie die Dateien voneinander abh\u00e4ngen.</p> L\u00f6sung <pre><code>flowchart TD\n  C0[\"0f3c214&lt;br&gt;Commit\"] --&gt;\n  T0[\"5ef8d03&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt;\n  B0[\"168730b&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Alter: 33 Jahre&lt;br&gt;Beruf: Boss&lt;br&gt;&lt;br&gt;Vorheriger Arbeitgeber: Geheim\"] \n\n  C1[\"0fb8da7&lt;br&gt;Commit\"] --&gt; C0\n  C1 --&gt;\n  T1[\"012b7e8&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt; B0\n  T1 --Bewerbungsschreiben.txt--&gt;\n  B1[\"7e65d0f&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Sehr geeehrte Damen und Herren,&lt;br&gt;&lt;br&gt;warum ich der richtige f\u00fcr euch bin? Hier sind meine 3 besten Gr\u00fcnde:&lt;br&gt;&lt;br&gt;1. Ich bin der sch\u00f6nste&lt;br&gt;2. Ich bin der kl\u00fcgste&lt;br&gt;3. Ich bin, ehrlich gesagt, auch der dem\u00fctigste.\"]\n\n  C2[\"03ddaff&lt;br&gt;Commit\"] --&gt; C0\n  C2 --&gt;\n  T2[\"09cc0f2&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt; B0\n  T2 --Zeugnis.txt--&gt;\n  B2[\"641eef5&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Mathe: 1&lt;br&gt;Bio: 1&lt;br&gt;Latein: 5&lt;br&gt;Beauty: 1+&lt;br&gt;HSU: 2\"]\n\n  C3[\"a5a60d4&lt;br&gt;Commit\"] --&gt; C2\n  C3 --&gt;\n  T3[\"c8ba3ee&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt; B0\n  T3 --Zeugnis.txt--&gt;\n  B3[\"32f54f8&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Mathe: 1&lt;br&gt;Bio: 1&lt;br&gt;Latein: 5&lt;br&gt;Beauty: 1+&lt;br&gt;HSU: 2&lt;br&gt;&lt;br&gt;&lt;br&gt;F\u00fchrerschein Klasse A und B\"]\n\n\n  C4[\"1842726&lt;br/&gt;Commit\"] --&gt; C3\n  C4 --&gt; C1\n  C4 --&gt;\n  T4[\"d276800&lt;br/&gt;Tree\"] --Bewerbungsschreiben.txt--&gt; B1\n  T4 --Lebenslauf.txt--&gt; B0\n  T4 --Zeugnis.txt--&gt; B3\n\n  subgraph Commits\n  C0\n  C1\n  C2\n  C3\n  C4\n  end\n\n  subgraph Trees\n  T0\n  T1\n  T2\n  T3\n  T4\n  end\n\n  subgraph Blobs\n  B0\n  B1\n  B2\n  B3\n  end\n\n  subgraph Tags\n  Tag1[\"c96c504&lt;br&gt;Tag&lt;br&gt;Anfang\"] --&gt; C0\n  end</code></pre>"},{"location":"content/git/git/#6-git-clone-kopiere-ein-externes-repository","title":"6. git clone \u2013 Kopiere ein externes Repository","text":"<p>Manchmal existiert bereits ein Projekt und wir m\u00f6chten es auf unseren eigenen Rechner laden (z.B. um mitzuwirken oder es einfach zu benutzen).  Zuerst m\u00fcssen wir das vorhandene Repository lokal herunterladen.</p> <p>Der Befehl <code>git clone</code> kopiert das Repository in ein neues Verzeichnis:</p> <pre><code>$ git clone https://github.com/eugenp/tutorials.git\nCloning into 'repo'...\n</code></pre> <p>Wenn der Vorgang abgeschlossen ist, enth\u00e4lt das neu erstellte Verzeichnis alle Dateien, Commits,  Branches und den Verlauf des Projekts.</p> <p>Dar\u00fcber hinaus ist das geklonte Repository bereits konfiguriert und mit der externen Quelle verbunden:</p> <pre><code>flowchart LR\n    A[(\"\ud83d\udcbb&lt;br/&gt;local&lt;br/&gt;Repository\")]\n    B[(\"\ud83c\udf10&lt;br/&gt;remote&lt;br/&gt;Repository\")]\n    B --\"git clone\"--&gt; A</code></pre> <pre><code>$ cd tutorials\n$ git remote -v\norigin  https://github.com/eugenp/tutorials.git (fetch)\norigin  https://github.com/eugenp/tutorials.git (push)\n</code></pre> <p>Git verwendet diese links, um weitere \u00c4nderungen zu verwalten. Mehr dazu sp\u00e4ter.</p>"},{"location":"content/git/git/#7-git-workflow","title":"7. Git Workflow","text":"<p>Nun k\u00f6nnen wir die ersten \u00c4nderungen vornehmen. Aber bevor wir das tun, schauen wir uns an,  wie Git diese \u00c4nderungen verfolgt.</p> <p>Unser lokales Repository besteht aus drei verschiedenen B\u00e4umen, die von Git verwaltet werden.</p> <p>Das erste ist das Arbeitsverzeichnis, das die aktuelle Version der Dateien enth\u00e4lt.</p> <p>Nachdem wir unsere \u00c4nderungen an den Dateien vorgenommen haben,  k\u00f6nnen wir die Dateien in den Index verschieben, der als Staging-Bereich fungiert.  Wir tun dies mit dem Befehl git add. </p> <p>Schlie\u00dflich k\u00f6nnen wir unsere \u00c4nderungen mit dem Befehl \u201egit commit\u201c anwenden  und im lokalen Repository speichern. Durch das Festschreiben der \u00c4nderungen wird der HEAD  des Repositorys aktualisiert, der immer auf das letzte von uns vorgenommene Festschreiben verweist.</p> <p>Diese drei Schritte werden verwendet, um die lokalen \u00c4nderungen beizubehalten.  Aber wie wir wissen, kann das Repository auch eine externe Quelle enthalten.  Der letzte Schritt besteht darin, beide Repositories zu synchronisieren und unsere \u00c4nderungen zu ver\u00f6ffentlichen.</p>"},{"location":"content/git/git/#8-anderungen-machen","title":"8. \u00c4nderungen machen","text":"<p>Nachdem wir nun wissen, wie das Tracking-System von Git funktioniert,  k\u00f6nnen wir unsere ersten \u00c4nderungen an unserem Repository vornehmen.</p>"},{"location":"content/git/git/#81-git-status-aktuelle-anderungen-anzeigen","title":"8.1 git status \u2013 Aktuelle \u00c4nderungen anzeigen","text":"<p>Erstellen wir eine einfache Datei und f\u00fcgen sie unserem Repository hinzu.  Anschlie\u00dfend f\u00fchren wir den Befehl git status aus und analysieren seine Ausgabe:</p> <pre><code>$ \"Hello World\" &gt;&gt; myfile.txt\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    myfile.txt\n</code></pre> <p>Es wurde nichts zum Festschreiben hinzugef\u00fcgt, aber es sind nicht erfasste Dateien vorhanden  (verwenden Sie \u201egit add\u201c, um sie zu verfolgen)</p> <p>Der Befehl gibt den aktuellen detaillierten Status unserer \u00c4nderungen aus. Der erste Teil zeigt, ob die lokalen und remote-Branches synchronisiert sind.</p> <p>Als n\u00e4chstes zeigt die Ausgabe den Status des Working Trees \u2013 die Liste der aktuell ge\u00e4nderten Dateien mit ihrem Wartungsstatus. Wie wir sehen, befindet sich die Datei myfile.txt derzeit im Arbeitsverzeichnisbereich und wird von Git nicht erfasst.</p>"},{"location":"content/git/git/#82-git-add-verfolgen-sie-die-anderungen","title":"8.2 git add \u2013 Verfolgen Sie die \u00c4nderungen","text":"<p>Um mit der Verfolgung der \u00c4nderungen zu beginnen, m\u00fcssen wir sie mithilfe des Befehls \u201egit add\u201c in den Index verschieben:</p> <pre><code>$ git add myfile.txt\n$ git stage *\n</code></pre> <p>Wir k\u00f6nnen mehrere Dateien gleichzeitig angeben, indem wir sie durch ein Leerzeichen trennen. Wir k\u00f6nnen alle Dateien auch mit dem Sternchen angeben.</p> <p>Alternativ k\u00f6nnen wir auch den Befehl git stage verwenden, der ein Synonym f\u00fcr den Befehl git add ist.</p> <p>Wir \u00fcberpr\u00fcfen den Status:</p> <pre><code>$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    new file:   myfile.txt\n</code></pre> <p>Git hat erfolgreich unsere Dateien zu erfasst.</p>"},{"location":"content/git/git/#83-git-restore-gitignore-verfolgen-sie-die-anderungen","title":"8.3 Git Restore &amp; Gitignore \u2013 Verfolgen Sie die \u00c4nderungen","text":"<p>Git erm\u00f6glicht das Entfernen von Dateien aus dem Index. Wenn wir unsere \u00c4nderungen versehentlich  dorthin verschoben haben und die Nachverfolgung vor\u00fcbergehend deaktivieren m\u00f6chten, verwenden wir Git Restore:</p> <pre><code>$ git restore -S myfile.txt\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    myfile.txt\n</code></pre> <p>Wir haben unsere Datei gerade noch einmal in den Arbeitsbereich verschoben und  sie von weiteren Commits ausgeschlossen, bis wir sie erneut bereitstellen.  Die Flag -S (\u2013staged) weist Git an, nur den Index des Repositorys wiederherzustellen.</p> <p>Wir k\u00f6nnen Dateien auch dauerhaft ausschlie\u00dfen und ihre Nachverfolgung deaktivieren.  Dazu m\u00fcssen wir eine .gitignore-Datei erstellen.  Diese Datei enth\u00e4lt Dateinamenmuster und wird auf alle Dateien im aktuellen Verzeichnis  und seinen untergeordneten Verzeichnissen angewendet. Bei allen weiteren Add-Aktionen werden Dateien  ignoriert, die diesen Mustern entsprechen.</p>"},{"location":"content/git/git/#84-git-commit-speichern-sie-die-anderungen","title":"8.4 git commit \u2013 Speichern Sie die \u00c4nderungen","text":"<p>Machen wir die letzten \u00c4nderungen r\u00fcckg\u00e4ngig und verschieben unsere Datei erneut in den Staging-Bereich:</p> <pre><code>$ git add myfile.txt\n</code></pre> <p>Jetzt ist es an der Zeit einen Commit durchf\u00fchren.</p> <p>Der Commit ist ein Git-Objekt, das wie eine Momentaufnahme unseres Repositorys zu einem bestimmten Zeitpunkt ist.</p> <p>Um \u00c4nderungen zu \u00fcbernehmen, verwenden wir den Befehl \u201egit commit\u201c:</p> <pre><code>$ git commit -m \"My first commit\"\n[master 8451901] My first commit\n 1 file changed, 1 insertion(+)\n create mode 100644 myfile.txt\n</code></pre> <p>Wir haben gerade unseren ersten Commit lokal erstellt.</p> <p>Der Befehl \u201egit commit\u201c enth\u00e4lt viele zus\u00e4tzliche Optionen zum Ausf\u00fchren komplexerer Vorg\u00e4nge, die wir mit dem Befehl \u201egit commit \u2013help\u201c \u00fcberpr\u00fcfen k\u00f6nnen.</p> <p>Am n\u00fctzlichsten ist das Flag -m, das eine Commit-Nachricht angibt,  die die im aktuellen Snapshot vorgenommenen \u00c4nderungen beschreibt.</p> <p>Lassen Sie uns abschlie\u00dfend den Status \u00fcberpr\u00fcfen:</p> <pre><code>$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre> <p>Nun enth\u00e4lt unser Working Tree keine zus\u00e4tzlichen \u00c4nderungen, aber das lokale Repository enth\u00e4lt mehr Commits als seine externe Quelle. Um unsere \u00c4nderungen zu ver\u00f6ffentlichen, sollten wir daher lokale \u00c4nderungen mit dem Ursprung synchronisieren.</p>"},{"location":"content/git/git/#85-git-log-git-show-commits-prufen","title":"8.5 git log &amp; git show \u2013 Commits pr\u00fcfen","text":"<p>Sobald wir den Commit erstellt haben, k\u00f6nnen wir seine Details \u00fcberpr\u00fcfen. Commits enthalten viele zus\u00e4tzliche Metadaten, wie den Autor, den Zeitstempel und mehr.</p> <p>Um die Liste der Commits des aktuellen Branchs auszudrucken, verwenden wir den Befehl git log:</p> <p><pre><code>$ git log\ncommit 845190154ed7a491a6143669c4ce88058fb93f8a (HEAD -&gt; master)\nAuthor: ...\nDate: ...\n\n    My first commit\n\ncommit 9a1e11ec981b41e4b4b9c245a7a96cd6707f4705 (origin/master, origin/HEAD)\n...\n</code></pre> Die Liste zeigt standardm\u00e4\u00dfig den Commit-Verlauf des aktuellen Branchs in umgekehrter chronologischer Reihenfolge an.</p> <p>Jeder Eintrag enth\u00e4lt die allgemeinen Metadaten wie die Commit-ID (eine eindeutige SHA-1-Pr\u00fcfsumme), den Autor, das Datum und die angegebene Nachricht.</p> <p>Wenn wir uns eingehender mit einem einzelnen Commit befassen m\u00f6chten, drucken wir dessen Details mit dem Befehl \u201egit show\u201c, gefolgt von der angeforderten Commit-ID:</p> <pre><code>$ git show 845190154ed7a491a6143669c4ce88058fb93f8a\ncommit 845190154ed7a491a6143669c4ce88058fb93f8a (HEAD -&gt; master)\nAuthor: ...\nDate:...\n\n    My first commit\n\ndiff --git a/myfile.txt b/myfile.txt\nnew file mode 100644\nindex 0000000..557db03\n--- /dev/null\n+++ b/myfile.txt\n@@ -0,0 +1 @@\n+Hello World\n</code></pre> <p>Diesmal zeigt die Ausgabe auch die Unterschiede an, die durch das Commit im Vergleich zum vorherigen Snapshot mit dem Befehl \u201egit diff\u201c entstanden sind.</p>"},{"location":"content/git/git/#86-git-stash-die-anderungen-auf-eis-legen","title":"8.6 git stash \u2013 Die \u00c4nderungen auf Eis legen","text":"<p>Der Befehl \u201egit stash\u201c speichert die von uns vorgenommenen \u00c4nderungen vor\u00fcbergehend und stellt das Arbeitsverzeichnis wieder her, damit es mit dem HEAD-Commit \u00fcbereinstimmt. Dadurch k\u00f6nnen wir schnell den Kontext wechseln und mit der Arbeit an etwas anderem beginnen.</p> <p>Erstellen wir eine weitere Datei und f\u00fcgen sie dem Staging-Bereich hinzu. Danach f\u00fchren wir den Git-Stash aus:</p> <pre><code>$ touch myfile-2.txt; git add *\n$ git stash push\nSaved working directory and index state WIP on master: 8451901 My first commit\n</code></pre> <p>Versuchen wir nun, die Datei aufzulisten:</p> <pre><code>$ ls myfile-2.txt\n\nls: myfile-2.txt: No such file or directory\n</code></pre> <p>Wir k\u00f6nnen sehen, dass die Datei jetzt nicht vorhanden ist. Dies liegt daran, dass alle ausstehenden \u00c4nderungen aus dem Arbeitsverzeichnis entfernt und im Stash gespeichert wurden.</p> <p>Mit der Listenoption k\u00f6nnen wir alle gespeicherten \u00c4nderungen ausdrucken:</p> <pre><code>$ git stash list\nstash@{0}: WIP on master: 8451901 My first commit\n</code></pre> <p>Da wir keine Beschreibung angegeben haben, wird der Stash standardm\u00e4\u00dfig als \u201eWIP am \u2026\u201c aufgef\u00fchrt. Mit dem Flag -m in der Befehlszeile k\u00f6nnen wir den Standardwert in eine aussagekr\u00e4ftigere Nachricht \u00e4ndern.</p> <p>Um die Details zu \u00fcberpr\u00fcfen, verwenden wir die Show-Option:</p> <pre><code>$ git stash show\n myfile-2.txt | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n</code></pre> <p>Die Ausgabe gibt Informationen \u00fcber \u00c4nderungen aus, die im neuesten Stash gespeichert sind.</p> <p>Wenn wir schlie\u00dflich die \u00c4nderungen wiederherstellen m\u00f6chten, verwenden wir die Pop-Option:</p> <pre><code>$ git stash pop\n...\n$ ls myfile-2.txt \nmyfile-2.txt\n</code></pre> <p>Wir haben gerade einen einzelnen Stash-Status aus der Stash-Liste entfernt und ihn \u00fcber den aktuellen Status angewendet.</p>"},{"location":"content/git/git/#9-die-commit-historie-manipulieren","title":"9. Die Commit-Historie manipulieren","text":"<p>Nachdem wir nun gelernt haben, wie man \u00c4nderungen im Repository speichert, \u00e4ndern wir zuvor gespeicherte Commits. In den folgenden Abschnitten werden wir die h\u00e4ufigsten Anwendungsf\u00e4lle behandeln.</p>"},{"location":"content/git/git/#91-git-commit-amend-zusatzliche-anderungen-zum-commit-hinzufugen","title":"9.1 git commit \u2013amend \u2013 Zus\u00e4tzliche \u00c4nderungen zum Commit hinzuf\u00fcgen","text":"<p>Angenommen, wir haben vergessen, beim Festschreiben einer \u00c4nderung eine Datei einzuschlie\u00dfen. Nat\u00fcrlich k\u00f6nnen wir zus\u00e4tzlich zum letzten einen weiteren Commit erstellen, aber das k\u00f6nnte den \u00c4nderungsverlauf un\u00fcbersichtlich machen.</p> <p>In solchen F\u00e4llen m\u00f6chten wir m\u00f6glicherweise, dass Git unseren letzten Commit neu schreibt und die Datei, die wir vergessen haben, mit der Option \u201eAmend\u201c einbindet.</p> <p>Sehen wir uns den letzten Commit an:</p> <pre><code>$ git show --summary\ncommit 845190154ed7a491a6143669c4ce88058fb93f8a (HEAD -&gt; master)\nAuthor: ...\nDate: ...\n\n    My first commit\n\n create mode 100644 myfile.txt\n</code></pre> <p>Nachdem wir unsere Datei \u201emy-file2.txt\u201c aus dem Stash entfernt haben, schreiben wir sie mit der Option \u201eAmend\u201c fest:</p> <pre><code>$ git commit --amend\n[master 0ed9f03] My first commit\n 2 files changed, 1 insertion(+)\n create mode 100644 myfile-2.txt\n create mode 100644 myfile.txt\n</code></pre> <p>Wir sehen, dass Git die Datei zu unserem letzten Commit hinzugef\u00fcgt und die \u00c4nderungen kombiniert hat.</p>"},{"location":"content/git/git/#92-git-rebase-commits-erneut-anwenden","title":"9.2 git rebase \u2013 Commits erneut anwenden","text":"<p>Eine fortgeschrittenere Technik zum \u00c4ndern von Commits ist der Befehl git rebase. Es wendet Commits aus dem Verlauf erneut auf eine andere Basis an, sodass wir sie im laufenden Betrieb \u00e4ndern k\u00f6nnen.</p> <p>Wir erstellen zun\u00e4chst einen weiteren Commit in unserem Repository:</p> <pre><code>$ touch myfile-3.txt\n$ git add *\n$ git commit -m \"My second commit\"\n</code></pre> <p>Jetzt sollten wir zwei einzelne Commits haben \u2013 unseren ersten Commit und unseren zweiten Commit.</p> <p>Beginnen wir mit dem Rebase beider Commits:</p> <pre><code>$ git rebase -i HEAD~2\n</code></pre> <p>Dadurch wird ein Editor ge\u00f6ffnet, in dem wir den Verlauf mithilfe von Befehlen bearbeiten k\u00f6nnen:</p> <pre><code>pick 82d8635 My first commit\npick 6d58108 My second commit\n\n# Rebase 9a1e11e..82d8635 onto 9a1e11e (2 commands)\n#\n# Commands:\n# p, pick &lt;commit&gt; = use commit\n# r, reword &lt;commit&gt; = use commit, but edit the commit message\n# e, edit &lt;commit&gt; = use commit, but stop for amending\n# s, squash &lt;commit&gt; = use commit, but meld into previous commit\n# d, drop &lt;commit&gt; = remove commit \n...\n</code></pre> <p>Oben sehen wir die Liste der Rebasing-Commits, gefolgt vom Manual.  Es ergeben sich hier viele M\u00f6glichkeiten:  Wir k\u00f6nnen die Reihenfolge \u00e4ndern, indem wir die Zeilen vertauschen,  die Commit-Nachricht umformulieren, sie zu einer einzigen zusammenfassen,  einen einzelnen Commit bearbeiten oder sogar l\u00f6schen.  Die Zeilen werden von oben nach unten angewendet.</p>"},{"location":"content/git/git/#93-git-reset-rollback-in-den-spezifischen-zustand","title":"9.3 git reset \u2013 Rollback in den spezifischen Zustand","text":"<p>Manchmal m\u00f6chten wir m\u00f6glicherweise den aktuellen Status l\u00f6schen und zu einem vergangenen Stand zur\u00fcckkehren. Dazu verwenden wir die Git-Reset-Option:</p> <pre><code>$ git reset 82d8635\n</code></pre> <p>Es macht alle Commits nach dem angegebenen Commit r\u00fcckg\u00e4ngig, beh\u00e4lt \u00c4nderungen lokal bei und verschiebt sie in den Staging-Bereich. Wenn wir jedoch alle derzeitigen \u00c4nderungen verwerfen m\u00f6chten, k\u00f6nnen wir das Flag \u2013hard verwenden.</p>"},{"location":"content/git/git/#10-das-repository-mit-dem-remote-synchronisieren","title":"10. Das Repository mit dem Remote synchronisieren","text":"<p>Nachdem wir bisher lokal am Repository gearbeitet haben, ist es nun endlich an der Zeit, unsere \u00c4nderungen zu ver\u00f6ffentlichen. Bevor wir sie hochladen, sollten wir immer unsere lokale Kopie mit der Remote synchronisieren, um Konflikte w\u00e4hrend der Ver\u00f6ffentlichung zu vermeiden.</p>"},{"location":"content/git/git/#101-git-fetch-referenzen-aktualisieren","title":"10.1 git fetch \u2013 Referenzen aktualisieren","text":"<p>W\u00e4hrend wir unsere \u00c4nderungen umsetzen, haben andere m\u00f6glicherweise \u00c4nderungen im gleichen Branch ver\u00f6ffentlicht.  Daher sollten wir sie \u00fcberpr\u00fcfen und mit unserem lokalen Repository synchronisieren.</p> <p>Der Befehl git fetch hilft uns dabei:</p> <pre><code>$ git fetch\n</code></pre> <p>Dadurch werden Objekte und Referenzen aus dem Ursprungs-Repository heruntergeladen.</p> <p>Wir sollten beachten, dass diese Aktion niemals den aktuellen Working Tree \u00e4ndert. Dies liegt daran, dass wir nur den aktualisierten Commit-Verlauf f\u00fcr unser Repository \u00fcberpr\u00fcfen k\u00f6nnen. Wenn wir ausstehende \u00c4nderungen feststellen, m\u00fcssen wir weitermachen.</p>"},{"location":"content/git/git/#102-git-merge-eingehende-anderungen-anwenden","title":"10.2 git merge \u2013 Eingehende \u00c4nderungen anwenden","text":"<p>Wir m\u00fcssen alle eingehenden \u00c4nderungen im selben Branch zusammenf\u00fchren, bevor wir unseren Code ver\u00f6ffentlichen. Wenn wir dies nicht tun, k\u00f6nnte der Ver\u00f6ffentlichungsprozess fehlschlagen.</p> <pre><code>$ git merge origin/master\n</code></pre> <p>Der Befehl git merge ist sehr m\u00e4chtig. Er l\u00e4dt alle neuen \u00c4nderungen aus der angegebenen Referenz herunter und kombiniert sie mit dem aktuellen Working Tree, indem er die richtige Zusammenf\u00fchrungsstrategie w\u00e4hlt. Viele \u00c4nderungen werden automatisch \u00fcbernommen, auch wenn \u00c4nderungen an denselben Dateien vorhanden sind.</p> <p>Aber manchmal gibt es keine einfache M\u00f6glichkeit, \u00c4nderungen zusammenzuf\u00fchren. In diesem Fall liegt ein Konflikt vor, den wir manuell l\u00f6sen m\u00fcssen, bevor wir fortfahren k\u00f6nnen. Wir m\u00fcssen die betroffene Datei bearbeiten, eine endg\u00fcltige Version vorbereiten und die \u00c4nderungen \u00fcbernehmen.</p>"},{"location":"content/git/git/#103-git-pull-sofort-aktualisieren-und-anwenden","title":"10.3 git pull \u2013 Sofort aktualisieren und anwenden","text":"<p>Der Befehl \u201egit pull\u201c ist nichts anderes als die Kombination von \u201egit fetch\u201c und \u201egit merge\u201c in einem:</p> <pre><code>$ git pull origin/master\n</code></pre> <p>Er \u00fcberpr\u00fcft einen bestimmten Branch auf die neuesten \u00c4nderungen und f\u00fchrt sie mit dem aktuellen Branch zusammen, genau wie dies bei Git Fetch und Git Merge der Fall ist. Dies ist die \u00fcbliche Methode, um den aktuellen Branch zu aktualisieren.</p> <p>Dar\u00fcber hinaus kann das Abrufen von \u00c4nderungen auch eine zus\u00e4tzliche manuelle Aktion erfordern, um Konflikte zu l\u00f6sen.</p>"},{"location":"content/git/git/#104-git-push-lokale-commits-veroffentlichen","title":"10.4 git push \u2013 Lokale Commits ver\u00f6ffentlichen","text":"<p>Sobald wir unser lokales Repository synchronisiert und ausstehende Konflikte behoben haben, sind wir endlich soweit, unsere Commits zu ver\u00f6ffentlichen. Wir m\u00fcssen das Remote-Ziel und den lokalen Branch ausw\u00e4hlen.</p> <p>F\u00fchren wir den Befehl git push aus:</p> <pre><code>$ git push origin master\n</code></pre> <p>Dadurch wird der Master-Branch des Remote-Repositorys mit allen lokal vorgenommenen Commits aktualisiert.</p> <p>Abschlie\u00dfend \u00fcberpr\u00fcfen wir den Verlauf:</p> <pre><code>$ git log\ncommit 6d5810884c3ce63ca08084959e3a21405a1187df (HEAD -&gt; master, origin/master, origin/HEAD)\nAuthor: ...\nDate: ...\n    My second commit\n</code></pre> <p>Tadaaaa! Wir sind fertig! </p>"},{"location":"content/git/git/#11-branches","title":"11. Branches","text":"<p>Branches werden verwendet, um voneinander isolierte Features zu entwickeln. Wir nutzen andere Branches f\u00fcr die Entwicklung und f\u00fchren sie nach Fertigstellung wieder mit der Master-Branch zusammen.</p>"},{"location":"content/git/git/#111-git-branch-branches-verwalten","title":"11.1 git branch \u2013 Branches verwalten","text":"<p>Um einen neuen Branch zu erstellen, geben wir einfach einen Namen an:</p> <pre><code>$ git branch new-branch\n</code></pre> <p>Ein lokaler Branch ist f\u00fcr andere erst verf\u00fcgbar, wenn wir ihn in das Remote-Repository ver\u00f6ffentlichen.</p> <p>Wir k\u00f6nnen nun den neu erstellten Zweig sehen, indem wir alle Branches auflisten:</p> <pre><code>$ git branch --list --all\n* master\n  new-branch\n  remotes/origin/HEAD -&gt; origin/master\n  remotes/origin/master\n</code></pre> <p>Wenn wir einen lokalen Branch l\u00f6schen m\u00f6chten, f\u00fchren wir Folgendes aus:</p> <pre><code>$ git branch -d new-branch\n</code></pre>"},{"location":"content/git/git/#112-git-checkout-aktuellen-branch-andern","title":"11.2 git checkout \u2013 Aktuellen Branch \u00e4ndern","text":"<p>Wenn wir den aktuellen Branch wechseln m\u00f6chten, verwenden wir die Funktionen git checkout oder git switch:</p> <pre><code>$ git switch new-branch\nSwitched to branch 'new-branch'\n$ git checkout master\nSwitched to branch 'master'\n</code></pre> <p>Wir sind gerade mit beiden Befehlen vom Master zum New-Branch und dann wieder zur\u00fcck zum Master gewechselt.</p> <p>Obwohl beide \u00e4hnlich funktionieren, erm\u00f6glicht der Befehl git switch lediglich das Wechseln von Zweigen. Im Gegensatz dazu ist der Git-Checkout ein komplexerer Befehl, der es uns erm\u00f6glicht, zus\u00e4tzlich Dateien zu verwalten, Branches zur\u00fcckzusetzen oder Dateien auf bestimmte Versionen zur\u00fcckzusetzen.</p>"},{"location":"content/git/git/#12-fazit","title":"12. Fazit","text":"<p>In diesem Artikel haben wir alle Git-Grundlagen behandelt und die meisten g\u00e4ngigen Vorg\u00e4nge besprochen, die jeder Entwickler bei der Arbeit mit Git kennen sollte. Durch praktische Beispiele haben wir gelernt, wie man mit diesem Versionskontrollsystem arbeitet.</p> <p>Wir begannen mit der Installation und Konfiguration von Git und erstellten dann das erste Repository. Danach haben wir einige \u00c4nderungen vorgenommen und gelernt, wie man den Commit-Verlauf \u00e4ndert. Abschlie\u00dfend haben wir die \u00c4nderungen durch die Synchronisierung beider Repositories ver\u00f6ffentlicht und gelernt, wie man mit Git-Branches arbeitet.</p>"},{"location":"content/git/git/#aufgaben","title":"Aufgaben:","text":"<p>[320min]</p>"},{"location":"content/git/git/#1-branch-erzeugen","title":"1. Branch erzeugen. \ud83c\udf36\ufe0f\ufe0f","text":"<p>Auf dem Repository von gestern erzeuge einen eigenen Branch. Mache hier eine \u00c4nderung, commite sie und ver\u00f6ffentliche sie.</p>"},{"location":"content/git/git/#2-branches-zusammenfuhren","title":"2. Branches zusammenf\u00fchren. \ud83c\udf36\ufe0f\ufe0f","text":"<p>F\u00fchre deinen Branch mit dem master zusammen. Erzeuge danach zwei neue Branches. Auf jedem Banch erstellst du eine neue Datei mit unterschiedlichen Namen. Commite und ver\u00f6ffentliche. F\u00fchre beide Branches nacheinander zusammen.</p>"},{"location":"content/git/git/#3-ein-externes-repository-klonen","title":"3. Ein externes Repository klonen \ud83c\udf36\ufe0f\ufe0f\ud83c\udf36\ufe0f\ufe0f","text":"<p>Mache die Aufgabe wie oben aber provuziere einen Konflikt.</p>"},{"location":"content/git/git/#4-konflikt-auflosen","title":"4. Konflikt aufl\u00f6sen. \ud83c\udf36\ufe0f\ufe0f\ud83c\udf36\ufe0f\ufe0f","text":"<p>L\u00f6se den Konflikt von oben auf einem Weg deiner Wahl auf.</p>"},{"location":"content/git/git/#5-provuziere-unterschiedliche-konflikte","title":"5. Provuziere unterschiedliche Konflikte. \ud83c\udf36\ufe0f\ufe0f\ud83c\udf36\ufe0f\ufe0f","text":"<p>Erstelle unterschiedliche Konflikte und l\u00f6se sie jeweils mit einer anderen Methode auf.</p>"},{"location":"content/git/git/#6-arbeitet-gemeinsam","title":"6. Arbeitet gemeinsam. \ud83c\udf36\ufe0f\ufe0f\ud83c\udf36\ufe0f\ufe0f","text":"<p>Einigt euch ein gemeinsames Projekt in einem Remote Repository zu erstellen. Dort sollen bestimmte Dateien enthalten sein. Bildet Arbeitsgruppen und erstellt je einen Branch pro Arbeitsgruppe. Erzeugt eigene Beitr\u00e4ge innerhalb der Branches. Commitet dann und l\u00f6st Konflikte ggf auf. Ver\u00f6ffentlicht eure Commits. F\u00fchrt nach m\u00f6glichkeit alles wieder im Master zusammen und ver\u00f6ffentlicht.</p>"},{"location":"content/git/solutions/","title":"Solutions","text":""},{"location":"content/git/solutions/#aufgabe-nutzer-korrekt-einstellen","title":"Aufgabe: Nutzer korrekt einstellen","text":"<pre><code>git config --global user.name \"Viktor Reichert\"\ngit config --global user.email \"viktor.reichert@qualidy.de\"\n</code></pre>"},{"location":"content/git/solutions/#aufgabe-welche-vorteile","title":"Aufgabe: Welche Vorteile?","text":"<p>Kommunikation \u00fcber E-Mail (Dateien als Anh\u00e4nge austauschen):</p> <ul> <li>Eignet sich bei einfachen Projekten, bei denen nur eine Partei eine Datei manipuliert.</li> <li>Vorteil: An der Mail kann man erkennen, dass die korrekte Person mit Projektversionen vorschl\u00e4gt.</li> <li>Vorteil: Automatische Notifizierung bei Projektversionen.</li> <li>Vorteil: Alle Projektversionen sind vorhanden und k\u00f6nnen wiederhergestellt werden...</li> <li>Nachteil: ...au\u00dfer die Mail wird gel\u00f6scht.</li> <li>Nachteil: Ger\u00e4t sehr schnell au\u00dfer Kontrolle.</li> </ul> <p>Gemeinsames Laufwerk, auf das alle Projektbeteiligten Zugreifen k\u00f6nnen</p> <ul> <li>Eignet sich bei Projekten mit gro\u00dfen Dateien, die nicht ge\u00e4ndert werden, in denen eigentlich nur ein Lagerraum gebraucht wird. (z.B. 100h Videomaterial)</li> <li>Vorteil: Alle haben immer auf den aktuellen Status des Projektes Zugriff.</li> <li>Nachteil: Aber es gibt auch nur den aktuellen Status des Projektes.</li> <li>Nachteil: Alternative Projektversionen m\u00fcssen erstellt werden, indem die gesamte Ordnerstruktur kopiert wird.</li> <li>Nachteil: \u00c4nderungen sind schwer bis gar nicht nachvollziehbar.</li> <li>Nachteil: Ger\u00e4t nach kurzer Zeit au\u00dfer Kontrolle.</li> </ul> <p>Paralleles Arbeiten an einer Datei, die in der Cloud liegt, wie mit Google Docs oder Microsoft Word</p> <ul> <li>Eignet sich f\u00fcr kleine Projekte in kleinen Teams.</li> <li>Vorteil: \u00c4nderungen anderer sind sofort f\u00fcr alle sichtbar und editierbar.</li> <li>Nachteil: Ungest\u00f6rtes Arbeiten nur mit einer eigenen Kopie der Datei m\u00f6glich.</li> </ul>"},{"location":"content/git/solutions/#aufgabe-was-ist-mir-wichtig","title":"Aufgabe: Was ist mir wichtig?","text":"<p>Das musst du schon selbst wissen\ud83d\ude09</p>"},{"location":"content/git/solutions/#aufgabe-metaphorisch-gesprochen","title":"Aufgabe: Metaphorisch gesprochen","text":"Metapher git B\u00fccherregal Repository Erster Tisch Working Tree Zweiter Tisch mit Kamera Index / Staging Area Foto vom zweiten Tisch Commit Zettel auf aktuellem Foto Branch"},{"location":"content/git/solutions/#aufgabe-check-please","title":"Aufgabe: Check Please!","text":"\ud83c\udfa6 Video  <p><pre><code>gitGraph\n    commit id: \"0f3c214\"\n    commit id: \"0fb8d7\"\n    branch zeugnisse\n    checkout zeugnisse\n    commit id: \"03ddaff\"\n    commit id: \"a5a60d4\"\n    checkout main\n    merge zeugnisse id: \"1842726\"</code></pre> Die Commitmessages sagen an, was in den jeweiligen Commits passiert.</p>"},{"location":"content/git/solutions/#aufgabe-hilfe-zur-selbsthilfe","title":"Aufgabe: Hilfe zur Selbsthilfe","text":"<pre><code>$ git help\nusage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n           &lt;command&gt; [&lt;args&gt;]\n...\n</code></pre> <p>Die ersten drei Befehle rufen die Hilfe f\u00fcr den Befehl <code>init</code> auf.</p> <p>Mit der Option -g k\u00f6nnen wir auch auf die Liste der internen Anleitungen zugreifen:</p> <pre><code>$ git help -g\nThe common Git guides are:\n   attributes          Defining attributes per path\n   cli                 Git command-line interface and conventions\n   core-tutorial       A Git core tutorial for developers\n...\n$ git help core-tutorial\n</code></pre> <ul> <li>Die spitzen Klammern <code>&lt;...&gt;</code>sind Platzhalter f\u00fcr Inhalte, wie Branchnamen.</li> <li>Die eckigen Klammern <code>[..]</code> ist ein optionaler Parameter.</li> <li>Die eckigen Klammern mit Pipes <code>[..|..|..]</code> sind optionale Parameter, von denen nur einer gew\u00e4lt werden kann.</li> <li>Die runden Klammern mit Pipes <code>(..|..)</code> sind Parameter, von denen einer gew\u00e4hlt werden muss.</li> <li>Ein Befehl muss mehrfach gelistet werden, weil sich nur so in dieser Syntax alle m\u00f6glichen Aufrufm\u00f6glichkeiten darstellen lassen.</li> </ul>"},{"location":"content/git/solutions/#aufgabe-cat-file","title":"Aufgabe: cat-file","text":"\ud83c\udfa6 Video  <pre><code>flowchart TD\n    C0[\"0f3c214&lt;br&gt;Commit\"] --&gt;\n    T0[\"5ef8d03&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt;\n    B0[\"168730b&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Alter: 33 Jahre&lt;br&gt;Beruf: Boss&lt;br&gt;&lt;br&gt;Vorheriger Arbeitgeber: Geheim\"] \n\n    C1[\"0fb8da7&lt;br&gt;Commit\"] --&gt; C0\n    C1 --&gt;\n    T1[\"012b7e8&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt; B0\n    T1 --Bewerbungsschreiben.txt--&gt;\n    B1[\"7e65d0f&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Sehr geeehrte Damen und Herren,&lt;br&gt;&lt;br&gt;warum ich der richtige f\u00fcr euch bin? Hier sind meine 3 besten Gr\u00fcnde:&lt;br&gt;&lt;br&gt;1. Ich bin der sch\u00f6nste&lt;br&gt;2. Ich bin der kl\u00fcgste&lt;br&gt;3. Ich bin, ehrlich gesagt, auch der dem\u00fctigste.\"]\n\n    C2[\"03ddaff&lt;br&gt;Commit\"] --&gt; C0\n    C2 --&gt;\n    T2[\"09cc0f2&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt; B0\n    T2 --Zeugnis.txt--&gt;\n    B2[\"641eef5&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Mathe: 1&lt;br&gt;Bio: 1&lt;br&gt;Latein: 5&lt;br&gt;Beauty: 1+&lt;br&gt;HSU: 2\"]\n\n    C3[\"a5a60d4&lt;br&gt;Commit\"] --&gt; C2\n    C3 --&gt;\n    T3[\"c8ba3ee&lt;br&gt;Tree\"] --Lebenslauf.txt--&gt; B0\n    T3 --Zeugnis.txt--&gt;\n    B3[\"32f54f8&lt;br&gt;Blob&lt;br&gt;&lt;br&gt;Mathe: 1&lt;br&gt;Bio: 1&lt;br&gt;Latein: 5&lt;br&gt;Beauty: 1+&lt;br&gt;HSU: 2&lt;br&gt;&lt;br&gt;&lt;br&gt;F\u00fchrerschein Klasse A und B\"]\n\n\n    C4[\"1842726&lt;br/&gt;Commit\"] --&gt; C3\n    C4 --&gt; C1\n    C4 --&gt;\n    T4[\"d276800&lt;br/&gt;Tree\"] --Bewerbungsschreiben.txt--&gt; B1\n    T4 --Lebenslauf.txt--&gt; B0\n    T4 --Zeugnis.txt--&gt; B3\n\n    subgraph Commits\n    C0\n    C1\n    C2\n    C3\n    C4\n    end\n\n    subgraph Trees\n    T0\n    T1\n    T2\n    T3\n    T4\n    end\n\n    subgraph Blobs\n    B0\n    B1\n    B2\n    B3\n    end\n\n    subgraph Tags\n    Tag1[\"c96c504&lt;br&gt;Tag&lt;br&gt;Anfang\"] --&gt; C0\n    end</code></pre>"},{"location":"content/installation/installation/","title":"Installation","text":"Video <p>Um mit dem Programmieren loslegen zu k\u00f6nnen m\u00fcssen wir zun\u00e4chst Python und eine Entwicklungsumgebung installieren:</p> <ul> <li> <p> Python</p> <p>Um Pythonprogramme schreiben und ausf\u00fchren zu k\u00f6nnen ben\u00f6tigen Sie das Programm Python auf dem Rechner. Dann k\u00f6nnen wir .py-Dateien schreiben und ausf\u00fchren.</p> <p>Installiere Python \u00fcber Microsoft Store (1) oder python.org</p> <ol> <li>Suche nach \"Store\" in der Suchleiste, um den Microsoft Store auf deinem Rechner zu finden. Hier kannst du nach \"Python 3.12\" suchen und es installieren.</li> </ol> </li> <li> <p>Entwicklungsumgebung</p> <p>Um bequem Pythonprogramme zu schreiben Nutzen wir eine Entwicklungsumgebung. (1)</p> <ol> <li>Alle hier vorgeschlagenen Entwicklungsumgebungen sind gleichwertig. Wir werden hier mit Visual Studio Code arbeiten.</li> </ol>  Visual Studio Code PyCharm Community Edition <p>Microsoft Store (1) oder code.visualstudio.com</p> <ol> <li>Suche nach \"Store\" in der Suchleiste, um den Microsoft Store auf deinem Rechner zu finden. Hier kannst du nach \"vscode\" suchen und es installieren.</li> </ol> <p>Starte Visual Studio Code und installiere dann die Erweiterung \"Python\". (1)</p> <ol> <li></li> </ol> <p>jetbrains.com (1)</p> <ol> <li>Nutze den unteren Link zum Download der kostenfreien Community Edition (schwarz hinterlegt). Der obere Link ist eine 30-Tage-Testversion der Professional Edition.</li> </ol> </li> </ul> Dein erstes Programm Video <p> </p> <ul> <li>Erstelle einen Leeren Ordner \"python-schulung\".</li> <li>Starte Visual Studio Code.</li> <li>Gehe auf \"File\" &gt; \"Open Folder\" und w\u00e4hle den von dir erstellten Ordner aus. (1)</li> <li>Best\u00e4tige, dass du dem Projekt vertraust. (5)</li> <li>Erstelle eine neue Python-Datei namens \"hallo.py\", indem du auf das  neben dem Ordnernamen klickst. (2)</li> <li>Schreibe <code>print(\"Hallo Welt\")</code> in die Datei.</li> <li>Aktiviere das automtische Speichern, indem du auf \"File\" &gt; \"Auto Save\" klickst. (3)</li> <li>Klicke auf das die -Taste oben rechts, um die Datei auszuf\u00fchren. (4)</li> <li>Ein Terminal \u00f6ffnen sich unten und auf dieser erscheint die Ausgabe <code>Hallo Welt</code>. \ud83c\udf89\ud83c\udf89\ud83c\udf89 </li> </ul> <p> </p> <ol> <li></li> <li>Das Symbol taucht erst auf, wenn man mit der Maus dar\u00fcber ist.\ud83d\ude44</li> <li></li> <li></li> <li></li> </ol> <p>Strukturiert bleiben</p> <p>Im folgenden werden Sie viele .py-Dateien erstellen. Sortieren sie diese mit Hilfe von Unterordnern, um nicht die \u00dcbersicht zu verlieren. So k\u00f6nnen Sie z.B. f\u00fcr jedes Seite hier im Browser einen eigenen Unterordner, mit dem Namen des Abschnitts.</p>"},{"location":"content/list_comp/list_comp/","title":"List Comprehensions","text":"<p>List Comprehensions in Python sind eine elegante und effiziente M\u00f6glichkeit um Listen zu erstellen und Operationen auf  ihren Elementen auszuf\u00fchren. Sie bieten eine klare und pr\u00e4gnante Alternative zu traditionellen Schleifen und Funktionsaufrufen. List Comprehensions sind eine typische Struktur, die man in Python-Code h\u00e4ufig findet.</p>"},{"location":"content/list_comp/list_comp/#problemstellungen","title":"Problemstellungen","text":"<p>Stellen wir uns vor, wir m\u00f6chten aus einer vorhandenen Liste eine neue Liste erstellen, in der jedes Element aufgrund einer Bedingung oder einer Operation ver\u00e4ndert wurde. Traditionell w\u00fcrden wir dazu eine for-Schleife verwenden, die \u00fcber die alte Liste iteriert, die Operation durchf\u00fchrt und das Ergebnis in einer neuen Liste speichert. Das w\u00fcrde dann so aussehen:</p> <pre><code>quadrate = []\nfor i in range(1, 6):\n    quadrate.append(i * i)\n\nprint(quadrate)\n</code></pre> <p>List Comprehensions vereinfachen diesen Code, indem sie die gesamte Logik in eine einzige, lesbare Zeile komprimieren. Sie k\u00f6nnen Bedingungen anwenden, Funktionen aufrufen und die resultierende Liste direkt erzeugen, was den Code wesentlich sauberer und eleganter macht.</p> <pre><code>quadrate = [i * i for i in range(1, 6)]\n\nprint(quadrate)\n</code></pre> <p>Die einfachste Form der List Comprehension sieht also so aus:</p> <p><code>[ausdruck(item) for item in iterable]</code></p>"},{"location":"content/list_comp/list_comp/#motivation-fur-list-comprehensions","title":"Motivation f\u00fcr List Comprehensions","text":"<ul> <li> <p>Kompakter Code: List Comprehensions erm\u00f6glichen es, Schleifen und bedingte Anweisungen in einer Zeile zu  schreiben, wodurch der Code k\u00fcrzer und, wenn man es nicht \u00fcbertreibt, auch leichter lesbar wird.</p> </li> <li> <p>Performance: Sie sind oft schneller als traditionelle Schleifen, besonders bei der Erstellung gro\u00dfer Listen.</p> </li> </ul> <p>List Comprehensions sind ein hervorragendes Beispiel f\u00fcr pythonic Code, also Code der typisch f\u00fcr Python-Programme ist und die jeder kennen und verstehen sollte.</p>"},{"location":"content/list_comp/list_comp/#aufgaben-zu-einfachen-list-comprehensions","title":"Aufgaben zu einfachen List Comprehensions","text":"Quadrate erstellen <p>Erstelle eine Liste der Quadrate der Zahlen von 1 bis 10 mit List Comprehension. Also <code>[1, 4, 9, 16, ..., 100]</code>.</p> L\u00f6sung <pre><code>quadrate = [i ** 2 for i in range(1, 11)]\nprint(quadrate)\n</code></pre> Zeichenkettenl\u00e4ngen <p>Erstelle eine Liste mit den L\u00e4ngen jedes Wortes in einer vorgegebenen Liste von W\u00f6rtern.</p> L\u00f6sung <pre><code>wortlaengen = [len(wort) for wort in [\"Hallo\", \"Welt\", \"Python\"]]\nprint(wortlaengen)\n</code></pre> Absolute Werte <p>Wandele eine Liste von Zahlen in eine Liste ihrer absoluten Werte um. Z.B. <code>[-1, -2, 3, -4, 5]</code> zu <code>[1,2,3,4,5]</code>.  Verwende dazu die Funktion <code>abs</code>.</p> L\u00f6sung <pre><code>absolute = [abs(i) for i in [-1, -2, 3, -4, 5]]\nprint(absolute)\n</code></pre> String in Gro\u00dfbuchstaben <p>Konvertiere jede Zeichenkette in einer Liste in Gro\u00dfbuchstaben.</p> L\u00f6sung <pre><code>grossbuchstaben = [s.upper() for s in [\"hallo\", \"welt\", \"python\"]]\nprint(grossbuchstaben)\n</code></pre> Wurzeln ziehen <p>Berechne die Quadratwurzel jeder Zahl in einer Liste von Zahlen.</p> L\u00f6sung <pre><code>wurzeln = [i ** 0.5 for i in [1, 4, 9, 16, 25]]\nprint(wurzeln)\n</code></pre> Tupel erstellen <p>Erstelle eine Liste von Tupeln <code>(x, x*x)</code> f\u00fcr jede Zahl x von 1 bis 10.</p> L\u00f6sung <pre><code>tupel_liste = [(i, i * i) for i in range(1, 11)]\nprint(tupel_liste)\n</code></pre> Teile von Strings <p>Erstelle eine Liste der ersten Zeichen jedes Wortes in einer Liste von W\u00f6rtern.</p> L\u00f6sung <pre><code>erste_zeichen = [wort[0] for wort in [\"Hallo\", \"Welt\", \"Python\"]]\nprint(erste_zeichen)\n</code></pre> Durchschnittswerte <p>Berechne den Durchschnitt von jedem Paar aufeinanderfolgender Zahlen in einer Liste. Also z.B. <code>[1,2,5,5,2,-2]</code> wird zu <code>[1.5, 3.5, 5.0, 3.5, 0]</code></p> L\u00f6sung <pre><code>liste = [1, 2, 5, 5, 2, -2]\ndurchschnitt = [(liste[i] + liste[i + 1]) / 2 for i in range(len(liste) - 1)]\nprint(durchschnitt)\n</code></pre>"},{"location":"content/list_comp/list_comp/#elemente-filtern","title":"Elemente filtern","text":"<p>Es ist bei einer List Comprehension einfach m\u00f6glich bestimmte Elemente aus der Liste unter einer Bedingung zu entfernen. Der folgende Code:</p> <pre><code>words = [\"Python\", \"ist\", \"cool\"]\n\nresult = []\nfor word in words:\n    if len(word) &gt; 3:\n        result.append(word)\n\nprint(result)\n</code></pre> <p>l\u00e4sst sich zu diesem vereinfachen:</p> <pre><code>words = [\"Python\", \"ist\", \"cool\"]\n\nresult = [word for word in words if len(word) &gt; 3]\n\nprint(result)\n</code></pre>"},{"location":"content/list_comp/list_comp/#bedingte-einsetzung","title":"Bedingte Einsetzung","text":"<p>Im letzten Beispiel haben wir gesehen, wie wir Elemente filtern k\u00f6nnen. Manchmal m\u00f6chte man aber auch verschiedene Operationen auf einem Element durchf\u00fchren, basierend auf einer Bedingung. Hier l\u00e4sst sich der tern\u00e4re Operater nutzen. Den folgendne Code</p> <pre><code>result = []\nfor i in range(6):\n    if i%2:\n        result.append(i)\n    else:\n        result.append(i*i)\n\nprint(result)\n</code></pre> <p>vereinfachen wir zun\u00e4chst zu</p> <pre><code>result = []\nfor i in range(6):\n    result.append(i if i % 2 else i * i)\n\nprint(result)\n</code></pre> <p>und abschlie\u00dfend:</p> <pre><code>result = [i if i % 2 else i * i for i in range(6)]\nprint(result)\n</code></pre>"},{"location":"content/list_comp/list_comp/#aufgaben-zu-list-comprehensions","title":"Aufgaben zu List Comprehensions","text":"Gerade Zahlen <p>Erzeuge eine Liste aller geraden Zahlen zwischen 1 und 20.</p> L\u00f6sung <pre><code>gerade = [i for i in range(1, 21) if not i % 2]\nprint(gerade)\n</code></pre> Filtern nach Bedingung <p>Erzeuge eine Liste aller Zahlen von 1 bis 20, die durch 3 teilbar sind.</p> L\u00f6sung <pre><code>teilbar_durch_3 = [i for i in range(1, 21) if i % 3 == 0]\nprint(teilbar_durch_3)\n</code></pre> Nicht-leere Strings <p>Filtere eine Liste von Strings und behalte nur die nicht-leeren bei.</p> L\u00f6sung <pre><code>nicht_leer = [s for s in [\"Hallo\", \"\", \"Welt\", \"\"] if s]\nprint(nicht_leer)\n</code></pre> Fizz Buzz <p>Erstelle eine Liste von Strings \"Fizz\", \"Buzz\" oder \"FizzBuzz\" f\u00fcr Zahlen von 1 bis 15, abh\u00e4ngig davon, ob die Zahl durch 3, 5 oder beide teilbar ist.</p> L\u00f6sung <pre><code>fizz_buzz = [\"FizzBuzz\" if i % 3 == 0 and i % 5 == 0 else \"Fizz\" if i % 3 == 0 else \"Buzz\" if i % 5 == 0 else str(i) for i in range(1, 16)]\nprint(fizz_buzz)\n</code></pre>"},{"location":"content/list_comp/list_comp/#verschachtelte-list-comprehension","title":"Verschachtelte List Comprehension","text":"<p>Es ist auch m\u00f6glich verschachtelte Schleifen in List Comprehensions zu \u00fcbersetzen. </p> <p>Ausgangscode:</p> <pre><code>result = []\nfor i in range(4):\n    for j in range(4):\n        result.append(i * j)\nprint(result)\n</code></pre> <p>Gek\u00fcrzt:</p> <pre><code>result = [i * j for i in range(4) for j in range(4)]\n\nprint(result)\n</code></pre> Bedingung fehlt <p>Was ist hier die Ausgabe:</p> <pre><code>result = [(i, j) for i in range(1, 11) for j in range(1, 11) if ...]\nprint(result) # [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)]\n</code></pre> <p>Erg\u00e4nze die fehlende Bedingung, um die angegebene Ausgabe zu erhalten.</p> L\u00f6sung <pre><code>paare = [(i, j) for i in range(1, 11) for j in range(1, 11) if i + j == 10]\nprint(paare)\n</code></pre> Liste von Listen abflachen <p>Flache eine Liste von Listen zu einer einzigen Liste ab.  Also z.B. aus <code>[[1, 2], [3, 4], [5, 6]]</code> zu <code>[1, 2, 3, 4, 5, 6]</code>.</p> L\u00f6sung <pre><code>abgeflacht = [element for sublist in [[1, 2], [3, 4], [5, 6]] for element in sublist]\nprint(abgeflacht)\n</code></pre> Verschachtelung <p>Erstelle List Comprehensions f\u00fcr den folgenden Code:</p> <pre><code>a = [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3)]\n\nb = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6], [0, 3, 6, 9]]\n\nc = [['aA', 'bA', 'cA'], ['aB', 'bB', 'cB'], ['aC', 'bC', 'cC']]\n</code></pre> L\u00f6sung <pre><code>a = [(i,j) for i in range(2) for j in range(4)]\n\nb = [[i*j for i in range(4)] for j in range(4)]\n\nc = [[i+j for i in \"abc\"] for j in \"ABC\"]\n\nprint(a)\nprint(b)\nprint(c)\n</code></pre>"},{"location":"content/list_comp/list_comp/#list-comprehensions-nicht-nur-fur-listen","title":"List Comprehensions nicht nur f\u00fcr Listen","text":"<p>Tats\u00e4chlich lassen sich List Comprehensions nicht nur f\u00fcr Listen verwenden, man kann sie auch f\u00fcr Dictionaries oder Sets nutzen:</p> <pre><code>new_set = {abs(x) for x in range(-3, 4)} # {0, 1, 2, 3}\n\nnew_dict = {word: len(word) for word in [\"Hi\", \"was\", \"geht\"]} # {\"Hi\": 2, \"was\": 3, \"geht\": 4}\n</code></pre> Dictionary Comprehension <p>Schreibe Code, der die folgenden Dictionaries mit Comprehension erzeugt:</p> <pre><code>a = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\n\nb = {'Hase': ['H', 'a', 's', 'e'], 'Hund': ['H', 'u', 'n', 'd']}\n\n# Tausche die Keys und Values in folgendem Dicitonary\nmy_dict = {'A': 1, 'B': 2, 'C': 3}\nswapped_my_dict = {1: 'A', 2: 'B', 3: 'C'}\n</code></pre> L\u00f6sung <pre><code>a = {i: i * i for i in range(1, 11)}\n\nwords = ['Hase', 'Hund']\nb = {word: [letter for letter in word] for word in words}\n\nmy_dict = {'A': 1, 'B': 2, 'C': 3}\nswapped_my_dict = {v: k for k, v in my_dict.items()}\n</code></pre>"},{"location":"content/list_comp/list_comp/#generator-was-dahintersteckt","title":"Generator - was dahintersteckt","text":"<p>Vielleicht ist dir aufgefallen, dass die folgende Syntax nicht zu einem Tupel f\u00fchrt, sondern man einen Generator zur\u00fcckbekommt:</p> <pre><code>my_gen = (i * 2 for i in range(4))\n\nprint(my_gen) # &lt;generator object &lt;genexpr&gt; at 0x000001F7191D7B50&gt;\nprint(type(my_gen)) # &lt;class 'generator'&gt;\n</code></pre> <p>Tats\u00e4chlich handelt es sich hier in der ersten Zeile um eine  Generator Expression.</p> <p>Ein generator kann mit der Methode <code>next</code> um das n\u00e4chste Element gebeten werden. Das geht so lange, bis eine <code>StopIteration</code> Exception geworfen wird.</p> <pre><code>my_gen = (i * 2 for i in range(4))\n\nprint(next(my_gen)) # 0\nprint(next(my_gen)) # 2\nprint(next(my_gen)) # 4\nprint(next(my_gen)) # 6\nprint(next(my_gen)) # StopIteration\n</code></pre> <p>So ein <code>generator</code> l\u00e4sst sich so auch klasse mit einer <code>for</code>-Schleife durchlaufen, da diese intern immer wieder die <code>next</code>-Methode aufruft, bis es zur <code>StopIteration</code> Exception kommt.</p> <pre><code>summe = 0\nfor i in (i * 2 for i in range(4)):\n    summe += i\n\nprint(summe)\n</code></pre> <p>Dieser Code l\u00e4sst sich tats\u00e4chlich noch k\u00fcrzen zu:</p> <pre><code>summe = sum(i * 2 for i in range(4))\nprint(summe)\n</code></pre> <p>Es gibt diverse eingebaute Pythonmethoden, die so mit Iteratoren umgehen k\u00f6nnen. Dazu geh\u00f6ren: <code>all</code>, <code>any</code>, <code>map</code> oder <code>tuple</code>. Du findest noch  weiter hier in der Dokumentation, wenn du nach den Funktionen suchst, die <code>iterable</code> als Parameter erwarten.</p> Anzahl der Vokale z\u00e4hlen <p>Schreibe Code, der alle Vokale in einem Text z\u00e4hlt.</p> L\u00f6sung <pre><code>text = \"Python ist gro\u00dfartig.\"\nanzahl_vokale = sum(1 for char in text if char.lower() in \"aeiou\")\nprint(anzahl_vokale)\n</code></pre> Tuple Comprehension <p>Erstelle ein Tuple von Quadratzahlen mit Comprehension.</p> L\u00f6sung <pre><code>a = tuple(i ** 2 for i in range(11))\n</code></pre>"},{"location":"content/list_comp/solutions/","title":"L\u00f6sungen f\u00fcr einfache List Comprehensions","text":""},{"location":"content/list_comp/solutions/#1-quadrate-erstellen","title":"1. Quadrate erstellen","text":"<pre><code>quadrate = [i ** 2 for i in range(1, 11)]\n</code></pre>"},{"location":"content/list_comp/solutions/#2-zeichenkettenlangen","title":"2. Zeichenkettenl\u00e4ngen","text":"<pre><code>wortlaengen = [len(wort) for wort in [\"Hallo\", \"Welt\", \"Python\"]]\n</code></pre>"},{"location":"content/list_comp/solutions/#3-absolute-werte","title":"3. Absolute Werte","text":"<pre><code>absolute = [abs(i) for i in [-1, -2, 3, -4, 5]]\n</code></pre>"},{"location":"content/list_comp/solutions/#4-string-in-grobuchstaben","title":"4. String in Gro\u00dfbuchstaben","text":"<pre><code>grossbuchstaben = [s.upper() for s in [\"hallo\", \"welt\", \"python\"]]\n</code></pre>"},{"location":"content/list_comp/solutions/#5-wurzeln-ziehen","title":"5. Wurzeln ziehen","text":"<pre><code>wurzeln = [i ** 0.5 for i in [1, 4, 9, 16, 25]]\n</code></pre>"},{"location":"content/list_comp/solutions/#6-tupel-erstellen","title":"6. Tupel erstellen","text":"<pre><code>tupel_liste = [(i, i * i) for i in range(1, 11)]\n</code></pre>"},{"location":"content/list_comp/solutions/#7-teile-von-strings","title":"7. Teile von Strings","text":"<pre><code>erste_zeichen = [wort[0] for wort in [\"Hallo\", \"Welt\", \"Python\"]]\n</code></pre>"},{"location":"content/list_comp/solutions/#8-durchschnittswerte","title":"8. Durchschnittswerte","text":"<pre><code>durchschnitt = [(liste[i] + liste[i + 1]) / 2 for i in range(len(liste) - 1)]\n</code></pre>"},{"location":"content/list_comp/solutions/#9-gerade-zahlen","title":"9. Gerade Zahlen","text":"<pre><code>gerade = [i for i in range(1, 21) if not i % 2]\n</code></pre>"},{"location":"content/list_comp/solutions/#10-filtern-nach-bedingung","title":"10. Filtern nach Bedingung","text":"<pre><code>teilbar_durch_3 = [i for i in range(1, 21) if i % 3 == 0]\n</code></pre>"},{"location":"content/list_comp/solutions/#11-nicht-leere-strings","title":"11. Nicht-leere Strings","text":"<pre><code>nicht_leer = [s for s in [\"Hallo\", \"\", \"Welt\", \"\"] if s]\n</code></pre>"},{"location":"content/list_comp/solutions/#12-fizz-buzz","title":"12. Fizz Buzz","text":"<pre><code>fizz_buzz = [\"FizzBuzz\" if i % 3 == 0 and i % 5 == 0 else \"Fizz\" if i % 3 == 0 else \"Buzz\" if i % 5 == 0 else str(i) for\n             i in range(1, 16)]\n</code></pre>"},{"location":"content/list_comp/solutions/#13-bedingung-fehlt","title":"13. Bedingung fehlt","text":"<pre><code>paare = [(i, j) for i in range(1, 11) for j in range(1, 11) if i + j == 10]\n</code></pre>"},{"location":"content/list_comp/solutions/#14-liste-von-listen-abflachen","title":"14. Liste von Listen abflachen","text":"<pre><code>abgeflacht = [element for sublist in [[1, 2], [3, 4], [5, 6]] for element in sublist]\n</code></pre>"},{"location":"content/list_comp/solutions/#15-verschachtelung","title":"15. Verschachtelung","text":"<pre><code>a = [(i,j) for i in range(2) for j in range(4)]\n\nb = [[i*j for i in range(4)] for j in range(4)]\n\nc = [[i+j for i in \"abc\"] for j in \"ABC\"]\n</code></pre>"},{"location":"content/list_comp/solutions/#16-dictionary-comprehensions","title":"16: Dictionary Comprehensions","text":"<pre><code>a = {i: i * i for i in range(1, 11)}\n\nwords = ['Hase', 'Hund']\nb = {word: [letter for letter in word] for word in words}\n\nmy_dict = {'A': 1, 'B': 2, 'C': 3}\nswapped_my_dict = {v: k for k, v in my_dict.items()}\n</code></pre>"},{"location":"content/list_comp/solutions/#17-anzahl-der-vokale-zahlen","title":"17. Anzahl der Vokale z\u00e4hlen:","text":"<pre><code>text = \"Python ist gro\u00dfartig.\"\nanzahl_vokale = sum(1 for char in text if char.lower() in \"aeiou\")\nprint(anzahl_vokale)\n</code></pre>"},{"location":"content/list_comp/solutions/#18-use-tuple","title":"18. Use tuple","text":"<pre><code>my_tuple = tuple(i ** 2 for i in range(11))\n</code></pre>"},{"location":"content/loops/loops/","title":"Schleifen","text":"<p># Codewiederholung</p> Video <p> </p> <p>Mit den <code>if</code>-Bl\u00f6cken haben wir kennengelernt, wie man einen Codeblock nur unter bestimmten Bedingungen durchf\u00fchrt.</p> <p>Wir wollen nun die <code>while</code>-Bl\u00f6cke anschauen. Diese sind so \u00e4hnlich wie <code>if</code>-Bl\u00f6cke, den auch sie pr\u00fcfen eine Bedingung und f\u00fchren den einger\u00fcckten Code nur aus, wenn die Bedinung <code>True</code> ist. ABER: Bei <code>while</code> wird nach jeder Durchf\u00fchrung des einger\u00fcckten Codes, ob die Bedingung immernoch erf\u00fcllt ist! Und wenn ja, dann wird der einger\u00fcckte Codeblock NOCH MAL durchgef\u00fchrt. Und das immerwieder!</p> <pre><code>zahl = 1 # (1)!\nwhile zahl &lt; 100:  # (2)!\n    print(zahl)  # (3)!\n    zahl = zahl * 2  # (4)!\nprint(f'Finaler Wert: {zahl}.') # (5)!\n</code></pre> <ol> <li>Die Variable <code>zahl</code> wird mit dem Wert <code>1</code> angelegt.</li> <li>Es wird gepr\u00fcft, ob der Wert in <code>zahl</code> kleiner als <code>100</code> ist. Wenn ja, werden die n\u00e4chsten beiden Zeilen ausgef\u00fchrt. Wenn nein, so wird direkt zu Zeile 5 gesprungen.</li> <li>Auf der Konsole wird der aktuelle Wert von <code>zahl</code> ausgegeben.</li> <li>Der Wert von <code>zahl</code> wird verdopplt und dies in <code>zahl</code> gespeichert.    Achtung: Danach geht es in Zeile 2 weiter!</li> <li>Abschlie\u00dfend wird der finale Wert von <code>zahl</code> ausgegeben.</li> </ol> <pre><code>stateDiagram-v2\n    classDef yourState font-style:italic,font-weight:bold,fill:white\n\n    B:Bedingung \u00fcberpr\u00fcfen\n    I:Code *im* einger\u00fcckten&lt;br/&gt;Block ausf\u00fchren\n    F:Code *nach* einger\u00fccktem&lt;br/&gt;Block ausf\u00fchren\n    [*] --&gt; B:::yourState\n    B --&gt; I : True\n    I --&gt; B : Springe zur\u00fcck\n    B --&gt; F : False</code></pre> <p>Code im Debugger</p> <p> </p> <p>Endlosschleifen abbrechen</p> <p>Sollten Sie in eine Endlosschleife geraten, k\u00f6nnen Sie ins Terminal klicken und die Ausf\u00fchrung mit Ctrl + C abbrechen.</p> Schleifen lesen <p>Schau dir den folgenden Code an und vollziehe nach, was passiert, wenn dieser ausgef\u00fchrt wird.</p> <p>Wie oft wird der Rumpf <code>while</code>-Schleife durchlaufen?</p> <p>Wie oft wird die Bedingung gepr\u00fcft?</p> <p>Was erscheint auf der Konsole?</p> <p>Welchen Wert hat <code>a</code> am Ende des Programms?</p> <pre><code>a = 10\nwhile a &gt; 0:\n    print(a)\n    a = a - 3\n</code></pre> <p>Beantworten Sie alle Fragen noch mal aber nun sind die Zeilen 3 und 4 vertauscht!</p> <pre><code>a = 10\nwhile a &gt; 0:\n    a = a - 3\n    print(a)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Die Schleiferumpf wird insgesamt 3 Mal durchlaufen.</p> <p>Die Bedingung wird 4 Mal gepr\u00fcft.</p> <p>Auf der Konsole erscheint</p> <pre><code>10\n7\n4\n1\n</code></pre> <p><code>a</code> hat am Ende des Programms den Wert <code>-2</code></p> <p>Wenn man die Zeilen 3 und 4 vertauscht \u00e4ndert sich nur die Konsolenausgabe. Alles andere bleibt gleich.</p> <pre><code>7\n4\n1\n-2\n</code></pre> Variable Durchlaufzahl <p>Ersetzen Sie die <code>...</code> mit den verschiedenen Operatoren <code>+</code>, <code>-</code>, <code>*</code> und <code>/</code>.</p> <p>Was kannst du beobachten? Wie oft wird die Schleife den Rumpf durchlaufen?</p> <p>Ersetze in der letzten Zeile die <code>...</code>, sodass auf der Konsole ausgegeben wird <code>Die Schleife wurde x-Mal durchlaufen</code>,  wobei <code>x</code> durch die richtige Zahl ersetzt wird.</p> <pre><code>z = 10\ncounter = 0\nwhile z &gt; 0 and z &lt; 20:\n    print(z)\n    z = z ... 2\n    counter = counter + 1\n\nprint(...)\n</code></pre> Tipp <p>Was tut die Variable <code>counter</code>?</p> <p>Manche Schleifen enden nie...</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Die Variable <code>counter</code> z\u00e4hlt mit, wie oft der Schleifenrumpf durchlaufen wurde.</p> <p>die letzte Zeile lautet:</p> <pre><code>print(f\"Die Schleife wurde {counter}-Mal durchlaufen\"\n</code></pre> <code>+</code>:<code>-</code>:<code>*</code>:<code>/</code>: <pre><code>10\n12\n14\n16\n18\nDie Schleife wurde 5-Mal durchlaufen.\n</code></pre> <pre><code>10\n8\n6\n4\n2\nDie Schleife wurde 5-Mal durchlaufen.\n</code></pre> <pre><code>10\nDie Schleife wurde 1-Mal durchlaufen.\n</code></pre> <pre><code>10\n5.0\n2.5\n1.25\n0.625\n0.3125\n0.15625\n0.078125\n0.0390625\n0.01953125\n0.009765625\n0.0048828125\n0.00244140625\n0.001220703125\n0.0006103515625\n0.00030517578125\n0.000152587890625\n...\n5e-323\n2.5e-323\n1e-323\n5e-324\nDie Schleife wurde 1078-mal durchlaufen.\n</code></pre> <p>Die Schleife bricht ab, als die kleinsten <code>float</code>-Zahlen durch <code>2</code> geteilt wurde und <code>0</code> errechnet wurde (was mathematsich nicht korrekt ist). K\u00f6nnte Python Kommazahlen mathematisch korrekt berechnen w\u00fcrden wir hier in eine Endlosschleife geraten.</p> Summe von Eingaben bilden <p>Schreibe ein Programm, dass den Nutzer nach einer Zahl fragt. Das Programm hat intern in einer Variablen namens <code>summe</code> die Summe  aller bisher abgefragten Zahlen bilden und ausgeben.</p> <p>Die Konsolenausgabe soll also etwa so aussehen:</p> <pre><code>Bisherige Summe: 0\nGib eine Zahl ein: 3\nBisherige Summe: 3\nGib eine Zahl ein: 10\nBisherige Summe: 13\nGib eine Zahl ein: -20\nBisherige Summe: -7\nGib eine Zahl ein: \n</code></pre> Tipp Tipps ohne CodeCodevorlage mit Schleife <ul> <li>Lege dir zun\u00e4chst eine Variable <code>summe</code> an, in der du die Summenden zusammenz\u00e4hlen wirst. Was ist ein sinnvoller Startwert?</li> <li>Um eine Schleife dauerhaft f\u00fcr immer zu durchlaufen kann als Bedingung <code>True</code> genutzt werden.</li> <li>Mit <code>int(input(\"Gib eine Zahl ein: \"))</code> kann man den Nutzer um eine Zahl bitten.</li> <li>Addiere die Eingabe zu <code>summe</code> und speichere diese. </li> </ul> <pre><code>summe = ...\nwhile ...: \n    print(f\"Bisherige Summe: {summe}\")\n    eingabe = ...\n    summe = ...\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>summe = 0\nwhile True:\n    print(f\"Bisherige Summe: {summe}\")\n    eingabe = int(input(\"Gib eine Zahl ein: \"))\n    summe = summe + eingabe\n</code></pre> Bl\u00f6cke in Bl\u00f6cken <p>Gegeben Sei der folgende Code:</p> <pre><code>kunden = 0\nwhile not kunden == 19:\n    print(kunden)\n    kunden = kunden + 5\n\n    if kunden &gt;= 12:\n        kunden = kunden - 7\n</code></pre> <p>Erkl\u00e4ren Sie in ihren Worten, was hier passiert und schreiben Sie die Konsolenausgabe auf.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <ul> <li>In jedem Schleifendurchlauf soll <code>kunden</code> um <code>5</code> wachsen.</li> <li>Wenn <code>kunden</code> dann gr\u00f6\u00dfer als <code>12</code> ist, sollen <code>7</code> abgezogen werden.</li> <li>Wenn <code>kunden</code>gleich <code>19</code> ist, soll die Schleife beenden.</li> </ul> <p>Konsolenausgabe</p> <pre><code>0\n5\n10\n8\n6\n11\n9\n7\n5\n...\n</code></pre> <p>Da es ab der <code>5</code> wieder von Vorne losgeht, gilt niemals <code>kunden == 19</code> und somit bricht die Schleife niemals ab.</p> Spielerwechsel <p>Gegeben Sei der folgende Code:</p> <pre><code>jetziger_spieler = \"Hans\"\nn\u00e4chster_spieler = \"Clara\"\n\nwhile True:\n\n    ...\n\n    print(jetziger_spieler)\n</code></pre> <p>Ziel ist es den Code so zu erweitern, dass immer abwechselnd die Namen der beiden Spieler ausgegeben werden.</p> <p>Erwartete Ausgabe</p> <pre><code>Clara\nHans\nClara\nHans\nClara\nHans\n...\n</code></pre> Tipp <p>Errinnern Sie sich, wie man zwei Variablen miteinander vertauscht. Dazu gab es eine \u00dcbungsaufgabe namens Variableninhalte tauschen.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>jetziger_spieler = \"Hans\"\nn\u00e4chster_spieler = \"Clara\"\n\nwhile True:\n\n    zwischenspeicher = jetziger_spieler\n    jetziger_spieler = n\u00e4chster_spieler\n    n\u00e4chster_spieler = zwischenspeicher\n\n    print(jetziger_spieler)\n</code></pre>"},{"location":"content/loops/loops/#aufgaben","title":"Aufgaben","text":""},{"location":"content/loops/loops/#1-summe-von-1-bis-100","title":"1. Summe von 1 bis 100","text":"<p>Nutze eine while-Schleife, die die Zahlen 1, 2, 3, ... usw. so lange addiert, bis die Summe gr\u00f6\u00dfer als 100 ist. Bis zu welcher Zahl muss addiert werden? Wie gro\u00df ist die erste Summe \u00fcber 100?</p>"},{"location":"content/loops/loops/#2-input-erfragen","title":"2. Input erfragen","text":"<p>Schreibe ein Programm, dass den Nutzer immer wieder nach Zahlen fragt. Es soll nach jeder Eingabe  die Summe aller bisher erfragen Zahlen zur\u00fcckgeben.</p>"},{"location":"content/loops/loops/#3-fakultat","title":"3. Fakult\u00e4t","text":"<p>Verwende eine While-Schleife, um das kleinste <code>n</code> zu finden, sodass <code>n! &gt; 100_000</code> ist.</p>"},{"location":"content/loops/loops/#4-fast-endlose-schleife","title":"4. Fast endlose Schleife","text":"<p>Erstelle eine Schleife, die so lange Zufallszahlen zwischen 1 und 10 generiert und ausgibt, bis die Zahl 5 erscheint. Nutze dazu <code>random.randint(a,b)</code> (Doku)</p>"},{"location":"content/loops/loops/#5-fibonacci","title":"5. Fibonacci","text":"<p>Nutze eine While-Schleife, um die erste Zahl in der Fibonaccifolge zu finden, die gr\u00f6\u00dfer als 100 ist. Die Fibonaccifolge beginnt mit den beiden Zahlen <code>1</code> und <code>1</code>. Die n\u00e4chste Zahl der Folge ist die Summe der beiden vorherigen. Der Anfang der Fibonaccifolge sieht also wie folgt aus:</p> <pre><code>1, 1, 2, 3, 5, 8, 13, 21, 34, ...\n</code></pre> <p>L\u00f6sungen</p>"},{"location":"content/loops/loops/#einfuhrung-in-for-schleifen","title":"Einf\u00fchrung in <code>for</code>-Schleifen","text":"\ud83c\udfa6 Video  <p>Hier ist ein einfaches Beispiel f\u00fcr eine <code>for</code>-Schleife in Python (dr\u00fccke auf \"Next &gt;\" um den Code schrittweise  durchzuf\u00fchren):</p> <p>\ud83d\udcbb Link zum Onlinecompiler</p> <pre><code>fruechte = [\"Apfel\", \"Banane\", \"Kirsche\"]\nfor frucht in fruechte:\n    print(frucht)\nprint(\"fertig\")\n</code></pre> <p>Diese Schleife iteriert \u00fcber die Liste <code>fruechte</code> und gibt jede Frucht nacheinander aus. F\u00fcr jeden Durchlauf der Schleife nimmt <code>frucht</code> ein anderes Element der Liste an und steht im Schleifenk\u00f6rper zur Verf\u00fcgung.</p>"},{"location":"content/loops/loops/#syntax-einer-for-schleife","title":"Syntax einer <code>for</code>-Schleife","text":"<p>Die grundlegende Syntax einer <code>for</code>-Schleife in Python lautet:</p> <pre><code>for element in sequenz:\n# Anweisungen, die f\u00fcr jedes Element ausgef\u00fchrt werden\n</code></pre> <ul> <li><code>element</code>: Eine Variable, die den aktuellen Wert aus der Sequenz repr\u00e4sentiert.</li> <li><code>sequenz</code>: Die Sequenz, \u00fcber die iteriert wird (z. B. eine Liste, ein Tupel, eine Zeichenkette oder eine range, auf die wir gleich eingehen werden).</li> </ul>"},{"location":"content/loops/loops/#aufgaben_1","title":"Aufgaben","text":""},{"location":"content/loops/loops/#1-zahlen","title":"1. Z\u00e4hlen","text":"<p>Schreibe eine <code>for</code>-Schleife, die die Zahlen von 1 bis 10 ausgibt.</p>"},{"location":"content/loops/loops/#2-stadtetrip","title":"2. St\u00e4dtetrip","text":"<p>Erstelle eine Liste von St\u00e4dten und verwenden Sie eine <code>for</code>-Schleife, um jede Stadt auszugeben.</p>"},{"location":"content/loops/loops/#3-summierung","title":"3. Summierung","text":"<p>Schreibe eine <code>for</code>-Schleife, die die Summe aller Zahlen von 1 bis 10 berechnet.</p>"},{"location":"content/loops/loops/#4-langster-name","title":"4. L\u00e4ngster Name","text":"<p>Erstelle eine Liste von Namen und verwenden Sie eine <code>for</code>-Schleife, um den l\u00e4ngsten Namen in der Liste zu finden.</p>"},{"location":"content/loops/loops/#5-quadratzahlen","title":"5. Quadratzahlen","text":"<p>Schreibe eine <code>for</code>-Schleife, die die Quadratzahlen von 1 bis 10 ausgibt.</p>"},{"location":"content/loops/loops/#6-verdreht","title":"6. Verdreht","text":"<p>Schreibe eine <code>for</code>-Schleife, die die Buchstaben eines Wortes in umgekehrter Reihenfolge ausgibt.</p>"},{"location":"content/loops/loops/#7-fakultat","title":"7. Fakult\u00e4t","text":"<p>Schreibe eine <code>for</code>-Schleife, die die Fakult\u00e4t (n!) einer gegebenen Zahl <code>n</code> berechnet. Zur Errinnerung:</p> <pre><code>n! := n \u22c5 (n-1) \u22c5 (n-2) \u22c5 ... \u22c5 2 \u22c5 1\n6! = 6\u22c55\u22c54\u22c53\u22c52\u22c51 = 720 \n1! = 1\n0! = 1\n</code></pre>"},{"location":"content/loops/loops/#8-thermometer-fur-amerikaner","title":"8. Thermometer f\u00fcr Amerikaner","text":"<p>Erstelle eine Liste von Temperaturen in Celsius und verwenden Sie eine <code>for</code>-Schleife, um jede nacheinander in Fahrenheit umzuwandeln und auszugeben. Recherchiere die entsprechende Formel.</p>"},{"location":"content/loops/loops/#9-vokale","title":"9. Vokale","text":"<p>Schreibe eine <code>for</code>-Schleife, die die Anzahl der Vokale in einem gegebenen Wort z\u00e4hlt.</p>"},{"location":"content/loops/loops/#10-haufigkeit","title":"10. H\u00e4ufigkeit","text":"<p>Schreibe eine <code>for</code>-Schleife, die einen Text durchl\u00e4uft und z\u00e4hlt, wie oft ein bestimmtes Wort in diesem Text vorkommt.</p> <p>L\u00f6sungen</p>"},{"location":"content/loops/loops/#iteration-uber-feste-zahlenbereiche-mit-range","title":"Iteration \u00fcber feste Zahlenbereiche mit <code>range</code>","text":"\ud83c\udfa6 Video  <p>M\u00f6chte man \u00fcber einen bestimmten Zahlenraum iterieren, so verwendet man in Python die <code>range</code>-Funktion. Es gibt drei  M\u00f6glichkeiten <code>range</code> aufzurufen:</p> Anazahl Parameter Aufruf Bedeutung Beispiel Entsprechende Liste 1 <code>range(end)</code> Die Range enth\u00e4lt die Integer von <code>0</code> bis ausschlie\u00dflich <code>end</code>. <code>range(3)</code> <code>[0,1,2]</code> 2 <code>range(start, end)</code> Die Range enth\u00e4lt die Integer von <code>start</code> bis ausschlie\u00dflich <code>end</code>. <code>range(12, 15)</code> <code>[12,13,14]</code> 3 <code>range(start, end, step_size)</code> Die Range enth\u00e4lt die Integer von <code>start</code> bis ausschlie\u00dflich <code>end</code>. und geht dabei in Schritten der Gr\u00f6\u00dfe <code>step_size</code>. <code>range(3, 10, 2)</code> <code>[3,5,7,9]</code>"},{"location":"content/loops/loops/#aufgabe-ranges-vorhersagen","title":"Aufgabe: Ranges vorhersagen","text":"<p>Welche listen werden in jeder Zeile jeweils erzeugt?</p> <p><pre><code>list(range(10)) \nlist(range(1, 11))\nlist(range(0, 30, 5))\nlist(range(0, 10, 3))\nlist(range(0, -10, -1))\nlist(range(0)) \nlist(range(1, 0))\n</code></pre> L\u00f6sung</p>"},{"location":"content/loops/loops/#nutzen-von-ranges","title":"Nutzen von Ranges","text":"<p>Ranges wirken auf den ersten Blick sehr \u00e4hnlich zu Listen. Schaut man sie sich genauer an, stellt man sogar fest, dass sie sogar Indizierung und Slicing erlauben. Es gibt zwei wichtige Vorteile:</p> <ul> <li>Ranges k\u00f6nnen leicht instanziiert werden (wie w\u00fcrdest du eine Liste aller geraden Zahlen bis 1000 in Python sonst erstellen?),</li> <li>Ranges sparen Speicherplatz. Denn die Zahlen, die in der Range sind, werden nicht alle zun\u00e4chst im Speicher hinlegt, sondern erst bei Bedarf bereitgestellt (indem sie jeweils berechnet werden).</li> </ul> <p>Wir k\u00f6nnen Ranges so einfach f\u00fcr Schleifeniterationen \u00fcber einen Integer-Zahlenraum nutzen:</p> <p>\ud83d\udcbb Link zum Onlinecompiler</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre>  \ud83c\udfa6 Video"},{"location":"content/loops/loops/#vorzeitiges-abbrechen-einer-schleife","title":"Vorzeitiges Abbrechen einer Schleife","text":"\ud83c\udfa6 Video  <p>In vielen F\u00e4llen sucht man einfach einen Wert in einem Bereich oder ein bestimmtes Element in einer List. Sobald man dieses gefunden hat, kann man die Schleife eigentlich abbrechen. Daf\u00fcr nutzt man das Keyword <code>break</code>:</p> <p>\ud83d\udcbb Link zum Onlinecompiler</p> <pre><code>for i in range(0, 10):\n    print(i)\n    if i == 5:\n        break\nprint(\"Ende\")\n</code></pre> <p>Sobald die Bedingung <code>i == 5</code> wahr wird, sorgt <code>break</code> daf\u00fcr, dass wir die Schleifen verlassen. Damit sparen wir uns 5 weitere Durchl\u00e4ufe. Bei komplexen Problemstellungen kann man damit sehr viel Zeit sparen.</p> <p>Auf der anderen Seite gibt es aber auch F\u00e4lle, in denen man nicht die ganze Schleife beenden will, sondern nur den aktuellen Durchlauf. Daf\u00fcr nutzt man das Keyword <code>continue</code>.</p> <p>\ud83d\udcbb Link zum Onlinecompiler</p> <pre><code>for i in range(0, 10):\n    if 3 &lt;= i &lt;= 5:\n        continue\n    print(i)\n</code></pre> <p>Wieso? F\u00fcr jeder Zahl zwischen 0 und 10 wird \u00fcberpr\u00fcft, ob diese Zahl zwischen 3 und 5 liegt. Ist das der Fall, springt der Code direkt an den Schleifenanfang (wegen des <code>continue</code>), statt die Zeile 4 auszuf\u00fchren. direkt zum n\u00e4chsten Durchlauf. In allen anderen F\u00e4llen wird die Zahl auf der Konsole ausgegeben.</p> <p>Sehr h\u00e4ufig wird break in Kombination mit while-Schleifen verwendet. Wieso? Weil es so einfach m\u00f6glich ist, Endlosschleifen zu erzeugen, die unter bestimmten Bedingungen abbrechen, die nicht im Schleifenkopf \u00fcberpr\u00fcft werden.  </p> <p>Zum Beispiel:</p> <pre><code>while True:\n    eingabe = input()\n    if eingabe == \"C\":\n        break\n\n    print(f\"Deine Eingabe in gro\u00df: {eingabe.upper()}\")\n\nprint(\"Bye Bye\")\n</code></pre> <p>Durch <code>while True:</code> l\u00e4uft diese Schleife theoretisch endlos lange, weil die Bedingung immer wahr ist. Bei jedem Schleifendurchlauf wird der Nutzer nach einer Eingabe gefragt. Sobald der Nutzer \"C\" eingibt, wird die Schleife durch den Befehl <code>break</code> verlassen und das Programm kann normal weiterlaufen.</p>"},{"location":"content/loops/loops/#else-zweig-bei-while-und-for-schleifen-in-python","title":"Else-Zweig bei While- und For-Schleifen in Python","text":"\ud83c\udfa6 Video  <p>In Python k\u00f6nnen sowohl <code>while</code>- als auch <code>for</code>-Schleifen mit einem optionalen <code>else</code>-Zweig versehen werden. Dieser Teil der Schleife wird ausgef\u00fchrt, wenn die Schleife auf normale Weise beendet wird, d.h., nicht durch ein <code>break</code>-Statement unterbrochen wird.</p> <p>\ud83d\udcbb Link zum Onlinecompiler</p> <pre><code>summe = 0\nfor number in [\"43\", \"1234\", \"33.4\", \"10\"]:\n    if not number.isdigit():\n        print(f\"{number} is no integer! Abort\")\n        break\n    summe += int(number)\nelse:\n    print(f\"Die Summe aller Zahlen ist {summe}.\")\nprint(\"Ende\")\n</code></pre>"},{"location":"content/loops/loops/#verschachtelte-schleifen","title":"Verschachtelte Schleifen","text":"\ud83c\udfa6 Video  <p>Es ist auch m\u00f6glich Schleifen in Schleifen zu verwenden. Dies sieht man tats\u00e4chlich sehr h\u00e4ufig, da es oft verschachtelte Strukturen gibt, die durchlaufen werden sollen, z.B. Listen von Listen.</p> <p>\ud83d\udcbb Link zum Onlinecompiler</p> <pre><code>list_of_lists = [[1,2,3], [40,50,60], [700,800,900]]\n\nsumme = 0\n\nfor sub_list in list_of_lists:\n    for element in sub_list:\n        summe += element\n    print(f\"Zwischenergebnis: {summe}\")        \nprint(f\"Endergebnis: {summe}\")\n</code></pre>"},{"location":"content/loops/loops/#aufgabe-produktsummen","title":"Aufgabe: Produktsummen","text":"<p>Was ist das Ergebnis des folgenden Codes. Versuche in eigenen Worten zu beschreiben, was der Code tut. Tipp: F\u00fchre den Code mit dem Debugger aus.</p> <pre><code>result = 1\nfor sub_list in [[4,3,2], [5,6,7]]:\n    subsum = 0\n    for element in sub_list:\n        subsum += element\n    result *= subsum\nprint(result)\n</code></pre>"},{"location":"content/loops/loops/#aufgabe-summenprodukt","title":"Aufgabe: Summenprodukt","text":"<p>Schreibe Code, der die Liste <code>[[1,2,3], [-3, 4, 6, 9, 3], [0], [4,4], []]</code> durchl\u00e4uft. Die Elemente jeder inneren Liste sollen multipliziert werden und diese Zwischenergebnisse dann addiert werden.</p> <p>L\u00f6sung</p>"},{"location":"content/loops/loops/#anspruchsvolle-aufgaben","title":"Anspruchsvolle Aufgaben","text":""},{"location":"content/loops/loops/#aufgabe-1-finden","title":"Aufgabe 1: Finden","text":"<p>Schreibe ien Programm, das in einem Text das erste Wort findet, l\u00e4nger als 8 Buchstaben ist und dieses zur\u00fcckgibt. Schreibe eine Antwort mit und eine ohne die Verwendung von <code>continue</code>.</p>"},{"location":"content/loops/loops/#aufgabe-2-benutzerdefinierte-passwortuberprufung","title":"Aufgabe 2: Benutzerdefinierte Passwort\u00fcberpr\u00fcfung","text":"<p>Schreibe ein Programm, das den Benutzer zur Eingabe eines Passworts auffordert. Das Passwort muss bestimmte Kriterien erf\u00fcllen (z.B. mindestens 8 Zeichen lang, enth\u00e4lt sowohl Zahlen als auch Buchstaben). Das Programm soll dem Benutzer mitteilen, ob das eingegebene Passwort g\u00fcltig ist oder nicht. Wenn das Passwort nicht g\u00fcltig ist, soll das Programm spezifizieren, welche Kriterien nicht erf\u00fcllt wurden.</p>"},{"location":"content/loops/loops/#aufgabe-3-einfacher-zahlenraten","title":"Aufgabe 3: Einfacher Zahlenraten","text":"<p>Erstelle ein Spiel, bei dem der Benutzer versuchen muss, eine zuf\u00e4llig generierte Zahl zwischen 1 und 100 zu erraten. Nach jeder Eingabe gibt das Programm an, ob die geratene Zahl zu hoch oder zu niedrig ist. Der Benutzer hat eine begrenzte Anzahl von Versuchen (z.B. 10). Nach dem Spiel gibt das Programm an, ob der Benutzer gewonnen hat und wie viele Versuche ben\u00f6tigt wurden.</p>"},{"location":"content/loops/loops/#aufgabe-4-bestellung-in-einem-virtuellen-cafe","title":"Aufgabe 4: Bestellung in einem virtuellen Caf\u00e9","text":"<p>Simuliere ein einfaches Bestellsystem f\u00fcr ein Caf\u00e9. Das Programm listet verschiedene Getr\u00e4nke und Speisen mit ihren Preisen auf. Der Benutzer kann Artikel ausw\u00e4hlen und die gew\u00fcnschte Menge angeben. Das Programm f\u00fchrt eine laufende Summe der Bestellung. Nachdem der Benutzer seine Auswahl abgeschlossen hat, zeigt das Programm die Gesamtsumme der Bestellung an und fragt, ob der Benutzer bar oder mit Karte zahlen m\u00f6chte.</p> <pre><code>menu = {\"Kaffee\": 2.50, \"Tee\": 2.00, \"Kuchen\": 3.00}\n</code></pre> <p>L\u00f6sungen</p>"},{"location":"content/loops/solutions/","title":"L\u00f6sungen","text":""},{"location":"content/loops/solutions/#for-schleifen","title":"for-Schleifen","text":"<p>Nat\u00fcrlich, hier sind die L\u00f6sungen zu den \u00dcbungsaufgaben zu <code>for</code>-Schleifen:</p>"},{"location":"content/loops/solutions/#1-zahlen","title":"1. Z\u00e4hlen","text":"<pre><code>for zahl in [1,2,3,4,5,6,7,8,9,10]:\n   print(zahl)\n</code></pre>"},{"location":"content/loops/solutions/#2-stadtetrip","title":"2. St\u00e4dtetrip","text":"<pre><code>staedte = [\"Berlin\", \"Paris\", \"London\", \"New York\"]\nfor stadt in staedte:\n   print(stadt)\n</code></pre>"},{"location":"content/loops/solutions/#3-summierung","title":"3. Summierung","text":"<pre><code>summe = 0\nfor zahl in [1,2,3,4,5,6,7,8,9,10]:\n   summe += zahl\nprint(summe)\n</code></pre>"},{"location":"content/loops/solutions/#4-langster-name","title":"4. L\u00e4ngster Name","text":"<pre><code>namen = [\"Anna\", \"Max\", \"Benjamin\", \"Alexandra\"]\nlaengster_name = \"\"\nfor name in namen:\n   if len(name) &gt; len(laengster_name):\n       laengster_name = name\nprint(\"L\u00e4ngster Name:\", laengster_name)\n</code></pre>"},{"location":"content/loops/solutions/#5-quadratzahlen","title":"5. Quadratzahlen","text":"<pre><code>for zahl in range(1, 11):\n   quadrat = zahl ** 2\n   print(quadrat)\n</code></pre>"},{"location":"content/loops/solutions/#6-verdreht","title":"6. Verdreht","text":"<pre><code>wort = \"Python\"\nfor buchstabe in wort[::-1]:\n   print(buchstabe)\n</code></pre>"},{"location":"content/loops/solutions/#7-fakultat","title":"7. Fakult\u00e4t","text":"<pre><code>n = 5\nfaktor = 1\nfor zahl in range(1, n + 1):\n    faktor *= zahl\nprint(f\"Fakult\u00e4t von {n} ist {faktor}\")\n</code></pre>"},{"location":"content/loops/solutions/#8-thermometer-fur-amerikaner","title":"8. Thermometer f\u00fcr Amerikaner","text":"<pre><code>temperaturen_celsius = [0, 10, 25, 32, 100]\nfor celsius in temperaturen_celsius:\n    fahrenheit = (celsius * 9/5) + 32\n    print(f\"{celsius}\u00b0C entspricht {fahrenheit}\u00b0F\")\n</code></pre>"},{"location":"content/loops/solutions/#9-vokale","title":"9. Vokale","text":"<pre><code>wort = \"Python\"\nanzahl_vokale = 0\nfor buchstabe in wort:\n    if buchstabe.lower() in \"aeiou\":\n        anzahl_vokale += 1\nprint(f\"Anzahl der Vokale im Wort '{wort}': {anzahl_vokale}\")\n</code></pre>"},{"location":"content/loops/solutions/#10-haufigkeit","title":"10. H\u00e4ufigkeit","text":"<pre><code>text = \"Python ist eine Programmiersprache, und Python ist gro\u00dfartig.\"\ngesuchtes_wort = \"Python\"\nanzahl = 0\nwoerter = text.split()\nfor wort in woerter:\n    if wort == gesuchtes_wort:\n        anzahl += 1\nprint(f\"Anzahl von '{gesuchtes_wort}' im Text: {anzahl}\")\n</code></pre>"},{"location":"content/loops/solutions/#aufgaben-ranges","title":"Aufgaben Ranges","text":""},{"location":"content/loops/solutions/#aufgabe-ranges-vorhersagen","title":"Aufgabe: Ranges vorhersagen","text":"<pre><code>list(range(10)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist(range(1, 11)) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist(range(0, 30, 5)) # [0, 5, 10, 15, 20, 25]\nlist(range(0, 10, 3)) # [0, 3, 6, 9]\nlist(range(0, -10, -1)) # [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\nlist(range(0)) # []\nlist(range(1, 0)) # []\n</code></pre>"},{"location":"content/loops/solutions/#while-schleifen","title":"while-Schleifen","text":""},{"location":"content/loops/solutions/#1-summe-von-1-bis-100","title":"1. Summe von 1 bis 100","text":"<pre><code>summe = 0\ni = 1\nwhile i &lt;= 100:\n    summe += i\n    i += 1\nprint(f\"Die Summe von 1 bis {i} ist {summe}\")\n</code></pre>"},{"location":"content/loops/solutions/#2-input-erfragen","title":"2. Input erfragen","text":"<pre><code>summe = 0\nwhile True:\n    next = input(\"Bitte gib eine Zahl ein: \")\n    summe += next\n    print(f\"In der Summe bisher insgesamt: {summe}\")\n</code></pre>"},{"location":"content/loops/solutions/#3-fakultat","title":"3. Fakult\u00e4t","text":"<pre><code>at_least = 100_000\nfakultaet = 1\ni = 1\nwhile fakultaet &lt;= at_least:\n    fakultaet *= i\n    i += 1\n\nprint(f\"Das kleinste n, sodass n! &gt; {at_least} ist {i} und zwar {i}! = {fakultaet}\")\n</code></pre>"},{"location":"content/loops/solutions/#4-fast-endlose-schleife","title":"4. Fast endlose Schleife","text":"<pre><code>import random\n\nzahl = 0\nwhile zahl != 5:\n    zahl = random.randint(1, 10)\n    print(zahl)\nprint(\"Das wars!\")\n</code></pre>"},{"location":"content/loops/solutions/#5-fibonacci","title":"5. Fibonacci","text":"<pre><code>f_1 = 1\nf_2 = 1\nat_least = 100\n\nwhile f_2 &lt; at_least:\n    # Berechne die n\u00e4chste Fibonaccizahl\n    f_3 = f_1 + f_2\n\n    # Setze die aktuelle und letzte Fibonaccizahl fest.\n    f_1 = f_2\n    f_2 = f_3\n\nprint(f\"Die Zahl {f_3} ist die erste Fibonaccizahl, die gr\u00f6\u00dfer als  {at_least}\")\n</code></pre>"},{"location":"content/loops/solutions/#verschachtelte-schleifen","title":"Verschachtelte Schleifen","text":""},{"location":"content/loops/solutions/#aufgabe-produktsummen","title":"Aufgabe: Produktsummen","text":"<pre><code>result = 1\nfor sub_list in [[4,3,2], [5,6,7]]:\n    subsum = 0\n    for element in sub_list:\n        subsum += element\n    result *= subsum\nprint(result)\n</code></pre> \\[1 \u22c5 (4+3+2) \u22c5 (5+6+7) = 1 \u22c5 9 \u22c5 18 = 162\\]"},{"location":"content/loops/solutions/#aufgabe-summenprodukt","title":"Aufgabe: Summenprodukt","text":"<pre><code>super_list = [[1,2,3], [-3, 4, 6, 9, 3], [0], [4,4], []]\nresult = 0\nfor sub_list in super_list:\n    subprodukt = 1\n    for element in sub_list:\n        subprodukt *= element\n    if len(sub_list) == 0: # Wenn keine Elemente in der Liste sind, soll 0 als Summand genutzt werden, nicht 1.\n        subprodukt = 0\n    result += subprodukt\nprint(result)\n</code></pre> \\[0 + (1\u22c51\u22c52\u22c53) + (1\u22c5(-3)\u22c54\u22c56\u22c59\u22c53) + (1\u22c50)+ (1\u22c54\u22c54) + 0 = 0 + 6 + 648 + 0 + 8 + 0 = 662\\]"},{"location":"content/loops/solutions/#anspruchsvolle-aufgaben","title":"Anspruchsvolle Aufgaben","text":""},{"location":"content/loops/solutions/#aufgabe-1-finden","title":"Aufgabe 1: Finden","text":"<pre><code>text = \"Schreibe ien Programm, das in einem Text das erste Wort findet, l\u00e4nger als 8 Buchstaben ist und dieses zur\u00fcckgibt.\"\nfor word in text.split():\n    if len(word) &gt; 8:\n        break\nelse:\n    word = \"\"\nprint(f\"Erstes Wort mit mehr als 8 Buchstaben: {word}\")\n</code></pre> <p>Code ohne  <code>continue</code> <pre><code>text = \"Schreibe ien Programm, das in einem Text das erste Wort findet, l\u00e4nger als 8 Buchstaben ist und dieses zur\u00fcckgibt.\"\nfirst_word = \"\"\nfor word in text.split():\n    if not first_word and len(word) &gt; 8:\n        first_word = word\n\nprint(f\"Erstes Wort mit mehr als 8 Buchstaben: {first_word}\")\n</code></pre></p>"},{"location":"content/loops/solutions/#aufgabe-2-benutzerdefinierte-passwortuberprufung","title":"Aufgabe 2: Benutzerdefinierte Passwort\u00fcberpr\u00fcfung","text":"<pre><code>password = input(\"Bitte gib ein Passwort ein: \")\n\n# Pr\u00fcfe, ob String lang genug ist\nmin_length_ok = len(password) &gt;= 8\n\n# Pr\u00fcfe, ob wenigstens eine Zahl enthalten ist\ndigit_found = False\nfor char in password:\n    if char.isdigit():\n        digit_found = True\n        break\n\n# Pr\u00fcfe, ob wenigstens ein Buchstabe enthalten ist\nchar_found = False\nfor char in password:\n    if char.isalpha():\n        char_found = True\n        break\n\nif min_length_ok and digit_found and char_found:\n    print(\"Password ok\ud83d\udc9a\")\nelse:\n    print(\"Password not ok\ud83d\ude30\")\n\nif not min_length_ok:\n    print(\"Es ist zu kurz.\")\nif not digit_found:\n    print(\"Es fehlt mindestens eine Ziffer.\")\nif not char_found:\n    print(\"Es fehlt mindestens ein Buchstabe.\")\n</code></pre>"},{"location":"content/loops/solutions/#aufgabe-3-einfacher-zahlenraten","title":"Aufgabe 3: Einfacher Zahlenraten","text":"<pre><code>import random\n\nzahl = random.randint(1, 100)\n\nversuch = 1\nmax_versuche = 10\n\nwhile versuch &lt; max_versuche:\n    raten = int(input(\"Rate die Zahl: \"))\n\n    if raten == zahl:\n        print(f\"Richtig! Du hast die Zahl in {versuch} Versuchen erraten.\")\n        break\n    elif raten &lt; zahl:\n        print(\"Die gesuchte Zahl ist h\u00f6her.\")\n    else:\n        print(\"Die gesuchte Zahl ist niedriger.\")\n\n    versuch += 1\nelse:\n    print(f\"Leider falsch. Die gesuchte Zahl war {zahl}.\")\n</code></pre>"},{"location":"content/loops/solutions/#aufgabe-4-bestellung-in-einem-virtuellen-cafe","title":"Aufgabe 4: Bestellung in einem virtuellen Caf\u00e9","text":"<pre><code>menu = {\"Kaffee\": 2.50, \"Tee\": 2.00, \"Kuchen\": 3.00}\nbestellung = []\nsumme = 0\n\nprint(\"Men\u00fc:\")\nfor artikel, preis in menu.items():\n    print(f\"{artikel}: {preis} Euro\")\n\nwhile True:\n    artikel = input(\"W\u00e4hle einen Artikel (oder 'fertig' zum Abschlie\u00dfen): \")\n    if artikel.lower() == \"fertig\":\n        break\n    elif artikel in menu:\n        menge = int(input(f\"Wie viele von {artikel} m\u00f6chtest du? \"))\n        summe += menu[artikel] * menge\n    else:\n        print(\"Artikel nicht im Men\u00fc.\")\n\nprint(f\"Gesamtsumme: {summe} Euro\")\nzahlung = input(\"Zahlst du bar oder mit Karte? \")\nprint(f\"Bezahlt mit {zahlung}. Vielen Dank f\u00fcr deine Bestellung!\")\n</code></pre>"},{"location":"content/oop/attributes/attributes/","title":"Attribute","text":"Video <p>Bisher hatten unsere Instanzen noch keine Eigenschaften. Eigenschaften werden auch als Attribute bezeichnet.</p>"},{"location":"content/oop/attributes/attributes/#dynamische-attribute","title":"Dynamische Attribute","text":"<p>Wir k\u00f6nnen unseren Instanzen h\u00e4ndisch Attribute hinzuf\u00fcgen:</p> <pre><code>class Roboter:\n    pass\n\n\nx = Roboter()\ny = Roboter()\n\nx.baujahr = 1990\nx.name = 'Marvin'\ny.baujahr = 2005\ny.name = 'Justin'\n\nprint(f'{x.name} ist {2024 - x.baujahr} Jahre alt')\nprint(f'{y.name} ist {2024 - y.baujahr} Jahre alt')\n</code></pre> <p>Beachte, dass jede Instanz ihre eigenen Attribute hat. Da wir den Instanzen erst nach deren Erstellung Attribute hinzugef\u00fcgt haben, nennt man diese auch dynamische Attribute. Wir werden sp\u00e4ter sehen, wie man schon bei der Erzeugung einer Instanz die Attribute festlegen kann.</p> <p>Wenn wir alle Attribute einer Instanz ansehen wollen, k\u00f6nnen wir das mit <code>x.__dict__</code> tun:</p> <pre><code>class Roboter:\n    pass\n\n\nx = Roboter()\ny = Roboter()\n\nx.baujahr = 1990\nx.name = 'Marvin'\ny.baujahr = 2005\ny.name = 'Justin'\n\nprint(x.__dict__)\nprint(y.__dict__)\n</code></pre> Durchschnittsnote berechnen <p>Erstelle eine Klasse <code>Student</code>. Erzeuge eine <code>Student</code> Instanz. Setze bei der Instanz die Attribute <code>Mathenote</code>, <code>Englischnote</code> und <code>Deutschnote</code>. Schreibe dann Code, der diese Attribute auslie\u00dft und die Durchschnittsnote berechnet.</p> L\u00f6sung <pre><code>class Student:\n    pass\n\n\nanna = Student()\nanna.Mathenote = 2\nanna.Englischnote = 1\nanna.Deutschnote = 1\n\ndurchschnitt = (anna.Mathenote + anna.Englischnote + anna.Deutschnote) / 3\nprint(durchschnitt)\n</code></pre> <p>Dieser Code definiert eine <code>Student</code> Klasse, erstellt eine Instanz namens <code>anna</code>,  setzt ihre Noten als Attribute und berechnet dann den Durchschnitt dieser Noten.</p> Passende Attribute finden <p>Im folgenden Code soll die Summe aller Felder berechnet werden, die das Wort <code>spending</code> enthalten. Dazu soll <code>__dict__</code> und eine Schleife verwendet werden. Wie sieht die L\u00f6sung mit einer Listcomprehension aus?</p> <pre><code>class Buchhaltung:\n    pass\n\nbooking = Buchhaltung()\nbooking.food_spending = 100\nbooking.car_spending = 230\nbooking.february_income = 200\n</code></pre> L\u00f6sung <pre><code>class Buchhaltung:\n    pass\n\n\nbooking = Buchhaltung()\nbooking.food_spending = 100\nbooking.car_spending = 230\nbooking.february_income = 200\n\n# L\u00f6sung mit Schleife\nsumme = 0\nfor name, value in booking.__dict__.items():\n    if 'spending' in name:\n        summe += value\n\nprint(summe)\n\n# L\u00f6sung mit Listcomprehension\nprint(sum(value for name, value in booking.__dict__.items() if 'spending' in name))\n</code></pre> <p>Die erste L\u00f6sung verwendet eine Schleife, um durch alle Attribute zu iterieren und die Summe zu berechnen. Die zweite L\u00f6sung nutzt eine Listcomprehension, um dasselbe Ergebnis in einer kompakteren Form zu erzielen.</p> Instanz als Parameter \u00fcbergeben <p>Erstelle eine Klasse <code>Person</code>. Erzeuge <code>Person</code> Instanzen und setze einen Namen. Erstelle eine Funktion <code>getInitials(person)</code>, die eine Klasse der Instanz <code>Person</code> erwartet und die ersten Buchstaben des Namens zur\u00fcckliefert. Z.B.:</p> <pre><code>anna = Person()\nanna.name = \"Anna Lena Zitrova\"\n\nkarl = Person()\nkarl.name = \"Karl Gustav\"\n\n\ndef getInitials(person):\n    ...\n\n\nprint(getInitials(anna)) # 'ALZ'\nprint(getInitials(karl)) # 'KG'\n</code></pre> Tipp <p>Nutze die Methoden <code>split</code> und <code>join</code>. Am einfachsten ist das mit List-Comprehension. Ja, tats\u00e4chlich.</p> L\u00f6sung <pre><code>class Person:\n    pass\n\nanna = Person()\nanna.name = \"Anna Lena Zitrova\"\n\nkarl = Person()\nkarl.name = \"Karl Gustav\"\n\n\ndef getInitials(person):\n    return \"\".join(word[0] for word in person.name.split())\n\nprint(getInitials(anna)) # 'ALZ'\nprint(getInitials(karl)) # 'KG'\n</code></pre> <p>Dieser Code definiert eine <code>Person</code> Klasse, erstellt Instanzen mit Namen und implementiert die <code>getInitials</code> Funktion, die die Initialen einer Person zur\u00fcckgibt.</p>"},{"location":"content/oop/attributes/attributes/#klassenattribute","title":"Klassenattribute","text":"Video <p>Wir k\u00f6nnen auch der Klasse Attribute hinzuf\u00fcgen. Lassen den folgenden Code ausf\u00fchren, in der das Klassenattribut <code>marke</code> hinzugef\u00fcgt wird:</p> <pre><code>class Roboter:\n    marke = 'VW'\n\nx = Roboter()\ny = Roboter()\n\nx.name = 'Marvin'\n\nprint(x.marke)\nprint(y.marke)\nprint(Roboter.marke)\n\nprint(f'Attribute von x: {x.__dict__}')\nprint(f'Attribute von y: {y.__dict__}')\n</code></pre> <ul> <li>Alle Instanzen der Klasse k\u00f6nnen auf das Klassenattribut zugreifen.</li> <li>Man kann \u00fcber die Klasse auf das Klassenattribut zugreifen.</li> <li>Das Klassenattribut ist kein Attribut der Instanz.</li> </ul> <p>Wir k\u00f6nnen das Klassenattribut auch dynamisch setzen:</p> <pre><code>class Roboter:\n    pass\n\nRoboter.marke = 'VW'\n\n...\n</code></pre> <p>In anderen Programmiersprachen sagt zu Klassenattributen \"statische Felder\" und zu Attributen der Instanz \"Felder\". Die M\u00f6glichkeit Attribute oder Klassenattribute dynamisch nach Instanziierung hinzuzuf\u00fcgen,  gibt es jedoch nicht bei allen Programmiersprachen.</p> Klassenattribute gelten f\u00fcr alle Instanzen <p>Sage voraus, was bei folgendem Code auf der Konsole erscheint. F\u00fchre den Code aus und begr\u00fcnde die Ausgabe.</p> <pre><code>class Roboter:\n    marke = 'VW'\n\nx = Roboter()\ny = Roboter()\n\nprint(x.marke)\nprint(y.marke)\nprint(Roboter.marke)\n\nRoboter.marke = 'Porsche'\n\nprint(x.marke) \nprint(y.marke)\nprint(Roboter.marke)\n</code></pre> <p>Link zum Onlinecompiler\ud83d\udcbb</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Ein Klassenattribut gilt f\u00fcr alle Instanzen einer Klasse. Wenn man es \u00e4ndert, \u00e4ndert man es f\u00fcr alle, da sie alle das Attribut an einer Stelle nachlesen.</p> <p>Die Ausgabe wird sein:</p> <pre><code>VW\nVW\nVW\nPorsche\nPorsche\nPorsche\n</code></pre> <p>Erkl\u00e4rung: - Zuerst wird das Klassenattribut 'marke' mit 'VW' initialisiert. - Alle Instanzen (x und y) sowie die Klasse selbst greifen auf diesen Wert zu. - Nach der \u00c4nderung des Klassenattributs auf 'Porsche' wird dieser neue Wert f\u00fcr alle Instanzen und die Klasse sichtbar.</p> Bei Unklarheit nachfragen <p>Was tut die <code>hasattr</code> Methode in diesem Codebeispiel? Was passiert, wenn man den if-Block entfernt?</p> <pre><code>class Roboter:\n    marke = \"VW\"\n\nx = Roboter()\n\nif not hasattr(x, \"speed\"):\n    x.speed = 0\n\nprint(f\"Roboter f\u00e4hrt {x.speed} km/h\")\n\nif hasattr(x, \"marke\"):\n    print(f\"Roboter hat die Marke {x.marke}\")\n</code></pre> <p>Neben <code>hasattr</code> gibt es die vorimplementierten Funktionen <code>getattr</code> und <code>setattr</code>.  Finde heraus, was diese Funktionen tun und \u00e4ndere den obigen Code so, dass diese Funktionen verwendet werden.</p> <p>Was macht der dritte Parameter von <code>getattr</code>?</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p><code>hasattr</code> pr\u00fcft, ob die Instanz ein Attribut oder Klassenattribut besitzt.</p> <p><code>setattr</code> setzt ein Attribut.</p> <p><code>getattr</code> gibt einem das Attribut mit dem gegebenen Namen zur\u00fcck. Der dritte Parameter ist optional und wird  zur\u00fcckgegeben, wenn kein Attribut des angegebenen Namens gefunden wurde.</p> <p>Der ge\u00e4nderte Code sieht wie folgt aus:</p> <pre><code>class Roboter:\n    marke = \"VW\"\n\nx = Roboter()\n\nif not hasattr(x, \"speed\"):\n    setattr(x, \"speed\", 0)\n\nprint(f\"Roboter f\u00e4hrt {getattr(x, 'speed')} km/h\")\n\nif hasattr(x, \"marke\"):\n    print(f\"Roboter hat die Marke {getattr(x, 'marke')}\")\n</code></pre> Auch Funktionen sind Instanzen <p>Im Folgenden ist eine Funktion <code>say_hello</code> definiert. F\u00fchre den folgenden Code aus und erkl\u00e4re das Verhalten. Was ist der Typ von <code>say_hello</code>?</p> <pre><code>def say_hello():\n    if not hasattr(say_hello, \"count\"):\n        say_hello.count = 0\n\n    say_hello.count += 1\n\n    print(f\"Hallo zum {say_hello.count}-ten Mal.\")\n\nsay_hello()\nsay_hello()\nsay_hello()\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Innerhalb der Funktion wird ein Attribut <code>count</code> von der Funktion selbst angelegt, beschrieben und ausgelesen. Der Output \u00e4ndert sich bei jedem Aufruf:</p> <pre><code>Hallo zum 1-ten Mal.\nHallo zum 2-ten Mal.\nHallo zum 3-ten Mal.\n</code></pre> <p>Der Typ von <code>say_hello</code> ist <code>function</code>. In Python sind Funktionen auch Objekte und k\u00f6nnen Attribute haben.</p>"},{"location":"content/oop/attributes/solutions/","title":"Solutions","text":""},{"location":"content/oop/attributes/solutions/#aufgabe-auch-funktionen-sind-instanzen","title":"Aufgabe: Auch Funktionen sind Instanzen","text":"<p>Innerhalb der Funktion, wird ein Attribut <code>count</code> von der Funktion (!) angelegt, beschrieben und ausgelesen. Dann sehen wir immer wechselnden Output:</p> <pre><code>def say_hello():\n    if not hasattr(say_hello, \"count\"):\n        say_hello.count = 0\n\n    say_hello.count += 1\n\n    print(f\"Hallo zum {say_hello.count}-ten Mal.\")\n\nsay_hello() # Hallo zum 1-ten Mal.\nsay_hello() # Hallo zum 2-ten Mal.\nsay_hello() # Hallo zum 3-ten Mal.\n</code></pre>"},{"location":"content/oop/class_static_methods/class_static_methods/","title":"Class- &amp; Static Methods","text":"<p>In Python gibt es zwei besondere Arten von Methoden, die direkt einer Klasse zugeordnet sind: statische Methoden und Klassenmethoden. Diese Methoden haben spezielle Verwendungszwecke  und werden mit den Dekoratoren <code>@staticmethod</code> und <code>@classmethod</code> definiert.</p>"},{"location":"content/oop/class_static_methods/class_static_methods/#statische-methoden","title":"Statische Methoden","text":"<p>Eine statische Methode ist eine Methode, die zu einer Klasse geh\u00f6rt,  aber nicht auf eine Instanz zugreift. Sie wird mit dem Dekorator <code>@staticmethod</code> definiert  und hat keinen Zugriff auf Instanzattribute. Statische Methoden sind in erster Linie n\u00fctzlich, wenn eine Methode nur auf Klassenebene operieren muss und keine Instanzinformationen ben\u00f6tigt.</p> <p>Besonders gerne nutzt man statische Methoden f\u00fcr UtilityKlassen, wie zum Beispiel die folgende, die  Fahrenheit in Celsius umrechnet und umgekehrt:</p> <p>Link zum Online Compiler\ud83d\udcbb</p> <pre><code>class TemperatureConverter:\n    @staticmethod\n    def celsius_to_fahrenheit(celsius):\n        return celsius * 9/5 + 32\n\n    @staticmethod\n    def fahrenheit_to_celsius(fahrenheit):\n        return (fahrenheit - 32) * 5/9\n\n# Die statischen Methoden k\u00f6nnen direkt von der Klasse aufgerufen werden\ncelsius_temp = 25\nfahrenheit_equivalent = TemperatureConverter.celsius_to_fahrenheit(celsius_temp)\nprint(f\"{celsius_temp} Grad Celsius entsprechen {fahrenheit_equivalent:.2f} Grad Fahrenheit.\")\n\nfahrenheit_temp = 77\ncelsius_equivalent = TemperatureConverter.fahrenheit_to_celsius(fahrenheit_temp)\nprint(f\"{fahrenheit_temp} Grad Fahrenheit entsprechen {celsius_equivalent:.2f} Grad Celsius.\")\n</code></pre> Statische Methoden f\u00fcr String-Operationen <p>Implementiere eine Klasse <code>StringUtil</code> mit folgenden statischen Methoden: 1. <code>count_words(string)</code>: Z\u00e4hlt die Anzahl der W\u00f6rter in einem String. 2. <code>count_vowels(string)</code>: Z\u00e4hlt die Vokale in einem String (Tipp: Nutze <code>sum</code> und List-Comprehension). 3. <code>is_palindrome(string)</code>: Pr\u00fcft, ob ein Wort ein Palindrom ist (z.B. \"Otto\", unabh\u00e4ngig von Gro\u00df-/Kleinschreibung). 4. <code>count_substring(substring, string)</code>: Z\u00e4hlt, wie oft <code>substring</code> in <code>string</code> vorkommt (z.B. \"ana\" kommt 2 mal in \"Banana\" vor).</p> <p>Jede Methode soll mit einem Docstring und mindestens 3 Doctests versehen werden.</p> Tipp <ul> <li><code>count_words</code>: Nutze <code>split()</code> und <code>len()</code>.</li> <li><code>count_vowels</code>: Verwende <code>in</code> f\u00fcr String-Vergleiche.</li> <li><code>is_palindrome</code>: Nutze String-Slicing zum Umdrehen.</li> <li><code>count_substring</code>: Die <code>find()</code>-Methode hat zus\u00e4tzliche Parameter.</li> </ul> L\u00f6sung <pre><code>class StringUtil:\n    @staticmethod\n    def count_words(string):\n        \"\"\"\n        Z\u00e4hlt die Anzahl der W\u00f6rter in einem String.\n\n        &gt;&gt;&gt; StringUtil.count_words(\"Hello world\")\n        2\n        &gt;&gt;&gt; StringUtil.count_words(\"Python is awesome\")\n        3\n        &gt;&gt;&gt; StringUtil.count_words(\"  Spaces \\t between words \")\n        3\n        \"\"\"\n        return len(string.split())\n\n    @staticmethod\n    def count_vowels(string):\n        \"\"\"\n        Z\u00e4hlt die Vokale in einem String.\n\n        &gt;&gt;&gt; StringUtil.count_vowels(\"Hallo\")\n        2\n        &gt;&gt;&gt; StringUtil.count_vowels(\"ZDF\")\n        0\n        &gt;&gt;&gt; StringUtil.count_vowels(\"Eulenspiegel\")\n        6\n        \"\"\"\n        return sum(1 for char in string.lower() if char in 'aeiou')\n\n    @staticmethod\n    def is_palindrome(string):\n        \"\"\"\n        Testet, ob ein Wort ein Palindrom ist.\n\n        &gt;&gt;&gt; StringUtil.is_palindrome(\"Otto\")\n        True\n        &gt;&gt;&gt; StringUtil.is_palindrome(\"banana\")\n        False\n        &gt;&gt;&gt; StringUtil.is_palindrome(\"A man, a plan, a canal, Panama!\")\n        True\n        \"\"\"\n        clean_string = ''.join(char.lower() for char in string if char.isalnum())\n        return clean_string == clean_string[::-1]\n\n    @staticmethod\n    def count_substring(substring, string):\n        \"\"\"\n        Z\u00e4hlt, wie oft `substring` in `string` auftaucht.\n\n        &gt;&gt;&gt; StringUtil.count_substring(\"ana\", \"Banana\")\n        2\n        &gt;&gt;&gt; StringUtil.count_substring(\"test\", \"This is a test. Another test. But not this Test\")\n        2\n        &gt;&gt;&gt; StringUtil.count_substring(\"abc\", \"defghi\")\n        0\n        \"\"\"\n        count = 0\n        start_index = 0\n        while True:\n            start_index = string.find(substring, start_index)\n            if start_index == -1:\n                break\n            count += 1\n            start_index += 1\n        return count\n\n# Doctests ausf\u00fchren\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</code></pre> <p>Diese L\u00f6sung implementiert die <code>StringUtil</code>-Klasse mit den geforderten statischen Methoden. Jede Methode enth\u00e4lt einen Docstring mit Erkl\u00e4rung und mindestens drei Doctests. Die Implementierungen nutzen effiziente Python-Techniken wie List Comprehensions und die <code>find()</code>-Methode.</p>"},{"location":"content/oop/class_static_methods/class_static_methods/#klassenmethoden","title":"Klassenmethoden","text":"Video <p>Eine Klassenmethode ist eine Methode, die auf die Klasse selbst zugreift und nicht auf Instanzattribute. Sie wird mit dem Dekorator <code>@classmethod</code> definiert und erh\u00e4lt die Klasse selbst als ersten Parameter (<code>cls</code>).</p> <p>Link zum Online Compiler\ud83d\udcbb</p> <pre><code>class Car:\n    total_cars = 0\n\n    def __init__(self, brand):\n        self.brand = brand\n        Car.total_cars += 1\n\n    @classmethod\n    def get_total_cars(cls):\n        return cls.total_cars\n\ntotal = Car.get_total_cars()\nprint(total)\n\ncar1 = Car(\"Volkswagen\")\ncar2 = Car(\"Toyota\")\n\ntotal_now = Car.get_total_cars()\nprint(total_now)\n</code></pre> <p>Klassenmethoden werden oft f\u00fcr alternative Konstruktoren oder zur Manipulation der Klasse selbst verwendet.</p> <p>Link zum Online Compiler\ud83d\udcbb</p> <pre><code>class Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    @classmethod\n    def from_string(cls, string):\n        \"\"\"\n        Erstellt ein String der Form 'YYYY-MM-DD' ein Date.\n\n        &gt;&gt;&gt; print(Date.from_string(\"1990-07-10\"))\n        10.07.1990\n        \"\"\"\n        year, month, day = string.split(\"-\")\n        return cls(year, month, day)\n\n    def __str__(self):\n        return f\"{self.day}.{self.month}.{self.year}\"\n\nprint(Date.from_string(\"1990-07-10\"))\n</code></pre> <pre><code>class Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    @classmethod\n    def from_string(cls, string):\n        \"\"\"\n        Erstellt ein String der Form 'YYYY-MM-DD' ein Date.\n\n        &gt;&gt;&gt; print(Date.from_string(\"1990-07-10\"))\n        10.07.1990\n        \"\"\"\n        year, month, day = string.split(\"-\")\n        return cls(year, month, day)\n\n    def __str__(self):\n        return f\"{self.day}.{self.month}.{self.year}\"\n</code></pre>"},{"location":"content/oop/define_classes/define_classes/","title":"Klassen definieren und instanziieren","text":"Video <p>Die objektorientierte Programmierung (OOP) ist ein m\u00e4chtiges Programmierparadigma,  das auf dem Konzept von \"Objekten\" basiert. Im Gegensatz zu prozeduralen Programmierans\u00e4tzen, bei denen der Code als eine Abfolge von Aufgaben organisiert ist,  legt die OOP den Fokus auf die Modellierung von reellen Entit\u00e4ten und ihren Interaktionen.</p>"},{"location":"content/oop/define_classes/define_classes/#minimalbeispiel","title":"Minimalbeispiel:","text":"<p>Im Folgenden werden wir eine neue Klasse mit dem Schl\u00fcsselwort <code>class</code> erstellen:</p> <pre><code>class Roboter:\n    pass\n</code></pre> <p>Diese Klasse ist im Moment denkbar langweilig. Das <code>pass</code> sagt, dass in diesem Block nichts passiert. Unsere Roboter haben also noch keine Eigenschaften (das kommt noch im n\u00e4chsten Kapitel)</p> <p>Sie ist die Blaupause, mit der wir Instanzen der Klasse erstellen k\u00f6nnen. Das sieht dann so aus:</p> <pre><code>class Roboter:\n    pass\n\n\nx = Roboter()\ny = Roboter()\ny2 = y\n\nprint(f'id von x: {id(x)}')\nprint(f'id von y: {id(y)}')\nprint(f'id von y: {id(y2)}')\n</code></pre> <p>Wir haben hier insgesamt drei Objekte angelegt:</p> <ul> <li>Die Klasse <code>Roboter</code> selbst, wurde als ein Objekt bespeichert.</li> <li>Wir haben eine Instanz der Klasse Roboter mit dem Aufruf <code>Roboter()</code> erzeugt in der Variablen <code>x</code> eine Referenz zu diesem Objekt bespeichert.</li> <li>Wir haben dann eine weitere Instanz der Klasse Roboter erzeugt und eine Referenz zu dieser in <code>y</code> gespeichert.</li> <li>Wir haben danach eine neue Variable <code>y2</code> angelegt und in dieser die Referenz bespeichert, die auch in <code>y</code> gespeichert. ist</li> </ul> <p>Bitte achte hier genau auf die Wortwahl! Ich schreibe nicht \"In der Variablen <code>y</code> ist die Instanz gespeichert\", sondern \"In der Variablen <code>y</code> ist eine Referenz zur Instanz gespeichert.\" Eine Referenz kannst du dir so vorstellen, wie eine Anschrift, die dir Verr\u00e4tt, wo du die Instanz im Speicher findest. Dieses Konzept kennen wir bereits von zusammengesetzten Datentypen wie Listen.</p> <p></p> <p>\ud83d\udd05Merke dir: Die Klasse ist die Vorlage, mit der Instanzen gebaut werden.</p> <p>\ud83d\udd05Vokabel: Eine neue Instanz zu erzeugen wird auch Instanziieren genannt.</p> <p>\ud83d\udd05Merke dir: Variablen speichern eine Referenz zu Instanzen, nicht die Instanz selbst.</p> Typ untersuchen <p>Untersuche mithilfe von <code>type</code> die Typen von <code>x</code>, <code>y</code>, <code>y2</code> und <code>Roboter</code> aus dem folgenden Beispiel:</p> <pre><code>class Roboter:\n    pass\n\nx = Roboter()\ny = Roboter()\ny2 = y\n</code></pre> <p>Gib die Typen in der angegebenen Reihenfolge aus.</p> L\u00f6sung <p><code>Roboter</code> ist vom Typ <code>type</code> und <code>x</code>, <code>y</code>, <code>y2</code> sind vom Typ <code>main.Roboter</code>. Das <code>main</code> entsteht hier nur, da wir die Datei direkt ausf\u00fchren. Wenn wir Roboter importiert h\u00e4tten, w\u00e4ren diese einfach vom Typ <code>Roboter</code>.</p> Identit\u00e4tsvergleich <p>Finde heraus, was <code>is</code> und <code>is not</code> in Python tun und an welcher Stelle wir sie im Beispielcode h\u00e4tten nutzen k\u00f6nnen.</p> <pre><code>class Roboter:\n    pass\n\nx = Roboter()\ny = Roboter()\ny2 = y\n</code></pre> <p>Schreibe einen kurzen Absatz, der erkl\u00e4rt, was <code>is</code> und <code>is not</code> machen, und f\u00fcge dann ein Codebeispiel hinzu, das zeigt, wie man sie mit den Variablen aus dem obigen Code verwenden k\u00f6nnte.</p> L\u00f6sung <p><code>is</code> und <code>is not</code> sind Identit\u00e4tsoperatoren in Python. Sie vergleichen, ob zwei Objekte genau dasselbe Objekt im Speicher sind, nicht nur, ob sie den gleichen Wert haben. <code>is</code> gibt <code>True</code> zur\u00fcck, wenn beide Operanden auf dasselbe Objekt verweisen, w\u00e4hrend <code>is not</code> <code>True</code> zur\u00fcckgibt, wenn sie auf unterschiedliche Objekte verweisen.</p> <p>In unserem Beispielcode k\u00f6nnten wir <code>is</code> und <code>is not</code> wie folgt verwenden:</p> <pre><code>class Roboter:\n    pass\n\nx = Roboter()\ny = Roboter()\ny2 = y\n\nprint(x is y)      # False, da x und y verschiedene Instanzen sind\nprint(y is y2)     # True, da y und y2 auf dieselbe Instanz verweisen\nprint(x is not y)  # True, da x und y verschiedene Instanzen sind\nprint(y is not y2) # False, da y und y2 auf dieselbe Instanz verweisen\n</code></pre> <p>Dieser Code demonstriert, dass <code>x</code> und <code>y</code> verschiedene Instanzen sind, w\u00e4hrend <code>y</code> und <code>y2</code> auf dieselbe Instanz verweisen.</p> Mehrere Instanzen erzeugen <p>Erstelle eine leere Klasse <code>Car</code> und erzeuge drei verschiedene Instanzen von <code>Car</code>.  Wie kannst du \u00fcberpr\u00fcfen, dass die Instanzen wirklich verschieden sind?</p> <p>Schreibe den Code, der die Klasse definiert, die Instanzen erzeugt und \u00fcberpr\u00fcft, ob sie verschieden sind.</p> L\u00f6sung <p>Hier ist eine m\u00f6gliche L\u00f6sung:</p> <pre><code>class Car:\n    pass\n\na = Car()\nb = Car()\nc = Car()\n\nprint(id(a))\nprint(id(b))\nprint(id(c))\n</code></pre> <p>Die <code>id()</code>-Funktion gibt die eindeutige Identit\u00e4t eines Objekts zur\u00fcck. Wenn die ausgegebenen IDs unterschiedlich sind, bedeutet das, dass die Instanzen tats\u00e4chlich verschieden sind.</p> <p>Alternativ k\u00f6nnten wir auch den <code>is</code>-Operator verwenden:</p> <pre><code>print(a is b)  # False\nprint(a is c)  # False\nprint(b is c)  # False\n</code></pre> <p>Wenn alle diese Vergleiche <code>False</code> ergeben, sind die Instanzen verschieden.</p>"},{"location":"content/oop/getter_setter/getter_setter/","title":"Getter &amp; Setter","text":"Video <p>Wir k\u00f6nnen bisher auf alle Attribute unserer Klassen zugreifen. Dies ist einfach, bietet aber auch wenig Schutz vor Quatschdaten.</p> <p>Z.B. ist es im folgenden Beispiel m\u00f6glich ein negatives Alter bei einer Person zu setzen:</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Person:\n    def __init__(self, age):\n        self.age = age\n\np = Person(-1)\nprint(f\"Die Person ist {p.age} Jahre alt.\")\n</code></pre> <p>Wie k\u00f6nnen wir verhindern, dass solche Eingaben m\u00f6glich sind?</p> <p>In anderen Programmiersprachen ist es Konvention sog. Getter- und Setter Methoden zu definieren. Das k\u00f6nnte dann z.B. so aussehen:</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Person:\n    def __init__(self, age):\n        self.set_age(age)\n\n    def get_age(self):\n        return self.age\n\n    def set_age(self, age):\n        self.age = max(0, age)\n\n\np = Person(-1)\nprint(f\"Die Person ist {p.get_age()} Jahre alt.\")\n</code></pre> <p>Nun k\u00f6nnen wir mithilfe vom Setter <code>set_age</code> sicherstellen, dass das Attribut <code>age</code> stets einen sinnvollen Wert hat.</p> <p>Doch um ehrlich zu sein, sieht das nicht wirklich nach Pythoncode aus. Es ist einerseits umst\u00e4ndlich, dass wir das Attribut \u00fcber solche Getter und Setter erfragen sollen und andererseits, ist es uns immer noch m\u00f6glich das Attribut direkt zu manipulieren!</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Person:\n    def __init__(self, age):\n        self.set_age(age)\n\n    def get_age(self):\n        return self.age\n\n    def set_age(self, age):\n        self.age = max(0, age)\n\n\np = Person(30)\np.age = -20\nprint(f\"Die Person ist {p.get_age()} Jahre alt.\")\n</code></pre> <p>Die Antwort: Property</p> <p>Wir definieren ein Attribut <code>_age</code>, dass das Alter tats\u00e4chlich speichert.</p> <p>Es gibt eine vorimplementierte Klasse <code>property</code>, mit der wir die Methoden <code>get_age</code> und <code>set_age</code> nach au\u00dfen als ein Attribut zur Verf\u00fcgung stellen, aber die \u00c4nderungen an <code>age</code> in Wirklichkeit an <code>_age</code> weitergeleitet werden.</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Person:\n    def __init__(self, age):\n        self.age = age\n\n    def get_age(self):\n        return self.__age\n\n    def set_age(self, age):\n        self.__age = max(age, 0)\n\n    age = property(get_age, set_age)\n\n\np = Person(-30)\nprint(f\"Die Person ist {p.age} Jahre alt.\")\n</code></pre> <pre><code>graph TD;\n    A1[\"p.age\"]--&gt;B1[\"get_age(self)\"] --&gt; C[\"self.__age\"]\n    A2[\"p.age = value\"] --&gt; B2[\"set_age(self, value)\"]--&gt;C</code></pre> Notendurchschnitt <p>Erstelle eine Klasse <code>Student</code>, mit drei Attributen <code>mathe</code>, <code>python</code>, <code>englisch</code>.</p> <p>Erstelle eine Methode <code>get_durchschnitt</code>, die den Durchschnitt der drei Attribute berechnet.</p> <p>Erstelle eine Property <code>durchschnitt</code>, die nur einen Getter hat und zwar <code>get_durchschnitt</code>.</p> <p>Die folgenden Tests sollen nach der Implementierung erfolgreich sein:</p> <pre><code>from unittest import TestCase\n\nclass StudentTest(TestCase):\n    def test_durchschnitt(self):\n        s = Student(1, 2, 3)\n        self.assertAlmostEqual(2.0, s.durchschnitt)\n\n    def test_durchschnitt_property(self):\n        s = Student(1, 2, 3)\n        self.assertRaises(AttributeError, setattr, s, \"durchschnitt\", 5)\n</code></pre> Tipp <ul> <li>Verwende die <code>property</code>-Funktion, um den Getter zu definieren.</li> <li>Der Durchschnitt wird berechnet, indem man die Summe der drei Noten durch 3 teilt.</li> </ul> L\u00f6sung <pre><code>class Student:\n    def __init__(self, mathe, python, englisch):\n        self.mathe = mathe\n        self.python = python\n        self.englisch = englisch\n\n    def get_durchschnitt(self):\n        return (self.mathe + self.python + self.englisch) / 3\n\n    durchschnitt = property(get_durchschnitt)\n</code></pre> <p>In dieser L\u00f6sung:</p> <ol> <li>Die Klasse <code>Student</code> wird mit den drei Attributen <code>mathe</code>, <code>python</code> und <code>englisch</code> initialisiert.</li> <li>Die Methode <code>get_durchschnitt</code> berechnet den Durchschnitt der drei Noten.</li> <li>Die Property <code>durchschnitt</code> wird mit der <code>property</code>-Funktion erstellt und verwendet <code>get_durchschnitt</code> als Getter.</li> </ol> Radius oder Durchmesser <p>Erstelle eine Klasse <code>Kreis</code> mit zwei Properties: <code>radius</code> und <code>diameter</code>. Erstelle die Properties so, dass immer <code>diameter = 2 * radius</code> gilt.</p> <ul> <li> <p>Die Properties sollen auf <code>0</code> gesetzt werden, wenn einer der Properties negativ wird.</p> </li> <li> <p>Wenn versucht wird die Properties mit einem Wert zu f\u00fcllen, der nicht <code>int</code> oder <code>float</code> ist,   soll eine passende Exception geworfen werden.</p> </li> <li> <p>Implementiere weiterhin die M\u00f6glichkeit den Radius eines Kreises zu vergr\u00f6\u00dfern und zu skalieren,   indem man ihn mit Zahlen multipliziert. Z.B.:</p> </li> </ul> <pre><code>k = Kreis(5)\nprint(f\"Radius: {k.radius}, Durchmesser: {k.diameter}\") # Radius: 5, Durchmesser: 10\n\nk2 = k * 2\nprint(f\"Radius: {k2.radius}, Durchmesser: {k2.diameter}\") # Radius: 10, Durchmesser: 20\n</code></pre> <ul> <li>Schreibe mindestens 7 Unittest, die die Anforderungen pr\u00fcfen.</li> </ul> Tipp <pre><code>import unittest\n\nclass KreisTest(unittest.TestCase):\n    def test_no_negativ_radius(self):\n        ...\n\n    def test_no_negativ_radius_from_setting(self):\n        ...\n\n    def test_diameter_is_ready_automatically(self):\n        ...\n\n    def test_radius_connected_to_diameter(self):\n        ...\n\n    def test_diameter_is_connected_to_radius(self):\n        ...\n\n    def test_multiply_kreis_with_positiv_number(self):\n        ...\n\n    def test_multiply_kreis_with_negativ_number(self):\n        ...\n</code></pre> <p>Implementierung der Klasse: \u00dcberlege dir, wie viele Attribute es tats\u00e4chlich brauch, um Radius und Durchmesser zu speichern.  F\u00fcr das Multiplizieren nutze <code>__mul__</code>.</p> L\u00f6sung <p>L\u00f6sung Tests <pre><code>import unittest\n<p>class KreisTest(unittest.TestCase):\n    def test_no_negativ_radius(self):\n        kreis = Kreis(-5)\n        self.assertEqual(kreis.diameter, 0)\n        self.assertEqual(kreis.radius, 0)</p>\n<pre><code>def test_no_negativ_radius_from_setting(self):\n    kreis = Kreis(5)\n    kreis.diameter = -3\n    self.assertEqual(kreis.diameter, 0)\n    self.assertEqual(kreis.radius, 0)\n\ndef test_diameter_is_ready_automatically(self):\n    kreis = Kreis(5)\n    self.assertEqual(kreis.diameter, 10)\n\ndef test_radius_connected_to_diameter(self):\n    kreis = Kreis(5)\n    kreis.radius = 7\n    self.assertEqual(kreis.diameter, 14)\n\ndef test_diameter_is_connected_to_radius(self):\n    kreis = Kreis(5)\n    kreis.diameter = 3\n    self.assertAlmostEqual(1.5, kreis.radius)\n\ndef test_multiply_kreis_with_positiv_number(self):\n    kreis = Kreis(5) * 3\n    self.assertEqual(kreis.diameter, 30)\n\ndef test_multiply_kreis_with_negativ_number(self):\n    kreis = Kreis(5) * -3\n    self.assertEqual(kreis.diameter, 0)\n\n# Es k\u00f6nnen noch Tests hinzugef\u00fcgt werden, die pr\u00fcfen,\n# dass die richtigen Exceptions geworfen werden.\n</code></pre>\n<p>\n</p>\n<p>L\u00f6sung Implementierung der Klasse\n\n<pre><code>class Kreis:\n    def init(self, radius):\n        self.radius = radius\n<pre><code>def get_radius(self):\n    return self.__radius\n\ndef set_radius(self, radius):\n    if isinstance(radius, int | float):\n        self.__radius = max(0, radius)\n    else:\n        raise TypeError()\n\ndef get_diameter(self):\n    return self.radius * 2\n\ndef set_diameter(self, diameter):\n    self.radius = diameter / 2\n\ndef __mul__(self, other):\n    if isinstance(other, int | float):\n        return Kreis(self.radius * other)\n    else:\n        raise TypeError()\n\ndiameter = property(get_diameter, set_diameter)\nradius = property(get_radius, set_radius)\n</code></pre>\n<p>\n</p>"},{"location":"content/oop/getter_setter/getter_setter/#schonheit-mit-dekoratoren","title":"Sch\u00f6nheit mit Dekoratoren","text":"Video\n\n\n<p>In Python, ist es m\u00f6glich \u00fcber Funktionen Dekoratoren zu setzen.\nDiese k\u00f6nnen das Verhalten von Funktionen auf vielf\u00e4ltige Art und Weise\nmanipulieren. Zur Definition von Properties, wird oft der <code>@property</code>\nDekorator verwendet. Das kann dann so aussehen:</p>\n<p>Link zum Onlinecompiler\ud83d\udcbb</p>\n<pre><code>class Person:\n    def __init__(self, age):\n        self.age = age\n\n    @property\n    def age(self):\n        return self.__age\n\n    @age.setter\n    def age(self, age):\n        self.__age = max(age, 0)\n\n\np = Person(-30)\nprint(f\"Die Person ist {p.age} Jahre alt.\")\n</code></pre>\n<p>Wir stellen fest:</p>\n<ul>\n<li>Getter und Setter werden direkt wie das Property benannt, <code>get_</code> bzw. <code>set_</code> als Pr\u00e4fix ist also nicht mehr n\u00f6tig.</li>\n<li>An den Getter schreiben wir <code>@property</code>.</li>\n<li>An den Setter schreiben wir <code>@x.setter</code>, wobei <code>x</code> der Name der Funktion ist, bei der wir <code>@property</code> gesetzt haben.</li>\n</ul>\n\nDekoratoren f\u00fcr Properties\n<p>Passe deine L\u00f6sungen aus den Aufgaben \"Notendurchschnitt\" und \"Radius und Durchmesser\" so an, dass sie mit Dekoratoren funktionieren.\nStelle sicher, dass alle vorherigen Anforderungen weiterhin erf\u00fcllt sind.</p>\n\nL\u00f6sung\n<pre><code># L\u00f6sung f\u00fcr Student\nclass Student:\n    def __init__(self, mathe, python, englisch):\n        self.mathe = mathe\n        self.python = python\n        self.englisch = englisch\n\n    @property\n    def durchschnitt(self):\n        return (self.mathe + self.python + self.englisch) / 3\n\n# L\u00f6sung f\u00fcr Kreis\nclass Kreis:\n    def __init__(self, radius):\n        self.radius = radius\n\n    @property\n    def radius(self):\n        return self.__radius\n\n    @radius.setter\n    def radius(self, radius):\n        if isinstance(radius, (int, float)):\n            self.__radius = max(0, radius)\n        else:\n            raise TypeError(\"Radius muss eine Zahl sein\")\n\n    @property\n    def diameter(self):\n        return self.radius * 2\n\n    @diameter.setter\n    def diameter(self, diameter):\n        self.radius = diameter / 2\n\n    def __mul__(self, other):\n        if isinstance(other, (int, float)):\n            return Kreis(self.radius * other)\n        else:\n            raise TypeError(\"Multiplikator muss eine Zahl sein\")\n</code></pre>\n<p>Diese L\u00f6sungen verwenden Dekoratoren, um die Properties zu definieren. \nF\u00fcr <code>Student</code> ist <code>durchschnitt</code> ein read-only Property. \nF\u00fcr <code>Kreis</code> sind sowohl <code>radius</code> als auch <code>diameter</code> vollst\u00e4ndige Properties mit Gettern und Settern.</p>"},{"location":"content/oop/magic_methods/magic_methods/","title":"Magic Methods","text":"Video <p>Magische Methoden (engl. Magic Methods),  auch als Dunder (Double Underscore) Methods bekannt,  sind spezielle Methoden in Python-Klassen, die durch doppelte Unterstriche (<code>__</code>) am Anfang und Ende ihres Namens gekennzeichnet sind. Diese Methoden bieten eine M\u00f6glichkeit, benutzerdefiniertes Verhalten in Klassen zu implementieren, die mit Python-Operatoren und eingebauten Funktionen interagieren.</p> <p>\u26a0 Es d\u00fcrfen niemals eigene Magic Methods definiert werden. Dieses Vorrecht gilt nur f\u00fcr die Entwickler von Python selbst. Denn man wei\u00df nie, welche Dunder Method sie sich in zukunft ausdenken werden. Und wenn diese zuf\u00e4llig denselben Namen tr\u00e4gt, wie unsere eigene, so haben wir ein Problem.</p>"},{"location":"content/oop/magic_methods/magic_methods/#beispiel-1-punkte","title":"Beispiel 1: Punkte","text":"<p>Angenommen, wir haben eine Klasse <code>Punkt</code>, die die Koordinaten eines Punkts im 2D-Raum repr\u00e4sentiert. Wir definieren zwei Methoden:</p> <ul> <li><code>to_str</code> gibt einen f\u00fcr Menschen verst\u00e4ndlichen String an, der den Inhalt von Punkt zur\u00fcckgibt.</li> <li><code>add</code> addiert zwei Punkte, indem die beiden <code>x</code>-Werte und die beiden <code>y</code>-Werte miteinander addiert werden und ein neuer Punkt erzeugt wird. </li> </ul> <p>Link zum Online Compiler\ud83d\udcbb</p> <pre><code>class Punkt:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def to_str(self):\n        return f\"({self.x}, {self.y})\"\n\n    def add(self, other):\n        if isinstance(other, Punkt):\n            return Punkt(self.x + other.x, self.y + other.y)\n        else:\n            raise TypeError(\"Unsupported operand type. Use with another Punkt object.\")\n\nA = Punkt(2, 1)\nB = Punkt(-1, 2)\nC = A.add(B)\nprint(f\"A + B = {A.to_str()} + {B.to_str()} = {C.to_str()} = C\")\nprint(C) # zeigt nicht die Attribute der Instanz an, sondern nur Klasse und Hash\n</code></pre> <p>Die Addition von zwei Punkten kann man sich \u00fcbrigens mit folgender Darstellung visualisieren:</p> <p>Dieser Code ist funktionsf\u00e4hig, aber kann komfortabler geschrieben werden. Wir m\u00f6chten n\u00e4mlich statt <code>A.add(B)</code> gerne einfach <code>A + B</code> schreiben k\u00f6nnen. Und statt <code>A</code> h\u00e4ndisch mit <code>A.to_str()</code> in ein String umzuwandeln, w\u00e4re es sch\u00f6n, wenn auch das automatisch im f-String passieren w\u00fcrde. Denn erinnern wir uns: auf alle Variablen in einem f-String, die aufgel\u00f6st werden sollen, wird ja <code>str</code> ausgef\u00fchrt.</p> <p>Beide w\u00fcnsche lassen sich mit entsprechenden Magic bzw. Dunder Methods l\u00f6sen!</p> <p>Um die Addition mit <code>+</code> zu erm\u00f6glichen k\u00f6nnen wir einfach <code>__add__</code> implementieren  und f\u00fcr die automatische Konvertierung in Strings k\u00f6nnen wir <code>__str__</code> implementieren:</p> <p>Angenommen, wir haben eine Klasse <code>Punkt</code>, die die Koordinaten eines Punkts im 2D-Raum repr\u00e4sentiert:</p> <p>Link zum Online Compiler\ud83d\udcbb</p> <pre><code>class Punkt:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        if isinstance(other, Punkt):\n            return Punkt(self.x + other.x, self.y + other.y)\n        else:\n            raise TypeError(\"Unsupported operand type. Use with another Punkt object.\")\n\nA = Punkt(2, 1)\nB = Punkt(-1, 2)\nC = A + B\nprint(f\"A + B = {A} + {B} = {C} = C\")\nprint(C) # Zeigt die definierte Stringdarstellung der Klasse an.\n</code></pre>"},{"location":"content/oop/magic_methods/magic_methods/#magic-methods_1","title":"Magic Methods:","text":"Magic/Dunder Method erm\u00f6glicht Beschreibung Dokumentation <code>__str__</code> <code>print(x)</code> Diese magische Methode wird aufgerufen, wenn die <code>str</code>-Funktion auf ein Objekt angewendet wird. Sie erm\u00f6glicht die Definition einer benutzerfreundlichen Zeichenfolge, die das Objekt repr\u00e4sentiert. Dokumentation <code>__add__</code> <code>x + y</code> Diese magische Methode wird aufgerufen, wenn das <code>+</code>-Zeichen auf ein Objekt angewendet wird. Sie erm\u00f6glicht die Definition der Addition von zwei Objekten der Klasse. Dokumentation <code>__len__</code> <code>len(x)</code> Diese magische Methode wird aufgerufen, wenn die <code>len</code>-Funktion auf ein Objekt angewendet wird. Sie erm\u00f6glicht die Definition der Anzahl von Elementen in einem Objekt. Dokumentation <code>__sub__</code> <code>x - y</code> Diese magische Methode wird aufgerufen, wenn das <code>-</code>-Zeichen auf ein Objekt angewendet wird. Sie erm\u00f6glicht die Definition der Subtraktion von zwei Objekten der Klasse. Dokumentation <code>__eq__</code> <code>x == y</code> Diese magische Methode wird aufgerufen, um die Gleichheit von zwei Objekten zu \u00fcberpr\u00fcfen. Dokumentation <code>__ne__</code> <code>x != y</code> Diese magische Methode wird aufgerufen, um die Ungleichheit von zwei Objekten zu \u00fcberpr\u00fcfen. Dokumentation <code>__lt__</code> <code>x &lt; y</code> Diese magische Methode wird aufgerufen, um festzustellen, ob ein Objekt kleiner als ein anderes ist. Dokumentation <code>__le__</code> <code>x &lt;= y</code> Diese magische Methode wird aufgerufen, um festzustellen, ob ein Objekt kleiner oder gleich einem anderen ist. Dokumentation <code>__gt__</code> <code>x &gt; y</code> Diese magische Methode wird aufgerufen, um festzustellen, ob ein Objekt gr\u00f6\u00dfer als ein anderes ist. Dokumentation <code>__ge__</code> <code>x &gt;= y</code> Diese magische Methode wird aufgerufen, um festzustellen, ob ein Objekt gr\u00f6\u00dfer oder gleich einem anderen ist. Dokumentation <code>__getitem__</code> <code>x[key]</code> Diese magische Methode wird aufgerufen, um den Zugriff auf ein Element mittels Index zu erm\u00f6glichen. Dokumentation <code>__setitem__</code> <code>x[key] = value</code> Diese magische Methode wird aufgerufen, um das Setzen eines Elements mittels Index zu erm\u00f6glichen. Dokumentation <code>__contains__</code> <code>x in y</code> Diese magische Methode wird aufgerufen, um zu pr\u00fcfen, ob ein Objekt ein bestimmtes Element enth\u00e4lt. Dokumentation <p>Es gibt noch weitere ... \ud83d\ude09</p> Weiter mit Punkten <p>Implementiere die passende Methode, sodass die Subtraktion <code>A - B</code> zweier Punkte m\u00f6glich ist.</p> <p>Implementiere au\u00dferdem die passende Methode, um die Pr\u00fcfung <code>A == B</code> durchzuf\u00fchren, mit der man zwei Punkte auf Gleichheit pr\u00fcfen kann. Zwei Punkte sind gleich, wenn alle Attribute (<code>x</code> und <code>y</code>) \u00fcbereinstimmen.</p> <p>Wenn alles richtig implementiert wurde, m\u00fcsste dieser Test funktionieren:</p> <pre><code>from unittest import TestCase\n\n\nclass PunktTest(TestCase):\n\n    def test_equality_0(self):\n        self.assertEqual(Punkt(1, 2), Punkt(1, 2))\n\n    def test_equality_1(self):\n        self.assertNotEqual(Punkt(1, 2), Punkt(2, 1))\n\n    def test_equality_2(self):\n        self.assertNotEqual(Punkt(1, 2), (1, 2))\n\n    def test_sub_0(self):\n        a, b = Punkt(2, 1), Punkt(-1, 2)\n        self.assertEqual(a - b, Punkt(3, -1))\n\n    def test_sub_1(self):\n        a = Punkt(2, 1)\n        self.assertEqual(a - a, Punkt(0, 0))\n\n    def test_sub_2(self):\n        a = Punkt(2, 1)\n        a -= Punkt(-1, 2)\n        self.assertEqual(a, Punkt(3, -1))\n\n    def test_sub_3(self):\n        with self.assertRaises(TypeError):\n            Punkt(3, 2) - 4\n</code></pre> Tipp <ul> <li>Nutze <code>__eq__</code> f\u00fcr die Gleichheitspr\u00fcfung</li> <li>Nutze <code>__sub__</code> f\u00fcr die Subtraktion</li> </ul> L\u00f6sung <pre><code>class Punkt:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        if isinstance(other, Punkt):\n            return Punkt(self.x + other.x, self.y + other.y)\n        else:\n            raise TypeError(\"Unsupported operand type. Use with another Punkt object.\")\n\n    def __eq__(self, other):\n        return (isinstance(other, Punkt)\n                and self.x == other.x\n                and self.y == other.y)\n\n    def __sub__(self, other):\n        if isinstance(other, Punkt):\n            return Punkt(self.x - other.x, self.y - other.y)\n        else:\n            raise TypeError(\"Unsupported operand type. Use with another Punkt object.\")\n</code></pre> <p>In dieser L\u00f6sung haben wir zwei neue Magic Methods implementiert:</p> <ol> <li> <p><code>__eq__</code>: Diese Methode erm\u00f6glicht den Vergleich zweier Punkt-Objekte auf Gleichheit. Sie pr\u00fcft, ob das andere Objekt ebenfalls ein Punkt ist und ob beide Koordinaten \u00fcbereinstimmen.</p> </li> <li> <p><code>__sub__</code>: Diese Methode implementiert die Subtraktion zweier Punkte. Sie erstellt einen neuen Punkt, dessen Koordinaten die Differenz der Koordinaten der beiden Ausgangspunkte sind.</p> </li> </ol> <p>Beide Methoden pr\u00fcfen zun\u00e4chst, ob das \u00fcbergebene Objekt vom Typ <code>Punkt</code> ist, um TypeErrors zu vermeiden.</p> Multiplizieren von Punkten <p>Implementieren Sie die M\u00f6glichkeit, einen Punkt mit einer Zahl zu skalieren, sodass z.B. <code>Punkt(1,2) * 4</code> als Ergebnis <code>Punkt(4,8)</code> ergibt. Wenn mit einem anderen Typ als <code>int</code> oder <code>float</code> multipliziert wird, so werfen Sie einen <code>TypeError</code>.</p> <p>Passen Sie au\u00dferdem <code>__sub__</code> so an, dass die  Multiplikation und die Addition verwendet wird:</p> <p>P - Q = P + Q * (-1)</p> <p>Achten Sie darauf, dass die bisherigen Tests funktionieren und diese neuen Tests ebenfalls bestehen:</p> <pre><code>def test_mul_0(self):\n    self.assertEqual(Punkt(1, 2) * 4, Punkt(4, 8))\n\ndef test_mul_1(self):\n    self.assertEqual(Punkt(0, 0) * 4, Punkt(0, 0))\n\ndef test_mul_2(self):\n    self.assertEqual(Punkt(1, 4) * 0, Punkt(0, 0))\n\ndef test_mul_3(self):\n    self.assertEqual(Punkt(3, -2) * -1, Punkt(-3, 2))\n\ndef test_mul_4(self):\n    self.assertEqual(Punkt(3.5, 0.5) * 2, Punkt(7, 1))\n\ndef test_mul_5(self):\n    self.assertEqual(Punkt(0.1, 0.2) * 1.5, Punkt(0.15, 0.3))\n\ndef test_mul_6(self):\n    a = Punkt(2, 1)\n    a *= 0.2\n    self.assertEqual(a, Punkt(0.4, 0.2))\n\ndef test_mul_7(self):\n    with self.assertRaises(TypeError):\n        Punkt(2, 1) * \"Hallo\"\n\ndef test_sub_3(self):\n    with self.assertRaises(TypeError):\n        Punkt(2, 1) - 1\n</code></pre> Tipp <ul> <li>Nutzen Sie <code>__mul__</code> f\u00fcr die Multiplikation.</li> <li>Um Flie\u00dfkommazahlen auf Gleichheit zu pr\u00fcfen, nutzen Sie <code>isclose</code> aus dem <code>math</code> Modul.</li> </ul> L\u00f6sung <pre><code>from math import isclose\n\nclass Punkt:\n    def __eq__(self, other):\n        return (isinstance(other, Punkt) \n                and isclose(self.x, other.x) \n                and isclose(self.y, other.y))\n\n    def __sub__(self, other):\n        return self + other * (-1)\n\n    def __mul__(self, other):\n        if isinstance(other, (int, float)):\n            return Punkt(self.x * other, self.y * other)\n        else:\n            raise TypeError(\"Unsupported operand type. Use int or float\")\n</code></pre> <p>In dieser L\u00f6sung haben wir folgende \u00c4nderungen vorgenommen:</p> <ol> <li><code>__eq__</code>: Wir verwenden <code>isclose</code> f\u00fcr den Vergleich von Flie\u00dfkommazahlen.</li> <li><code>__sub__</code>: Die Subtraktion wird nun durch Addition und Multiplikation implementiert.</li> <li><code>__mul__</code>: Diese neue Methode erm\u00f6glicht die Skalierung eines Punktes mit einer Zahl.</li> </ol> <p>Alle Methoden pr\u00fcfen den Typ des \u00fcbergebenen Objekts, um TypeErrors zu vermeiden.</p> Zugriff wie bei Listen <p>Implementiere in der <code>Punkt</code> Klasse die richtigen Methoden, damit es m\u00f6glich ist, auf den <code>x</code>-Wert \u00fcber den Index <code>0</code> oder <code>-2</code> und auf den <code>y</code>-Wert \u00fcber den Index <code>1</code> oder <code>-1</code> zuzugreifen. </p> <p>Folgende Funktionalit\u00e4ten sollen implementiert werden: - Lesen der Werte \u00fcber die Indizes - Setzen der Werte \u00fcber die Indizes - Fehlerbehandlung f\u00fcr ung\u00fcltige Indizes</p> <p>Die folgenden Tests sollen nach der Implementierung erfolgreich sein:</p> <pre><code>from unittest import TestCase\n\nclass PunktTest(TestCase):\n    def test_read_0(self):\n        a = Punkt(2, 1)\n        self.assertEqual(2, a[0])\n\n    def test_read_1(self):\n        a = Punkt(2, 1)\n        self.assertEqual(1, a[1])\n\n    def test_read_2(self):\n        a = Punkt(2, 1)\n        with self.assertRaises(IndexError):\n            b = a[2]\n\n    def test_read_4(self):\n        a = Punkt(2, 1)\n        self.assertEqual(2, a[-2])\n\n    def test_read_5(self):\n        a = Punkt(2, 1)\n        self.assertEqual(1, a[-1])\n\n    def test_read_6(self):\n        a = Punkt(2, 1)\n        with self.assertRaises(IndexError):\n            b = a[-3]\n\n    def test_set_0(self):\n        a = Punkt(2, 1)\n        a[0] = 0\n        self.assertEqual(a, Punkt(0,1))\n\n    def test_set_1(self):\n        a = Punkt(2, 1)\n        a[1] = 0\n        self.assertEqual(a, Punkt(2,0))\n\n    def test_set_2(self):\n        a = Punkt(2, 1)\n        with self.assertRaises(IndexError):\n            a[3] = 4\n\n    def test_set_4(self):\n        a = Punkt(2, 1)\n        a[-1] = 0\n        self.assertEqual(a, Punkt(2, 0))\n\n    def test_set_5(self):\n        a = Punkt(2, 1)\n        a[-2] = 0\n        self.assertEqual(a, Punkt(0,1))\n\n    def test_set_6(self):\n        a = Punkt(2, 1)\n        with self.assertRaises(IndexError):\n            a[-3] = 4\n</code></pre> Tipp <ul> <li>Implementiere die Methoden <code>__getitem__</code> f\u00fcr das Lesen und <code>__setitem__</code> f\u00fcr das Setzen von Werten.</li> <li>Beachte die verschiedenen Indexm\u00f6glichkeiten (0, 1, -2, -1) f\u00fcr x und y.</li> <li>Wirf einen <code>IndexError</code> f\u00fcr ung\u00fcltige Indizes.</li> </ul> L\u00f6sung <pre><code>class Punkt:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __getitem__(self, item):\n        if item in [0, -2]:\n            return self.x\n        elif item in [1, -1]:\n            return self.y\n        else:\n            raise IndexError(\"Index muss 0 oder -2 f\u00fcr x, 1 oder -1 f\u00fcr y sein.\")\n\n    def __setitem__(self, key, value):\n        if key in [0, -2]:\n            self.x = value\n        elif key in [1, -1]:\n            self.y = value\n        else:\n            raise IndexError(\"Index muss 0 oder -2 f\u00fcr x, 1 oder -1 f\u00fcr y sein.\")\n</code></pre> <p>In dieser L\u00f6sung wurden zwei Magic Methods implementiert:</p> <ol> <li><code>__getitem__</code>: Diese Methode erm\u00f6glicht den Zugriff auf die x- und y-Werte des Punktes \u00fcber Indizes.</li> <li><code>__setitem__</code>: Diese Methode erm\u00f6glicht das Setzen der x- und y-Werte des Punktes \u00fcber Indizes.</li> </ol> <p>Beide Methoden ber\u00fccksichtigen die verschiedenen Indexm\u00f6glichkeiten und werfen einen <code>IndexError</code> bei ung\u00fcltigen Indizes.</p> Was ist n\u00f6tig? <p>F\u00fcr die folgende Klasse sollen die Magic Methods definiert werden, sodass die Tests gr\u00fcn werden. Versuche hier so wenig wie m\u00f6glich Magic Methods zu definieren.</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    ...\n</code></pre> <pre><code>import unittest\n\n\nclass PersonTest(unittest.TestCase):\n    def setUp(self):\n        self.anton_alt = Person(\"Anton\", 65)\n        self.jutta_jung = Person(\"Jutta\", 12)\n        self.jut_jung = Person(\"Jut\", 12)\n\n    def test_lt_0(self):\n        self.assertTrue(self.jutta_jung &lt; self.anton_alt)\n\n    def test_lt_1(self):\n        self.assertTrue(self.jutta_jung &lt; 60)\n\n    def test_lt_2(self):\n        self.assertFalse(self.jutta_jung &lt; 11)\n\n    def test_lt_error(self):\n        with self.assertRaises(TypeError):\n            r = self.jutta_jung &lt; \"\"\n\n    def test_gt_0(self):\n        self.assertTrue(self.anton_alt &gt; self.jutta_jung)\n\n    def test_gt_1(self):\n        self.assertTrue(30 &gt; self.jutta_jung)\n\n    def test_ge_0(self):\n        self.assertTrue(self.anton_alt &gt;= self.jutta_jung)\n\n    def test_ge_1(self):\n        self.assertTrue(50 &gt;= self.jutta_jung)\n\n    def test_ge_error(self):\n        with self.assertRaises(TypeError):\n            r = self.jutta_jung &lt;= \"\"\n\n    def test_le_0(self):\n        self.assertTrue(self.jutta_jung &lt;= self.anton_alt)\n\n    def test_le_1(self):\n        self.assertTrue(self.jutta_jung &lt;= 50)\n\n    def test_contains_0(self):\n        self.assertTrue(\"Jutta\" in self.jutta_jung)\n\n    def test_contains_1(self):\n        self.assertTrue(\"Jut\" in self.jutta_jung)\n\n    def test_contains_2(self):\n        self.assertFalse(\"Juttata\" in self.jutta_jung)\n\n    def test_contains_3(self):\n        self.assertTrue(\"\" in self.jutta_jung)\n\n    def test_contains_error(self):\n        with self.assertRaises(TypeError):\n            self.assertTrue(self.jut_jung in self.jutta_jung)\n</code></pre> Tipp <p>Es werden 3 Methoden ben\u00f6tigt.</p> L\u00f6sung <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __lt__(self, other):\n        if isinstance(other, Person):\n            return self.age &lt; other.age\n        if isinstance(other, int | float):\n            return self.age &lt; other\n        raise TypeError(f\"Comperator operation only allowed for Persons and float and int\")\n\n    def __le__(self, other):\n        if isinstance(other, Person):\n            return self.age &lt;= other.age\n        if isinstance(other, int | float):\n            return self.age &lt;= other\n        raise TypeError(f\"Comperator operation only allowed for Persons and float and int\")\n\n    def __contains__(self, item):\n        if not isinstance(item, str):\n            raise TypeError(f\"Item ist darf nicht vom Type {type(item)}, sondern muss vom Typ str sein.\")\n        return item in self.name\n</code></pre> <p>In dieser L\u00f6sung haben wir drei Magic Methods implementiert:</p> <ol> <li><code>__lt__</code>: Diese Methode erm\u00f6glicht den \"kleiner als\" Vergleich (&lt;).</li> <li><code>__le__</code>: Diese Methode erm\u00f6glicht den \"kleiner oder gleich\" Vergleich (&lt;=).</li> <li><code>__contains__</code>: Diese Methode erm\u00f6glicht die \u00dcberpr\u00fcfung, ob ein String im Namen enthalten ist.</li> </ol> <p>Mit diesen drei Methoden k\u00f6nnen alle Tests bestanden werden. Die Methoden <code>__gt__</code> und <code>__ge__</code> werden automatisch aus <code>__lt__</code> und <code>__le__</code> abgeleitet.</p>"},{"location":"content/oop/magic_methods/solutions/","title":"Solutions","text":"<pre><code>class Punkt:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        if isinstance(other, Punkt):\n            return Punkt(self.x + other.x, self.y + other.y)\n        else:\n            raise TypeError(\"Unsupported operand type. Use with another Punkt object.\")\n\n    def __eq__(self, other):\n        return (isinstance(other, Punkt)\n                and self.x == other.x\n                and self.y == other.y)\n\n    def __sub__(self, other):\n        return Punkt(self.x - other.x, self.y - other.y)\n</code></pre> <pre><code>from math import isclose\n\nclass Punkt:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        if isinstance(other, Punkt):\n            return Punkt(self.x + other.x, self.y + other.y)\n        else:\n            raise TypeError(\"Unsupported operand type. Use with another Punkt object.\")\n\n    def __eq__(self, other):\n        return (isinstance(other, Punkt)\n                and isclose(self.x, other.x)\n                and isclose(self.y, other.y))\n\n    def __sub__(self, other):\n        return Punkt(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        if isinstance(other, int | float):\n            return Punkt(self.x * other, self.y * other)\n        else:\n            raise TypeError(\"Unsupported operand type. Use int or float\")\n</code></pre>"},{"location":"content/oop/methods/methods/","title":"Methoden","text":"Video <p>Wir wollen \"Methoden\" in einigen Schritten definieren:</p> <p>Betrachten wir zun\u00e4chst das folgende Beispiel einer (noch) leeren Roboterklasse. Wir erzeugen eine Instanz und setzen das <code>baujahr</code>:</p> <pre><code>class Roboter:\n    pass\n\nrobo = Roboter()\n\nrobo.baujahr = 1700\nprint(robo.baujahr)\n</code></pre> <p>Nun wollen wir sicherstellen, dass das angegebene Baujahr nicht zu klein ist. 1700 gab es noch keine Roboter. Daher erstellen wir eine Funktion, die als ersten Parameter eine <code>Roboter</code> Instanz erwartet und als zweite das <code>baujahr</code>. Wenn das Baujahr zu klein ist, soll eine Exception geworfen werden:</p> <pre><code>class Roboter:\n    pass\n\n\ndef set_baujahr(roboter, baujahr):\n    if baujahr &lt; 1800:\n        raise ValueError(\"So fr\u00fch gab es noch keine Roboter!\")\n    roboter.baujahr = baujahr\n\n\nrobo = Roboter()\n\nset_baujahr(robo, 2000)\nprint(robo.baujahr)\n</code></pre> <p>Soweit so gut, der Code funktioniert, aber eigentlich geh\u00f6rt die Methode <code>set_baujahr</code> ja eigentlich zu Klasse  <code>Roboter</code>. Sie sollte nicht auch von anderen Instanzen anderer Klassen aufrufbar sein. Wir k\u00f6nnen die Funktion daher in den Klassenrumpf verschieben und machen aus ihr so eine Methode.</p> <p>Dadurch \u00e4ndert sich noch ein weiteres Detail, um die Methode nun aufzurufen, m\u00fcssen wir sie zun\u00e4chst aus  der Klasse  <code>Roboter</code> herausbekommen, indem wir <code>Roboter.set_baujahr(...)</code> aufrufen (\u00e4hnlich wie beim abfragen eines Klassenattributes). Nun funktioniert der folgende Code:</p> <pre><code>class Roboter:\n    def set_baujahr(roboter, baujahr):\n        if baujahr &lt; 1800:\n            raise ValueError(\"So fr\u00fch gab es noch keine Roboter!\")\n        roboter.baujahr = baujahr\n\n\nrobo = Roboter()\n\nRoboter.set_baujahr(robo, 2000)\n\nprint(robo.baujahr)\n</code></pre> <p>Wir haben nun unsere erste Methode definiert. \ud83c\udf89</p> <p>Wir k\u00f6nnen jedoch noch zwei Dinge versch\u00f6nern, was wir auch auf jeden Fall tun sollten.</p> <ol> <li>Wir sollten den Namen des ersten Parameters auf <code>self</code> setzen. Es ist Konvention den ersten Namen einer Methode <code>self</code> zu nennen, da dieser immer die Instanz referenziert, die gerade behandelt wird.</li> <li>Wir k\u00f6nnen die Methode auch mit der Notation <code>robo.set_baujahr(2000)</code> aufrufen. Genauso wie bei Klassenattributen haben auch die Instanzen Zugriff auf die Methode. Wir m\u00fcssen dann den ersten Parameter <code>self</code> nicht mehr setzen, da diese gleich der Instanz ist, die diese Methode aufgerufen hat.</li> </ol> <p>Der Code sieht dann also wie folgt aus:</p> <pre><code>class Roboter:\n    def set_baujahr(self, baujahr):\n        if baujahr &lt; 1800:\n            raise ValueError(\"So fr\u00fch gab es noch keine Roboter!\")\n        self.baujahr = baujahr\n\n\nrobo = Roboter()\n\n# Roboter.set_baujahr(robo, 2000)\n\nrobo.set_baujahr(2000)\n\nprint(robo.baujahr)\n</code></pre> Koordinaten setzen <p>Erstelle in der folgenden Klasse <code>Point</code> zwei Methoden <code>set_coordinates(self, x, y)</code> und <code>get_coordinates(self)</code>.</p> <ul> <li><code>set_coordinates</code> setzt das <code>x</code> und das <code>y</code> Attribut des Objektes.</li> <li><code>get_coordinates</code> gibt die beiden Punkte als zwei R\u00fcckgabewerte zur\u00fcck.</li> </ul> <p>Der folgende Code soll dann funktionieren:  <pre><code>point = Point()\npoint.set_coordinates(3, 5)\nx, y = point.get_coordinates()\nprint(f\"Punkt hat den x-Wert {x} und den y-Wert {y}\")\n</code></pre></p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>class Point:\n    def set_coordinates(self, x, y):\n        self.x = x\n        self.y = y\n\n    def get_coordinates(self):\n        return self.x, self.y\n\n\npoint = Point()\npoint.set_coordinates(3, 5)\nx, y = point.get_coordinates()\nprint(f\"Punkt hat den x-Wert {x} und den y-Wert {y}\")\n</code></pre>"},{"location":"content/oop/methods/methods/#jede-instanz-hat-eigene-attribute","title":"Jede Instanz hat eigene Attribute","text":"Video <p>Wir sehen im folgenden Beispiel, dass jede Instanz ihre eigenen Attribute hat und wir auf diese in Methoden zugreifen k\u00f6nnen:</p> <pre><code>class Roboter:\n    def sage_hallo(self):\n        print(f\"Hallo, ich bin {self.name}.\")\n\nx = Roboter()\ny = Roboter()\n\nx.name = \"Marvin\"\ny.name = \"Justin\"\n\nx.sage_hallo()\ny.sage_hallo()\n</code></pre> <p>Beachte, wie hier innerhalb der Methode auf das Attribut <code>name</code> zugegriffen wurde, indem <code>self.name</code> abgefragt wurde, denn <code>self</code> referenziert ja die Instanz, die die Methode aufruft.</p>"},{"location":"content/oop/methods/methods/#instanziieren-mit-__init__","title":"Instanziieren mit <code>__init__</code>","text":"Video <p>Der obige Code hat aber noch ein Problem: wenn eine Instanz kein Attribut <code>name</code> besitzt, kommt es zu einer Exception:</p> <pre><code>class Roboter:\n    def sage_hallo(self):\n        print(f\"Hallo, ich bin {self.name}.\")\n\ny = Roboter()\n\ny.sage_hallo()\n</code></pre> <p>Wir m\u00f6chten also gerne, dass jede Roboterinstanz ein Attribut <code>name</code> besitzt.</p> <p>In Klassen k\u00f6nnen wir die Methode <code>__init__</code> definieren, die aufgerufen wird, wenn eine neue Instanz erstellt wird. Hier k\u00f6nnen wir dann z.B. direkt bestimmte Attribute festlegen:</p> <pre><code>class Roboter:\n    def __init__(self, name):\n        self.name = name\n\n    def sage_hallo(self):\n        print(f\"Hallo, ich bin {self.name}.\")\n\ny = Roboter(\"Karl\")\n\ny.sage_hallo()\n</code></pre> <p>Oft verwirrt, dass es bei <code>__init__</code> auch erforderlich ist, dass der erste Parameter <code>self</code> ist. <code>__init__</code> erstellt n\u00e4mlich tats\u00e4chlich gar keine Instanz. Das wird \u00fcber eine andere Methode, namens <code>__new__</code> gesteuert. Diese sehen wir hier gar nicht und wird stillschweigend von Python aufgerufen, als  wir <code>Roboter(\"Karl\")</code> ausf\u00fchren. Auf dieser frischen Instanz wird dann <code>__init__</code> ausgef\u00fchrt und die Attribute werden festgelegt. Wer mehr dazu erfahren m\u00f6chte, lese die  Pythondoku  oder diesen Artikel.</p> <p>\ud83d\udd05Merke: <code>__new__</code> instanziiert, <code>__init__</code> initialisiert.</p> Koordinaten von vornherein setzen <p>Erweitere die Klasse <code>Point</code> aus der vorherigen Aufgabe um eine <code>__init__</code> Methode, sodass direkt <code>x</code> und <code>y</code> Wert gesetzt werden k\u00f6nnen. Der folgende Code soll also ausf\u00fchrbar sein:</p> <pre><code>point = Point(4, 7)\nx, y = point.get_coordinates()\nprint(f\"Punkt hat den x-Wert {x} und den y-Wert {y}\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def set_coordinates(self, x, y):\n        self.x = x\n        self.y = y\n\n    def get_coordinates(self):\n        return self.x, self.y\n\n\npoint = Point(4, 7)\nx, y = point.get_coordinates()\nprint(f\"Punkt hat den x-Wert {x} und den y-Wert {y}\")\n</code></pre> Auf in den Kampf! <p>Erstelle eine Klasse Gladiator nach der folgenden Vorlage:</p> <pre><code>class Gladiator:\n    def __init__(self,name, hitpoints, attackpower):\n        ...\n\n    def attack(self, enemy):\n        ...\n\n    def is_alive(self):\n        ...\n\n    def health_check(self):\n        ... # Nutze hier is_alive\n\n\nattacker = Gladiator(name=\"Glassy\", hitpoints=10, attackpower=20)\ndefender = Gladiator(name=\"Tanky\", hitpoints=30, attackpower=5)\n\nprint(defender.health_check()) # Tanky hat noch 30 HP\nattacker.attack(defender)\nprint(defender.health_check()) # Tanky hat noch 10 HP\nattacker.attack(defender)\nprint(defender.health_check()) # Tanky liegt am Boden\n</code></pre> <p>Sorge daf\u00fcr, dass die richtigen Konsolentexte erscheinen. \u2694\ufe0f</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>class Gladiator:\n    def __init__(self,name, hitpoints, attackpower):\n        self.name = name\n        self.hitpoints = hitpoints\n        self.attackpower = attackpower\n\n    def attack(self, enemy):\n        enemy.hitpoints -= self.attackpower\n\n    def is_alive(self):\n        return self.hitpoints &gt; 0\n\n    def health_check(self):\n        if self.is_alive():\n            return f\"{self.name} hat noch {self.hitpoints} HP.\"\n        else:\n            return f\"{self.name} liegt am Boden.\" \n\n\nattacker = Gladiator(name=\"Glassy\", hitpoints=10, attackpower=20)\ndefender = Gladiator(name=\"Tanky\", hitpoints=30, attackpower=5)\n\nprint(defender.health_check()) # Tanky hat noch 30 HP\nattacker.attack(defender)\nprint(defender.health_check()) # Tanky hat noch 10 HP\nattacker.attack(defender)\nprint(defender.health_check()) # Tanky liegt am Boden\n</code></pre> Ab in die Arena! <p>Erstelle eine Klasse <code>Arena</code>, bei der als Attribute zwei Gladiatoren festgelegt werden. Die beiden Gladiatoren sollen sich hier gegenseitig angreifen, bis nur noch einer steht.</p> <p>Um den Kampf zu starten, soll eine Methode <code>fight</code> implementiert werden. Du kannst gerne Print-Messages hinzuf\u00fcgen, die den Kampf spannend und nachvollziehbar gestalten. Der folgende Code soll durchf\u00fchrbar sein:</p> <pre><code>a = Gladiator(name=\"Glassy\", hitpoints=10, attackpower=20)\nd = Gladiator(name=\"Tanky\", hitpoints=30, attackpower=5)\n\narena = Arena(a, d)\narena.fight()\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>class Arena:\n    def __init__(self, attacker: Gladiator, defender: Gladiator):\n        self.attacker = attacker\n        self.defender = defender\n\n    def fight(self):\n        while self.attacker.is_alive() and self.defender.is_alive():\n            self.attacker, self.defender = self.defender, self.attacker\n            self.attacker.attack(self.defender)\n\n        winner = self.attacker if self.attacker.is_alive() else self.defender\n\n        print(f\"The winner is {winner.name}!\ud83c\udf89\ud83c\udf89\ud83c\udf89\")\n</code></pre>"},{"location":"content/oop/methods/solutions/","title":"Solutions","text":""},{"location":"content/oop/methods/solutions/#aufgabe-wir-sind-hier-bei-vw","title":"Aufgabe: Wir sind hier bei VW","text":"<pre><code>class Car:\n    def __init__(self, speed, marke='VW'):\n        self.speed = speed\n        self.marke = marke\n\n    def change_speed(self, change):\n        self.speed += change\n\n\na = Car(50)\nprint(f\"Marke: {a.marke}\")\n\nprint(f\"Geschwindigkeit: {a.speed}\")\na.change_speed(100)\nprint(f\"Geschwindigkeit: {a.speed}\")\n</code></pre>"},{"location":"content/oop/unittests/solutions/","title":"Solutions","text":""},{"location":"content/oop/unittests/solutions/#aufgabe-den-wald-vor-lauter-baumen","title":"Aufgabe: Den Wald vor lauter B\u00e4umen","text":"<pre><code># suchbaum.py\n\nclass Suchbaum:\n\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def add(self, new_value):\n        if new_value &lt; self.value:\n            if self.left is None:\n                self.left = Suchbaum(new_value)\n            else:\n                self.left.add(new_value)\n        else:\n            if self.right is None:\n                self.right = Suchbaum(new_value)\n            else:\n                self.right.add(new_value)\n\n    def contains(self, value_to_find):\n        if self.value == value_to_find:\n            return True\n\n        if self.left is not None and value_to_find &lt; self.value:\n            return self.left.contains(value_to_find)\n\n        if self.right is not None and self.value &lt; value_to_find:\n            return self.right.contains(value_to_find)\n\n        return False\n</code></pre>"},{"location":"content/oop/unittests/unittests/","title":"Unittest","text":"\ud83c\udfa6 Video  <p>Wir haben im Kapitel Docstring gesehen, wie man Unittests in den Docstring einbauen kann. Das ist n\u00fctzlich, um sicherzustellen, dass der Nutzer Codebeispiele besitzt und diese auch immer Funktionieren.</p> <p>Eine weitere M\u00f6glichkeit Unittests zu schreiben ist mittels des Pakets <code>unittest</code>. Der offensichtlichste Unterschied zum Modul <code>doctest</code> besteht darin, dass die Testf\u00e4lle bei dem Modul <code>unittest</code> au\u00dferhalb des eigentlichen Programmcodes definiert werden, d.h. normalerweise in einer eigenen Datei. Der Vorteil besteht unter anderem darin, dass die Programmdokumentation und die ausf\u00fchrliche Testung voneinander getrennt sind. Der Preis daf\u00fcr besteht jedoch in einem erh\u00f6hten Aufwand f\u00fcr die Erstellung der Tests. Doch dieser lohnt sich.</p> <p>Wir wollen nun f\u00fcr unser Modul <code>fibonacci.py</code> einen Test mit <code>unittest</code> erstellen.</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>def fib(n):\n    \"\"\" \n    Die Fibonacci-Zahl f\u00fcr die n-te \n    Generation wird iterativ berechnet\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fib(6))\n</code></pre> <p>In einer Datei, z.B. <code>fibonacci_unittest.py</code>, m\u00fcssen wir das Modul <code>unittest</code> und das zu testende Modul, also in unserem Fall <code>fibonacci</code>, importieren.</p> <p>Hinweis: Es empfiehlt sich eine einheitliche Konvention innerhalb des Projekts f\u00fcr die Dateinamen die Tests enthalten zu w\u00e4hlen. Wird Visual Studio Code verwendet so sollte f\u00fcr die Ausf\u00fchrungserkennung das Wort <code>test</code> im Dateinamen vorkommen. Entweder <code>fibonacci_test.py</code> oder <code>test_fibonacci.py</code> abh\u00e4ngig davon, ob bevorzugt wird alle Testdateien im Dateibaum nebeneinandern zu haben, oder alternativ die Testdatei neben der Codedatei, die sie testet, liegen zu haben.</p> <p>Au\u00dferdem m\u00fcssen wir eine Klasse mit beliebigem Namen - wir w\u00e4hlen in unserem Beispiel <code>FibonacciTest</code> - erstellen, die von <code>unittest.TestCase</code> erbt. Wir werden das Konzept von Vererbung sp\u00e4ter genauer betrachtet; kurz gesagt sorgen wir so daf\u00fcr, dass unsere neue Klasse schon jede Menge Funktionen bereith\u00e4lt.</p> <p>In dieser Klasse werden die n\u00f6tigen Testf\u00e4lle in Methoden definiert. Der Name dieser Methoden ist nicht beliebig, denn er muss mit test beginnen. In den Methoden benutzen wir die Methode <code>assertEqual</code> der Klasse <code>TestCase</code>. <code>assertEqual(first, second, msg = None)</code> pr\u00fcft, ob der Ausdruck <code>first</code> gleich dem Ausdruck <code>second</code> ist. Falls die beiden Ausdr\u00fccke ungleich sind, wird <code>msg</code> ausgegeben, wenn <code>msg</code> ungleich <code>None</code> ist.</p> <pre><code>import unittest\nfrom fibonacci import fib\n\n\nclass FibonacciTest(unittest.TestCase):\n\n    def test_calculation_0(self):\n        self.assertEqual(fib(0), 0)\n\n    def test_calculation_1(self):\n        self.assertEqual(fib(1), 1)\n\n    def test_calculation_2(self):\n        self.assertEqual(fib(5), 5)\n\n    def test_calculation_3(self):\n        self.assertEqual(fib(10), 55)\n\n    def test_calculation_4(self):\n        self.assertEqual(fib(20), 6765)\n\n\nunittest.main()\n\n# F\u00fcr Jupyter/IPython Sessions:\n# unittest.main(argv=[''], verbosity=2, exit=False) \n</code></pre> <p>Rufen wir obigen Test auf, erhalten wir folgende Ausgabe:</p> <pre><code>Launching pytest with arguments python_programm.py::FibonacciTest --no-header --no-summary -q in C:\\Users\\Vikto\\PycharmProjects\\wiki-python\n\n============================= test session starts =============================\ncollecting ... collected 5 items\n\npython_programm.py::FibonacciTest::test_calculation_0 \npython_programm.py::FibonacciTest::test_calculation_1 \npython_programm.py::FibonacciTest::test_calculation_2 \npython_programm.py::FibonacciTest::test_calculation_3 \npython_programm.py::FibonacciTest::test_calculation_4 \n\n============================== 5 passed in 0.03s ==============================\nPASSED                   [ 20%]PASSED                   [ 40%]PASSED                   [ 60%]PASSED                   [ 80%]PASSED                   [100%]\nProcess finished with exit code 0\n</code></pre> <p>Bei der normalen Programmentwicklung ist dies das von uns gew\u00fcnschte Ergebnis.</p>"},{"location":"content/oop/unittests/unittests/#methoden-der-klasse-testcase","title":"Methoden der Klasse TestCase","text":"<p>Wir wollen nun n\u00e4her auf die Klasse TestCase eingehen. Wir stellen dazu einige wichtige Methoden dieser Klasse vor.</p> Methode Bedeutung <code>setUp()</code> Bei der Methode <code>setUp</code> handelt es sich um eine sogenannte Hook-Methode. Sie wird vor jedem Aufruf der implementierten Testmethoden aufgerufen. Wird in der Methode setUp eine Ausnahme generiert, so wird diese auch als Error in der Testausgabe ausgegeben. Selbstverst\u00e4ndlich wird auch bei einer Ausnahme im <code>setUp</code>-Code der Test abgebrochen. <code>tearDown()</code> Die Methode <code>tearDown</code> wird nach dem Aufruf einer Testmethode gestartet. Ebenso wie bei setUp gilt, dass im Code von tearDown generierte Ausnahmen auch in der Testausgabe ausgegeben werden. <code>assertAlmostEqual(self, first, second, places=None, msg=None, delta=None)</code> Diese Methode schl\u00e4gt fehl, wenn die Differenz der beiden Parameter <code>first</code> und <code>second</code> gleich <code>0</code> ist, nachdem man sie vor dem Vergleich auf <code>places</code> Nachkommastellen gerundet hatte. Der Default-Wert f\u00fcr <code>places</code> ist <code>7</code>. <code>assertCountEqual(self, first, second, msg=None)</code> Die Parameter <code>first</code> und <code>second</code> m\u00fcssen hierbei sequentielle Datentypen sein. Es muss folgendes gelten:Alle Elemente m\u00fcssen genauso oft in <code>first</code> wie in <code>second</code> vorkommen.Beispiel:<code>[0, 1, 1]</code> und <code>[1, 0, 1]</code> gelten in obigem Sinne als gleich, weil die 0 und die 1 jeweils gleich oft vorkommen.[0, 0, 1] und [0, 1] sind verschieden, weil die <code>0</code> in der ersten Liste zweimal vorkommt und in der zweiten Liste nur einmal. <code>assertDictEqual(self, d1, d2, msg=None)</code> Betrachtet die beiden Argumente als Dictionaries und pr\u00fcft auf Gleichheit. <code>assertEqual(self, first, second, msg=None)</code> Der Test schl\u00e4gt fehl, wenn die Parameter \"first\" und \"second\" nicht gleich sind. Dabei ist Gleichheit im Sinne von \"==\" gemeint, also Wertegleichheit und nicht nur reine Objektgleichheit. <code>assertTrue(self, expr, msg=None)</code> Pr\u00fcft, ob der Ausdruck <code>expr</code> <code>True</code> ist. <code>assertGreater(self, a, b, msg=None)</code> Pr\u00fcft, ob a &gt; b gilt. <code>assertGreaterEqual(self, a, b, msg=None)</code> Pr\u00fcft, ob a \u2265 b gilt. <code>assertFalse(self, expr, msg=None)</code> Pr\u00fcft, ob der Ausdruck <code>expr</code> <code>False</code> ist. <code>assertLess(self, a, b, msg=None)</code> Pr\u00fcft, ob a &lt; b gilt. <code>assertLessEqual(self, a, b, msg=None)</code> Pr\u00fcft, ob a \u2264 b gilt. <code>assertIn(self, member, container, msg=None)</code> Pr\u00fcft, ob a in b gilt. <code>assertIs(self, expr1, expr2, msg=None)</code> Pr\u00fcft, ob \"a is b\" gilt. <code>assertIsInstance(self, obj, cls, msg=None)</code> Pr\u00fcft, ob isinstance(obj, cls) gilt. <code>assertIsNone(self, obj, msg=None)</code> Pr\u00fcft, ob \"obj is None\" gilt. <code>assertIsNot(self, expr1, expr2, msg=None)</code> Pr\u00fcft, ob \"a is not b\" gilt. <code>assertIsNotNone(self, obj, msg=None)</code> Pr\u00fcft, ob obj nicht None ist. <code>assertListEqual(self, list1, list2, msg=None)</code> Listen werden auf Gleichheit gepr\u00fcft. <code>assertMultiLineEqual(self, first, second, msg=None)</code> Mehrzeilige Strings werden auf Gleichheit gepr\u00fcft. <code>assertNotRegexpMatches(self, text, unexpected_regexp, msg=None)</code> Schl\u00e4gt fehl, wenn der Text \"text\" den regul\u00e4ren Ausdruck unexpected_regexp matched. <code>assertRaises(exception, callable, msg=None)</code> Pr\u00fcft, ob die angegebene Exception geworfen wird, wenn das <code>callable</code> aufgerufen wird. Wird gerne in einem <code>with</code>-Block verwendet. <code>assertTupleEqual(self, tuple1, tuple2, msg=None)</code> Analog zu assertListEqual <p>Sie dazu die Dokumentation.</p>"},{"location":"content/oop/unittests/unittests/#aufgabe-eigene-test-schreiben","title":"Aufgabe: Eigene Test schreiben\ud83c\udf36\ud83c\udf36","text":"<p>Schreibe Tests f\u00fcr die folgende Funktion, die alle positiven Zahlen in einer Liste aufsummiert:</p> <p><pre><code>def sum_positives(mylist):\n    return sum(i for i in mylist if i &gt; 0)\n</code></pre> Schreibe dabei Tests f\u00fcr folgende F\u00e4lle:</p> <ul> <li>leere Liste wird \u00fcbergeben.</li> <li>Liste mit einem Element wird \u00fcbergeben.</li> <li>Liste mit mehr als einem Element wird \u00fcbergeben.</li> <li>Eine Liste mit den Zahlen von 1 bis 1000 \u00fcbergeben wird</li> <li>Liste nur aus negativen Zahlen wird \u00fcbergeben.</li> <li>Liste mit nur positiven Zahlen verh\u00e4lt sich genauso wie <code>sum</code>.</li> <li>Exception wird geworfen, wenn z.B. ein Integer \u00fcbergeben wird (Recherche n\u00f6tig).</li> <li>Wenn die Liste <code>float</code> enth\u00e4lt, ist der R\u00fcckgabetyp auch float.</li> <li>der Output f\u00fcr <code>[0.1, 0.2, -0.5]</code> ist fast <code>0.3</code>.</li> </ul> L\u00f6sung <pre><code>import unittest\n\ndef sum_positives(mylist):\n    return sum(i for i in mylist if i &gt; 0)\n\nclass SumTest(unittest.TestCase):\n    # * leere Liste wird \u00fcbergeben.\n    def test_sum_empty(self):\n        self.assertEqual(sum_positives([]), 0)\n\n    # * Liste mit einem Element wird \u00fcbergeben.\n    def test_sum_singleton(self):\n        self.assertEqual(sum_positives([5]), 5)\n\n    # * Liste mit mehr als einem Element wird \u00fcbergeben.\n    def test_sum_multiple_elements(self):\n        self.assertEqual(sum_positives([5, -5, 12]), 17)\n\n    # * Eine Liste mit den Zahlen von 1 bis 1000 \u00fcbergeben wird\n    def test_big_sum(self):\n        n = 1000\n        big_list = list(range(1, n + 1))\n        expected = (n * (n+1)) // 2\n        self.assertEqual(sum_positives(big_list), expected)\n\n    # * Liste nur aus negativen Zahlen wird \u00fcbergeben.\n    def test_only_negative_numbers(self):\n        self.assertEqual(sum_positives([-1, -3, -4]), 0)\n\n    # * Liste mit nur positiven Zahlen verh\u00e4lt sich genauso wie `sum`.\n    def test_sum_equal_to_sum_positive_when_only_positive(self):\n        my_list = [3, 5, 29, 4, 2]\n        self.assertEqual(sum_positives(my_list), sum(my_list))\n\n    # * Exception wird geworfen, wenn z.B. ein Integer \u00fcbergeben wird (Recherche n\u00f6tig).\n    def test_exception_when_wrong_type(self):\n        with self.assertRaises(TypeError):\n            sum_positives(2)\n\n    # * Wenn die Liste `float` enth\u00e4lt, ist der R\u00fcckgabetyp auch float.\n    def test_return_float_when_input_float(self):\n        self.assertIsInstance(sum_positives([0.3]), float)\n\n    # * der Output f\u00fcr `[0.1, 0.2, -0.5]` ist fast `0.3`.\n    def test_floaty_example(self):\n        self.assertAlmostEqual(sum_positives([0.1, 0.2, -0.5]), 0.3)\n\nunittest.main()</code></pre>"},{"location":"content/oop/unittests/unittests/#aufgabe-erst-die-tests","title":"Aufgabe: Erst die Tests\ud83c\udf36\ud83c\udf36","text":"<p>Erstelle f\u00fcnf Tests f\u00fcr die Funktion <code>get_capital_letters(string)</code>. Diese Funktion gibt einem aus einem String alle Gro\u00dfbuchstaben zur\u00fcck. Zum Beispiel: </p> <p><pre><code>get_capital_letters(\"Ich liebe den BVB\") # \"IBVB\" \n</code></pre> \u00dcberlege dir, dass die Tests verschiedene Szenarien abfragen. Erst nachdem du die Tests geschrieben hast, implementiere die Funktion!</p> L\u00f6sung <pre><code>import unittest\n\n\ndef get_capital_letters(string):\n    return \"\".join(letter for letter in string if letter.isupper())\n\n\n\nclass TestCapitalLetters(unittest.TestCase):\n    def test_empty(self):\n        self.assertEqual(get_capital_letters(\"\"), \"\")\n\n    def test_normalen_satz(self):\n        self.assertEqual(get_capital_letters(\"Hallo. Ich bin in Kiel.\"), \"HIK\")\n\n    def test_only_capital_letters(self):\n        string = \"ABCEDGEFGHDDSE\"\n        self.assertEqual(get_capital_letters(string), string)\n\n    def test_no_capital_letters(self):\n        self.assertEqual(get_capital_letters(\"abcdefg\"), \"\")\n\n    def test_correct_return_type(self):\n        self.assertIsInstance(get_capital_letters(\"Hallo du\"), str)\n</code></pre>"},{"location":"content/oop/unittests/unittests/#aufgabe-wie-viele-tests","title":"Aufgabe: Wie viele Tests","text":"<p>Wie viele Tests sind im folgenden Programmcode notwendig, um alle F\u00e4lle zu testen? Schreibe die dazugeh\u00f6rigen Tests.</p> <pre><code>def get_price(age, is_weekend):\n    if is_weekend:\n        if age &lt; 12:\n            return 0\n        else:\n            return 5\n    else:\n        if age &lt; 12:\n            return 2\n        else:\n            return 7\n</code></pre> L\u00f6sung <pre><code>import unittest\n\n\nclass PriceTest(unittest.TestCase):\n    def test_get_price_0(self):\n        self.assertEqual(get_price(11, True), 0)\n\n    def test_get_price_1(self):\n        self.assertEqual(get_price(12, True), 5)\n\n    def test_get_price_2(self):\n        self.assertEqual(get_price(11, False), 2)\n\n    def test_get_price_3(self):\n        self.assertEqual(get_price(12, False), 7)\n</code></pre>"},{"location":"content/oop/unittests/unittests/#aufgabe-den-wald-vor-lauter-baumen","title":"Aufgabe: Den Wald vor lauter B\u00e4umen\ud83c\udf36\ud83c\udf36\ud83c\udf36\ud83c\udf36","text":"<p>Diese Aufgabe dient den Selbststudium zu Hause.</p> <p>Wir wollen nun einen Suchbaum implementieren. Erstelle also eine Klasse <code>Suchbaum</code>. Instanzen der Klasse haben drei Attribute:</p> <ul> <li><code>value</code>, in dem der Wert des Knotens gespeichert wird.</li> <li><code>left</code>, in dem ein anderer Suchbaum oder <code>None</code> gespeichert ist.</li> <li><code>right</code>, in dem ein anderer Suchbaum oder <code>None</code> gespeichert ist.</li> </ul> <p>Weiterhin soll es folgende Funktionen geben:</p> <pre><code>class Suchbaum:\n\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def add(self, new_value):\n        \"\"\"F\u00fcgt dem Suchbaum ein neues Element hinzu. Wenn *new_value* &lt; *self.value* ist,\n        so wird es dem linken Teilbaum hinzugef\u00fcgt. Andernfalls dem rechten.\n\n        Wenn der jeweilige Teilbaum nicht existiert, wird er erstellt.\"\"\"\n        ...\n\n    def contains(self, element):\n        \"\"\"Pr\u00fcft, ob das *element* im Suchbaum ist und gibt True zur\u00fcck, wenn ja.\"\"\"\n        ...\n</code></pre> <p>F\u00fcllen die Funktionsr\u00fcmpfe, sodass die folgenden Unit-Tests gr\u00fcn werden:</p> <pre><code>import unittest\n\nclass SuchbaumTest(unittest.TestCase):\n    def setUp(self):\n        self.tree = Suchbaum(3)\n        self.tree.add(4)\n        self.tree.add(2)\n        self.tree.add(1)\n        self.tree.add(5)\n\n    def test_contains_0(self):\n        self.assertTrue(self.tree.contains(3))\n\n    def test_contains_1(self):\n        self.assertTrue(self.tree.contains(1))\n\n    def test_contains_2(self):\n        self.assertTrue(self.tree.contains(5))\n\n    def test_contains_3(self):\n        self.assertFalse(self.tree.contains(7))\n\n    def test_contains_4(self):\n        self.assertTrue(Suchbaum(2).contains(2))\n\n    def test_contains_5(self):\n        self.assertFalse(Suchbaum(3).contains(2))\n\n\nunittest.main()\n</code></pre> L\u00f6sung <pre><code>class Suchbaum:\n\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def add(self, new_value):\n        if new_value &lt; self.value:\n            if self.left is None:\n                self.left = Suchbaum(new_value)\n            else:\n                self.left.add(new_value)\n        else:\n            if self.right is None:\n                self.right = Suchbaum(new_value)\n            else:\n                self.right.add(new_value)\n\n    def contains(self, value_to_find):\n        if self.value == value_to_find:\n            return True\n\n        if self.left is not None and value_to_find &lt; self.value:\n            return self.left.contains(value_to_find)\n\n        if self.right is not None and self.value &lt; value_to_find:\n            return self.right.contains(value_to_find)\n\n        return False</code></pre>"},{"location":"content/oop/vererbung/solutions/","title":"Solutions","text":""},{"location":"content/oop/vererbung/solutions/#aufgabe-typen-erkennen","title":"Aufgabe: Typen erkennen\ud83c\udf36","text":"Eingabe Ausgabe <code>type(s)</code> <code>&lt;class '__main__.Square'&gt;</code> <code>type(s).__mro__</code> <code>(&lt;class '__main__.Square'&gt;, &lt;class '__main__.Rectangle'&gt;, &lt;class 'object'&gt;)</code> <code>Square.__mro__</code> <code>(&lt;class '__main__.Square'&gt;, &lt;class '__main__.Rectangle'&gt;, &lt;class 'object'&gt;)</code> <code>isinstance(s, Square)</code> <code>True</code> <code>isinstance(s, Rectangle)</code> <code>True</code> <p>Es werden bei <code>__mro__</code> also alle Obertypen aufgelistet.</p> <p>print(type(s)) #  print(type(s).mro) # , , ) print(Square.mro) # , , ) print(isinstance(s, Square)) # True print(isinstance(s, Rectangle)) # True"},{"location":"content/oop/vererbung/solutions/#aufgabe-geometry","title":"Aufgabe: Geometry","text":"<pre><code>from math import isclose\n\n\nclass Form:\n    def umfang(self):\n        raise NotImplementedError(\"Kann nicht f\u00fcr diese Allgemeine Form bestimmt werden\")\n\n    def inhalt(self):\n        raise NotImplementedError(\"Kann nicht f\u00fcr diese Allgemeine Form bestimmt werden\")\n\n\nclass Dreieck(Form):\n    def __init__(self, size_a, size_b, size_c):\n        self.size_a = size_a\n        self.size_b = size_b\n        self.size_c = size_c\n\n    def umfang(self):\n        return self.size_a + self.size_b + self.size_c\n\n    def inhalt(self):\n        s = self.umfang() / 2\n        result = (s * (s - self.size_a) * (s - self.size_b) * (s - self.size_c)) ** 0.5\n        return result\n\n    def hat_90_grad_winkel(self):\n        squared_sizes = [s ** 2 for s in (self.size_a, self.size_b, self.size_c)]\n        squared_sizes.sort()\n        return isclose(squared_sizes[0] + squared_sizes[1], squared_sizes[2])\n\n\nclass Kreis(Form):\n    PI = 3.14159265358979323846\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def umfang(self):\n        return 2 * self.PI * self.radius\n\n    def inhalt(self):\n        return self.PI * self.radius ** 2\n\n\nclass Viereck(Form):\n    def __init__(self, size_a, size_b, size_c, size_d):\n        self.size_a = size_a\n        self.size_b = size_b\n        self.size_c = size_c\n        self.size_d = size_d\n\n    def umfang(self):\n        return self.size_a + self.size_b + self.size_c + self.size_d\n\n\nclass Parallelogramm(Viereck):\n    def __init__(self, size_a, size_b):\n        super().__init__(size_a, size_b, size_a, size_b)\n\n    def inhalt(self):\n        return self.size_a * self.size_b\n</code></pre>"},{"location":"content/oop/vererbung/vererbung/","title":"Vererbung","text":"<p>Die Vererbung ist ein fundamentales Konzept in der objektorientierten Programmierung (OOP), das die Wiederverwendbarkeit von Code erm\u00f6glicht. In Python wird Vererbung durch die Schaffung von Klassen als Unterklasse einer anderen Klasse realisiert.</p>"},{"location":"content/oop/vererbung/vererbung/#beispiel-1","title":"Beispiel 1","text":"Video <p>Wir erzeugen als erstes Beispiel daf\u00fcr eine Klasse <code>Rectangle</code>:</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Rectangle:\n    def __init__(self, sizeA, sizeB):\n        self.sizeA = sizeA\n        self.sizeB = sizeB\n\n    def get_volume(self):\n        return self.sizeA * self.sizeB\n\nr = Rectangle(3, 4)\nprint(r.get_volume())\n</code></pre> <p>Nun gibt es aber auch spezielle Rechtecke, wie z.B. Quadrate. Wenn wir diese definieren, dann wollen wir gerne die Implementierung von <code>Rectangle</code> nutzen. Wir erreichen dies, indem wir eine Klasse <code>Square</code> definieren, die von <code>Rectangle</code> erbt. Dies zeigen wir an, indem wir beim Klassenkopf nach dem Klassennamen in runden Klammern notieren, was die Oberklasse sein soll. Die abgeleitete Klasse <code>Square</code> hat zugriff auf alle Attribute und Funktionen, die in <code>Rectangle</code> definiert sind:</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Rectangle:\n    def __init__(self, sizeA, sizeB):\n        self.sizeA = sizeA\n        self.sizeB = sizeB\n\n    def get_volume(self):\n        return self.sizeA * self.sizeB\n\n\nclass Square(Rectangle):\n    def __init__(self, size):\n        self.sizeA = size\n        self.sizeB = size\n\n\ns = Square(4)\nprint(s.get_volume())\n</code></pre> <p>Wir sehen hier, dass die <code>Square</code>-instanz <code>s</code> auf die Funktion <code>get_volume</code> aus <code>Rectangle</code> zugreifen kann.</p> <pre><code>classDiagram\n    Rectangle &lt;| -- Square\n    class Rectangle{\n        sizeA\n        sizeB\n        __init__(self, sizeA, sizeB)\n        get_volume()\n    }\n    class Square{\n        __init__(self, size)\n    }</code></pre> <p>Unser Code erlaubt noch eine Verbesserung. Wir legen im <code>__init__</code> von <code>Square</code> die Felder <code>sizeA</code> und <code>sizeB</code> selbst fest, statt die <code>__init__</code> Methode von <code>Rectangle</code> auszunutzen. Hier gibt es zwei Varianten, wie wir vorgehen k\u00f6nnten. Wir k\u00f6nnten <code>Rectange.__init__(self, size, size)</code> aufrufen, oder wir nutzen die <code>super()</code> Methode wie folgt:</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Rectangle:\n    def __init__(self, sizeA, sizeB):\n        self.sizeA = sizeA\n        self.sizeB = sizeB\n\n    def get_volume(self):\n        return self.sizeA * self.sizeB\n\n\nclass Square(Rectangle):\n    def __init__(self, size):\n        super().__init__(size, size)\n\n\ns = Square(4)\nprint(s.get_volume())\n</code></pre> Typen erkennen <p>Erstelle eine Instanz <code>s</code> von <code>Square</code>. Beantworte dann folgende Fragen:</p> <ol> <li>Was ist <code>type(s)</code>?</li> <li>Was ist <code>type(s).__mro__</code> bzw. <code>Square.__mro__</code>?</li> <li>Was ist das Ergebnis von <code>isinstance(s, Square)</code>?</li> <li>Was ist das Ergebnis von <code>isinstance(s, Rectangle)</code>?</li> </ol> L\u00f6sung <p>Hier sind die Antworten:</p> <ol> <li><code>type(s)</code> ist <code>&lt;class '__main__.Square'&gt;</code>.</li> <li><code>type(s).__mro__</code> bzw. <code>Square.__mro__</code> ist <code>(&lt;class '__main__.Square'&gt;, &lt;class '__main__.Rectangle'&gt;, &lt;class 'object'&gt;)</code>.</li> <li><code>isinstance(s, Square)</code> ergibt <code>True</code>.</li> <li><code>isinstance(s, Rectangle)</code> ergibt ebenfalls <code>True</code>.</li> </ol> <p>Es werden bei <code>__mro__</code> also alle Obertypen aufgelistet, von der spezifischsten zur allgemeinsten Klasse.</p>"},{"location":"content/oop/vererbung/vererbung/#beispiel-2","title":"Beispiel 2","text":"Video <p>Im folgenden Beispiel sehen wir, wie <code>super()</code> sowohl daf\u00fcr verwendet wird,  wie die <code>__init__</code> Methode aufzurufen, als auch die Methdoe <code>starten</code>, die in der Klasse <code>Elektroauto</code> \u00fcberschrieben wird.</p> <p>Link zum Onlinecompiler\ud83d\udcbb</p> <pre><code>class Auto:\n    def __init__(self, marke, modell):\n        self.marke = marke\n        self.modell = modell\n\n    def starten(self):\n        return f\"{self.marke} {self.modell} wird gestartet.\"\n\nclass Elektroauto(Auto):\n    def __init__(self, marke, modell, reichweite):\n        super().__init__(marke, modell)\n        self.reichweite = reichweite\n\n    def starten(self):\n        return f\"{super().starten()} Elektromotor wird aktiviert.\"\n\n    def aufladen(self):\n        return f\"{self.marke} {self.modell} wird aufgeladen.\"\n\n# Instanzen erstellen\nmein_auto = Auto(\"Volkswagen\", \"Golf\")\nmein_elektroauto = Elektroauto(\"Tesla\", \"Model S\", 500)\n\n# Methoden aufrufen\nprint(mein_auto.starten())          # Ausgabe: \"Volkswagen Golf wird gestartet.\"\nprint(mein_elektroauto.starten())   # Ausgabe: \"Tesla Model S wird gestartet. Elektromotor wird aktiviert.\"\nprint(mein_elektroauto.aufladen())  # Ausgabe: \"Tesla Model S wird aufgeladen.\"\n</code></pre> Verschiedene Tiere <p>Erstellen Sie eine Python-Anwendung, die folgende Klassen f\u00fcr verschiedene Arten von Tieren implementiert:</p> <ol> <li> <p>Die Basisklasse <code>Tier</code> mit der Eigenschaft <code>name</code> und der Methode <code>bewegen()</code>.    Die Methode <code>bewegen()</code> soll den Namen des Tiers gefolgt von \"bewegt sich\" ausgeben.</p> </li> <li> <p>Die abgeleitete Klasse <code>Hund</code>, die von <code>Tier</code> erbt und zus\u00e4tzlich die Methode <code>bellen()</code> hat.    Die Methode <code>bellen()</code> soll den Namen des Hundes gefolgt von \"bellt\" ausgeben.</p> </li> <li> <p>Die abgeleitete Klasse <code>Katze</code>, die von <code>Tier</code> erbt und zus\u00e4tzlich die Methode <code>miauen()</code> hat.    Die Methode <code>miauen()</code> soll den Namen der Katze gefolgt von \"miaut\" ausgeben.</p> </li> </ol> <p>Der folgende Code soll durchf\u00fchrbar sein:</p> <pre><code>tier1 = Tier(\"Tier1\")\ntier1.bewegen()\n\nhund1 = Hund(\"Bello\")\nhund1.bewegen()\nhund1.bellen()\n\nkatze1 = Katze(\"Minka\")\nkatze1.bewegen()\nkatze1.miauen()\n</code></pre> <p>Implementieren Sie die Klassen <code>Tier</code>, <code>Hund</code> und <code>Katze</code> entsprechend der Anforderungen.</p> L\u00f6sung <p>Hier ist eine m\u00f6gliche L\u00f6sung:</p> <pre><code>class Tier:\n    def __init__(self, name):\n        self.name = name\n\n    def bewegen(self):\n        print(f\"{self.name} bewegt sich.\")\n\n\nclass Hund(Tier):\n    def bellen(self):\n        print(f\"{self.name} bellt.\")\n\n\nclass Katze(Tier):\n    def miauen(self):\n        print(f\"{self.name} miaut.\")\n</code></pre> <p>Diese Implementierung erf\u00fcllt alle Anforderungen der Aufgabe: - Die Basisklasse <code>Tier</code> hat eine <code>name</code> Eigenschaft und eine <code>bewegen()</code> Methode. - Die <code>Hund</code> Klasse erbt von <code>Tier</code> und f\u00fcgt die <code>bellen()</code> Methode hinzu. - Die <code>Katze</code> Klasse erbt von <code>Tier</code> und f\u00fcgt die <code>miauen()</code> Methode hinzu. - Alle Methoden geben die entsprechenden Nachrichten aus, wie in der Aufgabenstellung beschrieben.</p> Geometry <p>Erstelle die folgenden Klassen:</p> <ul> <li><code>Form</code> hat zwei Methoden <code>inhalt</code> und <code>umfang</code>, die beide einen <code>NotImplementedError</code> werfen, wenn sie aufgerufen werden.</li> <li><code>Kreis</code> erbt von <code>Form</code> und hat ein Klassenatrribut <code>PI = 3.14159265358979323846</code> und ein Attribut <code>radius</code>. <code>inhalt</code> und <code>umfang</code> sind implementiert.</li> <li><code>Dreieck</code> erbt von <code>Form</code> und hat drei Seiten <code>sizeA</code>, <code>sizeB</code> und <code>sizeC</code>. Weiterhin gibt es eine Methode <code>hat_90_grad_winkel</code>, die mit dem Satz des Pythagoras pr\u00fcft, ob es einen 90\u00b0-Winkel im Dreieck gibt. <code>inhalt</code> und <code>umfang</code> sind implementiert.</li> <li><code>Viereck</code> erbt von <code>Form</code> und hat vier Seiten <code>sizeA</code>, <code>sizeB</code>, <code>sizeC</code> und <code>sizeD</code>. Diese implementiert die Methode <code>umfang</code>.</li> <li><code>Parallelogram</code> erbt von <code>Viereck</code> ist \u00fcber zwei Seiten festgelegt. Diese implementiert die Methode <code>inhalt</code>.</li> <li>Entwickle selbst mindestens zwei Methoden, die pr\u00fcfen, ob die Formen bestimmte Eigenschaften erf\u00fcllen und implementiere eigene Tests dazu (jeweils mindestens 4). </li> </ul> <p>Das folgende Diagramm zeigt, dir die Struktur der Klassen:</p> <pre><code>classDiagram\n    Form &lt;|-- Kreis\n    Form &lt;|-- Dreieck\n    Form &lt;|-- Viereck\n    Viereck &lt;|-- Parallelogramm\n\n    class Form{\n        umfang(self)\n        inhalt(self)\n    }\n    class Dreieck{\n        __init__(self, size_a, size_b, size_c)\n        umfang(self)\n        inhalt(self)\n        hat_90_grad_winkel(self)\n    }\n    class Kreis{\n        PI = 3.14159265358979323846\n        __init__(self, radius)\n        umfang(self)\n        inhalt(self)\n    }\n    class Viereck{\n        __init__(self, size_a, size_b, size_c, size_d)\n        umfang(self)\n    }\n    class Parallelogramm{\n        __init__(self, size_a, size_b)\n        inhalt(self)\n    }</code></pre> <p>Nutze dazu die folgenden Klassenk\u00f6pfe:</p> <pre><code># Nutze isclose, um zu pr\u00fcfen, ob zwei Floats gleich sind\nfrom math import isclose\n\n\nclass Form:\n    ...\n\n\nclass Dreieck():\n    ...\n\n\nclass Kreis():\n    ...\n\n\nclass Viereck():\n    ...\n\n\nclass Parallelogramm():\n    ...\n</code></pre> <p>Implementiere alle Methoden so, sodass die folgenden Tests erfolgreich sind:</p> <pre><code>from unittest import TestCase\n\n\nclass FormsTest(TestCase):\n\n    def test_dreieck_type(self):\n        d = Dreieck(0.3, 0.2, 0.1)\n        self.assertIsInstance(d, Form)\n\n    def test_dreieck_umfang_0(self):\n        d = Dreieck(0.3, 0.2, 0.1)\n        self.assertAlmostEqual(d.umfang(), 0.6)\n\n    def test_dreieck_umfang_1(self):\n        d = Dreieck(1, 12, 23)\n        self.assertAlmostEqual(d.umfang(), 36)\n\n    def test_dreieck_umfang_2(self):\n        d = Dreieck(3, 3.0, 3)\n        self.assertAlmostEqual(d.umfang(), 9.0)\n\n    def test_dreieck_inhalt_0(self):\n        d = Dreieck(1, 1, 1)\n        self.assertAlmostEqual(d.inhalt(), 0.4330127018922193)\n\n    def test_dreieck_inhalt_1(self):\n        d = Dreieck(1, 1, 2 ** 0.5)\n        self.assertAlmostEqual(d.inhalt(), 0.5)\n\n    def test_dreieck_inhalt_2(self):\n        d = Dreieck(3, 4, 5)\n        self.assertAlmostEqual(d.inhalt(), 6)\n\n    def test_dreieck_hat_90_grad_winkel_0(self):\n        d = Dreieck(4, 3, 5)\n        self.assertTrue(d.hat_90_grad_winkel())\n\n    def test_dreieck_hat_90_grad_winkel_1(self):\n        d = Dreieck(4, 3, 6)\n        self.assertFalse(d.hat_90_grad_winkel())\n\n    def test_dreieck_hat_90_grad_winkel_2(self):\n        d = Dreieck(1, 1, 2 ** 0.5)\n        self.assertTrue(d.hat_90_grad_winkel())\n\n    def test_dreieck_hat_90_grad_winkel_3(self):\n        d = Dreieck(1, 2 ** 0.5, 1)\n        self.assertTrue(d.hat_90_grad_winkel())\n\n    def test_kreis_type(self):\n        k = Kreis(1)\n        self.assertIsInstance(k, Form)\n\n    def test_kreis_pi_0(self):\n        self.assertTrue(hasattr(Kreis, 'PI'))\n\n    def test_kreis_umfang_0(self):\n        k = Kreis(1)\n        self.assertAlmostEqual(k.umfang(), 6.2831853)\n\n    def test_kreis_umfang_1(self):\n        k = Kreis(0.5)\n        self.assertAlmostEqual(k.umfang(), 3.14159265)\n\n    def test_kreis_umfang_2(self):\n        k = Kreis(15)\n        self.assertAlmostEqual(k.umfang(), 94.2477796)\n\n    def test_kreis_inhalt_0(self):\n        k = Kreis(1)\n        self.assertAlmostEqual(k.inhalt(), 3.14159265)\n\n    def test_kreis_inhalt_1(self):\n        k = Kreis(0.5)\n        self.assertAlmostEqual(k.inhalt(), 0.785398163)\n\n    def test_kreis_inhalt_2(self):\n        k = Kreis(15)\n        self.assertAlmostEqual(k.inhalt(), 706.85834705)\n\n    def test_viereck_type(self):\n        v = Viereck(1, 2, 3, 4)\n        self.assertIsInstance(v, Form)\n\n    def test_viereck_inhalt_fail_0(self):\n        with self.assertRaises(NotImplementedError):\n            v = Viereck(1, 2, 3, 4)\n            v.inhalt()\n\n    def test_viereck_umfang_0(self):\n        v = Viereck(1, 2, 3, 4)\n        self.assertAlmostEqual(v.umfang(), 10)\n\n    def test_viereck_umfang_1(self):\n        v = Viereck(1, 1, 1, 1)\n        self.assertAlmostEqual(v.umfang(), 4)\n\n    def test_parallelogramm_type(self):\n        p = Parallelogramm(1, 2)\n        self.assertIsInstance(p, Viereck)\n\n    def test_parallelogramm_umfang_0(self):\n        p = Parallelogramm(1, 2)\n        self.assertAlmostEqual(p.umfang(), 6)\n\n    def test_parallelogramm_inhalt_0(self):\n        p = Parallelogramm(1, 2)\n        self.assertAlmostEqual(p.inhalt(), 2)\n\n    def test_parallelogramm_inhalt_1(self):\n        p = Parallelogramm(1, 1)\n        self.assertAlmostEqual(p.inhalt(), 1)\n\n    def test_parallelogramm_inhalt_2(self):\n        p = Parallelogramm(0.5, 0.5)\n        self.assertAlmostEqual(p.inhalt(), .25)\n\n    def test_form_inhalt_fail_0(self):\n        with self.assertRaises(NotImplementedError):\n            f = Form()\n            f.inhalt()\n\n    def test_form_umfang_fail_0(self):\n        with self.assertRaises(NotImplementedError):\n            f = Form()\n            f.umfang()\n</code></pre> L\u00f6sung <p>Hier ist eine m\u00f6gliche L\u00f6sung:</p> <pre><code>from math import isclose\n\n\nclass Form:\n    def umfang(self):\n        raise NotImplementedError(\"Kann nicht f\u00fcr diese Allgemeine Form bestimmt werden\")\n\n    def inhalt(self):\n        raise NotImplementedError(\"Kann nicht f\u00fcr diese Allgemeine Form bestimmt werden\")\n\n\nclass Dreieck(Form):\n    def __init__(self, size_a, size_b, size_c):\n        self.size_a = size_a\n        self.size_b = size_b\n        self.size_c = size_c\n\n    def umfang(self):\n        return self.size_a + self.size_b + self.size_c\n\n    def inhalt(self):\n        s = self.umfang() / 2\n        result = (s * (s - self.size_a) * (s - self.size_b) * (s - self.size_c)) ** 0.5\n        return result\n\n    def hat_90_grad_winkel(self):\n        squared_sizes = [s ** 2 for s in (self.size_a, self.size_b, self.size_c)]\n        squared_sizes.sort()\n        return isclose(squared_sizes[0] + squared_sizes[1], squared_sizes[2])\n\n\nclass Kreis(Form):\n    PI = 3.14159265358979323846\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def umfang(self):\n        return 2 * self.PI * self.radius\n\n    def inhalt(self):\n        return self.PI * self.radius ** 2\n\n\nclass Viereck(Form):\n    def __init__(self, size_a, size_b, size_c, size_d):\n        self.size_a = size_a\n        self.size_b = size_b\n        self.size_c = size_c\n        self.size_d = size_d\n\n    def umfang(self):\n        return self.size_a + self.size_b + self.size_c + self.size_d\n\n\nclass Parallelogramm(Viereck):\n    def __init__(self, size_a, size_b):\n        super().__init__(size_a, size_b, size_a, size_b)\n\n    def inhalt(self):\n        return self.size_a * self.size_b\n</code></pre> <p>Diese Implementierung erf\u00fcllt alle Anforderungen der Aufgabe und sollte alle gegebenen Tests bestehen.</p> Composition over Inheritance <p>Betrachte das folgende Beispiel von gef\u00e4rbten Formen:</p> <pre><code>class Shape:\n    pass\n\nclass RedCircle(Shape):\n    pass\n\nclass RedSquare(Shape):\n    pass\n\nclass BlueCircle(Shape):\n    pass\n\nclass BlueSquare(Shape):\n    pass\n</code></pre> <p></p> <ol> <li>Angenommen eine neue Farbe wird hinzugef\u00fcgt, welche neuen Klassen w\u00fcrde das erzeugen?</li> <li>Angenommen es wird dann noch eine neue Form hinzugef\u00fcgt, wie viele neue Klassen m\u00fcssen dann erzeugt werden?</li> </ol> <p>Betrachte nun diesen Code:</p> <pre><code>class Shape:\n    def __init__(self, color):\n        self.color = color\n\nclass Circle(Shape):\n    pass\n\nclass Square(Shape):\n    pass\n\nclass Color:\n    pass\n\nclass Red(Color):\n    pass\n\nclass Blue(Color):\n    pass\n</code></pre> <p></p> <p>Wir stellen nun dieselben Fragen erneut: 3. Angenommen eine neue Farbe wird hinzugef\u00fcgt, welche neuen Klassen w\u00fcrde das erzeugen? 4. Angenommen es wird dann noch eine neue Form hinzugef\u00fcgt, wie viele neue Klassen m\u00fcssen dann erzeugt werden?</p> <p>Erkl\u00e4re den Unterschied zwischen den beiden Ans\u00e4tzen und diskutiere die Vor- und Nachteile.</p> L\u00f6sung <ol> <li> <p>Im ersten Fall m\u00fcssen bei einer neuen Farbe zwei neue Klassen erstellt werden, z.B. <code>GreenCircle</code> und <code>GreenSquare</code>.</p> </li> <li> <p>Um eine neue Form hinzuzuf\u00fcgen, m\u00fcssen im ersten Fall drei neue Klassen hinzugef\u00fcgt werden, z.B. <code>RedTriangle</code>, <code>BlueTriangle</code> und <code>GreenTriangle</code>.</p> </li> <li> <p>Im zweiten Fall muss bei einer neuen Farbe nur eine neue Klasse erstellt werden, z.B. einfach <code>Green</code>.</p> </li> <li> <p>Um eine neue Form hinzuzuf\u00fcgen, muss im zweiten Fall nur eine neue Klasse hinzugef\u00fcgt werden, z.B. <code>Triangle</code>.</p> </li> </ol> <p>Erkl\u00e4rung: - Im ersten Ansatz (Vererbung) w\u00e4chst die Anzahl der Klassen exponentiell mit jeder neuen Farbe oder Form. - Im zweiten Ansatz (Composition) w\u00e4chst die Anzahl der Klassen nur linear.</p> <p>Vorteile des zweiten Ansatzes (Composition): - Flexibler und einfacher zu erweitern - Weniger redundanter Code - Bessere Trennung von Zust\u00e4ndigkeiten (Farbe und Form sind getrennt)</p> <p>Nachteile des ersten Ansatzes (Vererbung): - Schnell wachsende Komplexit\u00e4t - Viele Klassen, die m\u00f6glicherweise nie verwendet werden - Schwieriger zu warten und zu erweitern</p> <p>Schlussfolgerung: Man sollte immer \u00fcberlegen, ob Vererbung tats\u00e4chlich notwendig ist. In vielen F\u00e4llen ist Composition (wie im zweiten Beispiel) die bessere Wahl, da es zu flexiblerem und wartbarerem Code f\u00fchrt.</p> Composition \u00fcber Vererbung bei Sportlern <p>Untersuche den folgenden Code. Teile die Klassen analog zum letzten Beispiel auf:</p> <pre><code>class Sportler:\n    pass\n\nclass DeutscherHandballer(Sportler):\n    pass\n\nclass DeutscherFussballer(Sportler):\n    pass\n\nclass EnglischerHandballer(Sportler):\n    pass\n\nclass EnglischerFussballer(Sportler):\n    pass\n</code></pre> <ol> <li>Wie viele neue Klassen m\u00fcssten erstellt werden, wenn eine neue Sportart hinzugef\u00fcgt wird?</li> <li>Wie viele neue Klassen m\u00fcssten erstellt werden, wenn eine neue Nationalit\u00e4t hinzugef\u00fcgt wird?</li> <li>Strukturiere den Code um, indem du Composition statt Vererbung verwendest.</li> <li>Erkl\u00e4re die Vorteile dieser neuen Struktur.</li> </ol> L\u00f6sung <ol> <li> <p>Bei der aktuellen Struktur m\u00fcssten zwei neue Klassen erstellt werden, eine f\u00fcr jede Nationalit\u00e4t.</p> </li> <li> <p>Bei der aktuellen Struktur m\u00fcssten drei neue Klassen erstellt werden, eine f\u00fcr jede Sportart.</p> </li> <li> <p>Hier ist die umstrukturierte Version des Codes:</p> </li> </ol> <pre><code>class Sportler:\n    def __init__(self, nation, sportart):\n        self.nation = nation\n        self.sportart = sportart\n\nclass Sportart:\n    pass\n\nclass Handballer(Sportart):\n    pass\n\nclass Fussballer(Sportart):\n    pass\n\nclass Nation:\n    pass\n\nclass Deutsch(Nation):\n    pass\n\nclass Englisch(Nation):\n    pass\n</code></pre> <ol> <li>Vorteile der neuen Struktur:</li> <li>Flexibilit\u00e4t: Neue Sportarten oder Nationalit\u00e4ten k\u00f6nnen einfach hinzugef\u00fcgt werden, ohne viele neue Klassen zu erstellen.</li> <li>Wartbarkeit: \u00c4nderungen an einer Sportart oder Nationalit\u00e4t m\u00fcssen nur an einer Stelle vorgenommen werden.</li> <li>Skalierbarkeit: Die Anzahl der Klassen w\u00e4chst linear statt exponentiell mit neuen Sportarten oder Nationalit\u00e4ten.</li> <li>Bessere Trennung von Zust\u00e4ndigkeiten: Sportart und Nationalit\u00e4t sind getrennte Konzepte und k\u00f6nnen unabh\u00e4ngig voneinander entwickelt werden.</li> </ol>"},{"location":"content/packages/moduls/","title":"Module und Pakete","text":"<p>In Python erm\u00f6glichen Module und Pakete die Organisation von Code in wiederverwendbare Einheiten, um die Lesbarkeit zu verbessern und die Codeverwaltung zu optimieren.</p>"},{"location":"content/packages/moduls/#module","title":"Module","text":"Video <p>Ein Modul in Python ist im Grunde genommen eine <code>.py</code>-Datei mit Python-Code. In dieser Datei k\u00f6nnen Funktionen, Variablen und Klassen definiert werden, die in anderen Python-Dateien wiederverwendet werden k\u00f6nnen. Es gibt</p> <p>Angenommen, du erstellst eine Datei/Modul namens <code>greetings.py</code>:</p> <pre><code># greetings.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>Und im selben Ordner eine andere Datei namens <code>main.py</code>. Wir k\u00f6nnen das Modul <code>greetings.py</code> und die darin enthaltene Methode nun wie folgt verwenden:</p> <pre><code># main.py\n\nimport greetings\n\nprint(greetings.greet(\"Alice\"))\n</code></pre> <p>Du kannst auch Alias f\u00fcr Module verwenden, um den Code kompakter zu gestalten:</p> <pre><code># main.py\n\nimport greetings as gr\n\nprint(gr.greet(\"Bob\"))\n</code></pre> <p>Wir k\u00f6nnen auch nur die einzelne Funktion zu importieren</p> <pre><code># main.py\n\nfrom greetings import greet\n\nprint(greet(\"Bob\"))\n</code></pre> <p>Oder alle Funktionen, die es in einem Modul gibt:</p> <pre><code># main.py\n\nfrom greetings import *\n\nprint(greet(\"Bob\"))\n</code></pre> <p>Es ist jedoch ratsam, selektiv zu importieren, um potenzielle Namenskonflikte zu vermeiden.</p> Zuf\u00e4lle gibts... <p>Erstelle eine Datei namens <code>my_random.py</code>. Erstelle in dieser eine Funktion <code>random_squares</code>, die eine Zahl <code>n</code> als Parameter erwartet. Sie gibt dann eine zuf\u00e4llige Quadratzahl zwischen <code>1</code> und <code>n * n</code> zur\u00fcck.</p> <p>Beim Aufruf <code>random_squares(5)</code> k\u00f6nnten also <code>1</code>, <code>4</code>, <code>9</code>, <code>16</code> oder <code>25</code> zur\u00fcckgegeben werden.</p> <p>Importiere dazu eine passende Funktion aus dem Modul <code>random</code>.</p> <p>Erstelle jetzt eine zweite Datei <code>main.py</code> und importiere deine <code>random_squares</code> Funktion aus <code>my_random.py</code>. Nutze ein <code>print()</code> um deine Methode zu testen.</p> L\u00f6sung <pre><code>from random import randint\n\n\ndef random_squares(n):\n    return randint(1, n) ** 2\n</code></pre> <pre><code>from my_random import random_squares\n\nprint(random_squares(5))\n</code></pre> Abzocke ausdenken <p>Erstelle eine neue Datei namens <code>casino_games.py</code>. Erstelle darin eine Funktion <code>bet_under_squares(my_bet, faktor)</code>. Die Funktion erwartet zwei Integer, <code>my_bet</code> und <code>faktor</code>. Der <code>faktor</code> soll hier die Risikobereitschaft des Spielers darstellen um h\u00f6hre Gewinne zu bekommen.</p> <p>In der Funktion soll eine quadratische Zufallszahl zwischen <code>1</code> und <code>faktor * faktor</code> gew\u00fcrfelt werden. Importiere und nutze dazu die Funktion <code>random_squares</code></p> <p>Um den sp\u00e4teren Spielern unseres Casino-Games das Geld aus der Tasche zu ziehen m\u00fcssen wir jetzt die Gewinnbedingung setzen. Wenn die quadratische Zufallszahl kleiner oder gleich <code>my_bet</code> ist, soll <code>faktor * my_bet</code> returned werden, andernfalls <code>0</code>.</p> <p>Der Spieler verliert also alles, falls die Zufallszahl kleiner als sein gebot ist (was mit h\u00f6herem Risiko (<code>faktor</code>) exponentiell wahrscheinlicher wird).</p> L\u00f6sung <pre><code>def bet_under_squares(my_bet, faktor):\n  random_square = random_squares(faktor)\n  print(f\"Randomly roled:{random_square}\")\n  return 0 if my_bet &lt; random_square else faktor * my_bet\n</code></pre> Sicherheit muss sein <p>Erstelle eine weitere Funktion <code>input_int_in_between(prompt, minimum, maximum)</code>  in wieder einem neuen Modul <code>secure_input</code>.</p> <p>In der Funktion wird ein <code>input</code> als Integer vom Nutzer abgefragt, der zwischen <code>minimum</code> und <code>maximum</code> liegt. Dabei wird der \u00fcbergebene <code>prompt</code> auf dem Bildschirm angezeigt. Dieser Input wird von der Funktion als Integer zur\u00fcckgegeben.</p> <p>Wenn die Eingabe ung\u00fcltig ist, soll (z.B. mithilfe von Exceptionhandling) erneut um eine g\u00fcltige Eingabe gebeten werden.</p> L\u00f6sung <pre><code>def input_int_in_between(prompt, minimum, maximum):\n  user_input = 0\n  while True:\n      try:\n          user_input = int(input(prompt))\n      except ValueError:\n          print(f\"Eingabe ist nicht vom Typ int\")\n\n      if minimum &lt;= user_input &lt;= maximum:\n          return user_input\n      else:\n          print(f\"Eingabe ist nicht g\u00fcltig.\")\n</code></pre> Tische bereit machen <p>F\u00fcge dem Modul <code>casino_game</code> eine neue Methode <code>play_game(rounds, money)</code> hinzu. Diese Methode dient dazu, dass mehrere Runden (<code>rounds</code>) gespielt werden kann. Hier wird dann mehrfach <code>bet_under_square</code> ausgef\u00fchrt.</p> <p>Diese Methode <code>play_game</code> bittet den Nutzer um einen Einsatz (der maximal die H\u00f6he seines Geldes <code>money</code> betragen darf).</p> <p>Dann fragt <code>play_game</code> und um einen vom Nutzer gew\u00e4hlten Faktor. Mit diesem Einsatz und Faktor wird die <code>bet_under_square</code> Methode ausgef\u00fchrt und das Ergebnis mit zum momentanen Geld hinzugef\u00fcgt.</p> <p><code>rounds</code> soll defaultm\u00e4\u00dfig auf 5 gesetzt sein. <code>money</code> soll defaultm\u00e4\u00dfig auf 10 gesetzt sein.</p> L\u00f6sung <pre><code>from secure_input import input_int_in_between\nfrom my_random import random_squares\n\ndef play_game(rounds=5, money=10):\n    for i in range(rounds):\n        print(f\"Round {i}. Money={money}\")\n        bet = input_int_in_between(\"Wie viel Geld willst du setzen?\", 0, money)\n        money -= bet\n        faktor = input_int_in_between(\"Welchen Faktor willst du?\", 1, 10 ** 100)\n        money += bet_under_squares(bet, faktor)\n        if not money:\n            break\n    else:\n        print(f\"Du hast {money} gewonnen\")\n        return\n\n    print(\"Leider alles verzockt\")\n</code></pre>"},{"location":"content/packages/packages/","title":"Module und Pakete","text":"<p>In Python erm\u00f6glichen Module und Pakete die Organisation von Code in wiederverwendbare Einheiten, um die Lesbarkeit zu verbessern und die Codeverwaltung zu optimieren.</p>"},{"location":"content/packages/packages/#pakete","title":"Pakete","text":"<p>Packages (deutsch: \"Pakete\") sind Verzeichnisse, die Module und m\u00f6glicherweise Unterpakete enthalten.</p>"},{"location":"content/packages/packages/#wofur-braucht-man-pakete","title":"Wof\u00fcr braucht man Pakete?","text":"<p>Set the stage for PyPi!</p> <p>PyPI ist ein Online-Repository f\u00fcr \u00f6ffentliche Python-Pakete. Entwickler k\u00f6nnen Pakete ver\u00f6ffentlichen, die jeder installieren und verwenden kann. F\u00fcr jedes Paket gibt es hier eine Installationsanleitung, eine Beschreibung, Versionshinweise und Informationen zu Abh\u00e4ngigkeiten.</p>"},{"location":"content/packages/packages/#zusatz-erkunde-pypi","title":"Zusatz: Erkunde PyPI","text":"<p>Besuche PyPi undschau dich um, suche nach einem beliebten Paket, zum Beispiel <code>requests</code>.</p>"},{"location":"content/packages/packages/#pakete-selber-packen","title":"Pakete selber packen","text":"<p>Ein Package enth\u00e4lt immer eine <code>__init__.py</code>. Diese zeigt an, dass es sich bei dem Ordner um ein Python Package handelt.</p> <pre><code>my_package/\n|-- __init__.py\n|-- module1.py\n|-- module2.py\n|-- subpackage/\n|   |-- __init__.py\n|   |-- module3.py\n</code></pre> T\u00fcren auf in unserem Casino <p>Unsere Casino-module aus Module sollen jetzt in ein eigenes erstes Paket umgewandelt werden. Hierzu erstellen wir einen Ordner <code>my_casino</code> und f\u00fcge alle bisher erstellten Dateien darin ein.</p> <p>Zus\u00e4tzlich erstellen wir eine Datei <code>__init__.py</code> ohne Inhalt.</p> <p>Die Ordnerstruktur sieht danach wie folgt aus:</p> <pre><code>my_casino/\n|-- __init__.py\n|-- casino_games.py\n|-- my_random.py\n|-- secure_input.py\n</code></pre> <p>In den Modulen (Files) wirst du die imports umbenennen m\u00fcssen.</p> <pre><code>from my_casino.secure_input import input_int_in_between\nfrom my_casino.my_random import random_squares\n</code></pre> <p>\u00d6ffne nun eine Pythonkonsole und f\u00fchre die folgenden Befehle aus:</p> <pre><code>&gt;&gt;&gt; from my_casino.casino_games import play_game\n&gt;&gt;&gt; play_game()\n</code></pre> <p>Auf gehts!\ud83e\udd11\ud83d\udcb0</p> L\u00f6sung <pre><code>from my_casino.secure_input import input_int_in_between\nfrom my_casino.my_random import random_squares\n\n\ndef bet_under_squares(my_bet, faktor):\n    random_square = random_squares(faktor)\n    print(f\"Randomly roled:{random_square}\")\n    return 0 if my_bet &lt; random_square else faktor * my_bet\n\n\ndef play_game(rounds=5, money=10):\n    for i in range(rounds):\n        print(f\"Round {i}. Money={money}\")\n        bet = input_int_in_between(\"Wie viel Geld willst du setzen?\", 0, money)\n        money -= bet\n        faktor = input_int_in_between(\"Welchen Faktor willst du?\", 1, 10 ** 100)\n        money += bet_under_squares(bet, faktor)\n        if not money:\n            break\n    else:\n        print(f\"Du hast {money} gewonnen\")\n        return\n\n    print(\"Leider alles verzockt\")\n</code></pre>"},{"location":"content/packages/packages/#zusatz-noch-mal-auf-englisch","title":"Zusatz: Noch mal auf Englisch \ud83d\udcfa","text":"<p>Das folgende Video von NeuralNine  fasst die Inhalte dieses Kapitels zusammen und vertieft sie. Schau dir das Video an und stell mit deinem Tutor sicher, dass du alle Inhalte verstehst.</p> Video <p> </p> <p>Auch 2MinutesPy hat ein sch\u00f6nes Video zu <code>__init__.py</code>:</p> Video <p> </p>"},{"location":"content/packages/packages/#was-ist-name-main","title":"Was ist Name == Main?","text":"Video <p>Wenn wir die folgende Datei <code>greetings.py</code> ausf\u00fchren</p> <pre><code># greetings.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ngreet(\"Gustav\")\n</code></pre> <p>so erhalten wir auf der Konsole folgenden Output:</p> <pre><code>\"Hello, Gustav\"\n</code></pre> <p>Wenn wir diese Datei jedoch importieren, so wird die Methode <code>greet(\"Gustav\")</code> auch ausgef\u00fchrt:</p> <pre><code>from greetings.py import greet\n\ngreet(\"Hanna\")\n</code></pre> <p>Konsolenausgabe</p> <pre><code>\"Hello, Gustav\"\n\"Hello, Hanna\"\n</code></pre> <p>Genau hierf\u00fcr gibt es die Bedingung <code>if __name__ == \"__main__\":</code>. Sie erm\u00f6glicht es, Code in einem Modul auszuf\u00fchren, wenn es direkt ausgef\u00fchrt wird, aber nicht, wenn es in einem anderen Skript importiert wird. </p> <p>Die Variable <code>__name__</code> ist eine besondere Variable in Python, die, je nachdem, wie ein Python-Skript verwendet wird, einen unterschiedlichen Wert annehmen kann. Es gibt zwei Hauptkontexte, in denen ein Python-Skript ausgef\u00fchrt werden kann: entweder als Hauptprogramm oder als Modul, das in ein anderes Skript importiert wird.</p> <ol> <li>Wenn das Skript direkt ausgef\u00fchrt wird, setzt Python die Variable name auf den Wert \"main\".</li> <li>Wird das Skript jedoch importiert und in einem anderen Skript verwendet, wird name auf den Namen des Skripts (genauer gesagt: auf den Namen des Moduls) gesetzt.</li> </ol> <p>Diese Unterscheidung ist besonders n\u00fctzlich, um zu bestimmen, welcher Code ausgef\u00fchrt werden soll, je nachdem, ob das Skript direkt gestartet oder als Modul importiert wird</p> <pre><code># greetings.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    print(greet(\"Gustav\"))\n</code></pre> <p>F\u00fchren wir die Datei <code>greetings.py</code> aus, erhalten wir weiterhin: <pre><code>\"Hello, Gustav\"\n</code></pre></p> <p>Wenn wir <code>greetings.py</code> aber nun importieren ... <pre><code>from greetings.py import greet\n\ngreet(\"Hanna\")\n</code></pre></p> <p>erhalten wir auch die gew\u00fcnschte Konsolenausgabe:</p> <pre><code>\"Hello, Hanna\"\n</code></pre>"},{"location":"content/pandas/add_and_remove_data/","title":"Add and remove data","text":"<p>Eine typische Aufgabe bei der Arbeit mit <code>DataFrames</code> ist es neue Daten hinzuzuf\u00fcgen um das <code>DataFrame</code> zu erweitern, oder auch bestimmte Daten entfernen.</p>"},{"location":"content/pandas/add_and_remove_data/#spalten-entfernen-dropping-columns","title":"Spalten entfernen (dropping columns)","text":"<p>Manchmal m\u00f6chte man bestimmte Spalten entfernen. Dazu verwendet man die Methode <code>drop()</code>. Innerhalb der Muss man durch den Parameter <code>axis</code> festlegen ob entweder eine Reihe <code>axis=0</code> oder eine Spalte <code>axis=1</code> angesprochen werden soll</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Drop one column\nprint(df.drop(labels=\"Discount\", axis=1))\n</code></pre></p> <p>Wenn man jetzt jedoch durch <code>print(df)</code> das <code>DataFrame</code> ausgibt, sieht man keine \u00c4nderung. Damit die \u00c4nderung auf das aktuelle <code>DataFrame</code> vorgenommen wird, muss man den <code>inplace=True</code> Parameter verwenden</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Drop one column and save the change\ndf.drop(labels=\"Discount\", axis=1, inplace=True)  \nprint(df)\n</code></pre></p> <p>H\u00e4ufig m\u00f6chte man \u00c4nderungen am <code>DataFrame</code> vornehmen und dabei soll diese \u00c4nderung gespeichert werden. Hierzu muss man  den Parameter <code>inplace</code> verwenden, er aktualisiert das <code>DataFrame</code>.</p>"},{"location":"content/pandas/add_and_remove_data/#zeilen-entfernen-dropping-rows","title":"Zeilen entfernen (dropping rows)","text":"<p>\u00c4hnlich wie bei der Entfernung von Spalten kann man auch Zeilen entfernen. Mit dem unterschied dass man nun den Parameter <code>axis</code> nicht angeben muss, da er standartm\u00e4\u00dfig auf 0 gesetzt ist. Dem Parameter <code>labels</code> muss man den Index, welcher die Zeile repr\u00e4sentiert, \u00fcbergeben. Der Index kann dabei ein Integer sein oder auch ein keyword.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df) \n# Drop two rows\ndf.drop(labels=[2, 6], axis=0, inplace=True)  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#spalte-erstellen","title":"Spalte erstellen","text":"<p>Man kann beliebig viele Spalten zu dem aktuellen <code>DataFrame</code> hinzuf\u00fcgen und die Werte aus anderen Spalten ausrechnen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Create a new column and calculate the values df[\"Total cost\"] = 1250 + df[\"Fee\"]  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#zeile-erstellen","title":"Zeile erstellen","text":"<p>Durch die Nutzung der <code>loc</code> Methode kann man eine Zeile am Ende des <code>DataFrames</code> einsetzen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Create a list with data, which should be appended to df  \nrow_to_add = [\"C++\", 21000, \"33days\", None]  \n# Append list to df  \ndf.loc[len(df)] = row_to_add  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#werte-andern-mit-at","title":"Werte \u00e4ndern mit \"at\"","text":"<p>Durch die <code>at</code> Methode kann man durch Angabe des Index und des Spaltennamens auf einen Wert zugreifen und ihn \u00e4ndern.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \ndf.at[5, \"Fee\"] = 35000  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#werte-andern-mit-iat","title":"Werte \u00e4ndern mit \"iat\"","text":"<p>\u00c4hnlich wie bei der <code>at</code> Methode kann man im <code>DataFrame</code> einen Wert \u00e4ndern mit dem unterschied dann man nur Integer verwendet um die Position des Wertes anzugeben. Die erste Zahl gibt die Zeile an und die zweite Zahl die Spalte.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \ndf.iat[3, 2] = \"53days\"  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/clean_dataframes/","title":"Clean dataframes","text":"<p>Um die Qualit\u00e4t eines <code>DataFrames</code> sicherzustellen muss man einige Punkte beachten: - Was macht man mit nicht vorhandenen Werten? - Sind Duplikate vorhanden?</p>"},{"location":"content/pandas/clean_dataframes/#nicht-vorhandene-werte-in-zeilen-entfernen","title":"Nicht vorhandene Werte in Zeilen entfernen","text":"<p>H\u00e4ufig hat man innerhalb des <code>DataFrames</code> Werte, welche nicht vorhanden sind bzw. Null sind. Das Ziel ist es dann Zeilen welche keinen Wert haben zu  entfernen (dropp rows).</p> <p>Die Methode <code>isnull()</code> gibt ein <code>DataFrame</code> zur\u00fcck, wo alle Werte welche nicht vorhanden sind mit <code>True</code> ersetzt werden und alle Werte die vorhanden  sind mit <code>False</code>.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nfiltered = df.isnull()  \nprint(filtered)\n</code></pre></p> <p>Es w\u00e4re jedoch interessanter zu sehen wie viele Werte nicht Vorhanden bzw. Null sind. Man m\u00fcsste also alle <code>True</code> Werte lesen. Dazu verwendet man die Methode <code>sum()</code>: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nfiltered = df.isnull()  \nprint(filtered.sum())\n</code></pre></p> <p>Um jetzt das <code>DataFrame</code> zu updaten, damit die nicht vorhanden Werte entfernt sind (dropp missing values), nutzt man die <code>dropna()</code> Methode. Innerhalb der <code>dropna()</code> Methode wird ein Parameter angegeben, welcher Aussagt welche Werte gel\u00f6scht werden sollen. In unserem Fall alles was <code>True</code> ist, weil die nicht vorhanden Werte mit <code>True</code> gekennzeichnet wurden: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", None],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \nprint(\"----------------\")  \ndf.dropna(inplace=True)  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/clean_dataframes/#duplikate-entfernen","title":"Duplikate entfernen","text":"<p>H\u00e4ufig m\u00f6chte man Duplikate innerhalb einer Spalte entfernen: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", None],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \ndf.drop_duplicates(subset=\"Courses\", inplace=True)  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/export_dataframes/","title":"Export dataframes","text":"<p>Es kann vorkommen dass man sein <code>DataFrame</code> in einer separaten Datei ausgeben m\u00f6chte, um sie wo anders weiter zu verwenden. Dazu gibt es einige M\u00f6glichkeiten.</p>"},{"location":"content/pandas/export_dataframes/#output-to-csv","title":"Output to CSV","text":"<p>Mann kann ein DataFrame als eine CSV-Datei exportieren: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Export DataFrame as CSV\ndf.to_csv(\"output.csv\")\n</code></pre></p>"},{"location":"content/pandas/export_dataframes/#output-to-json","title":"Output to JSON","text":"<p>Mann kann ein DataFrame als eine JSON-Datei exportieren: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Export DataFrame as CSV\ndf.to_json(\"output.csv\")\n</code></pre></p>"},{"location":"content/pandas/export_dataframes/#output-to-html","title":"Output to HTML","text":"<p>Mann kann ein DataFrame als eine html-Datei exportieren: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Export DataFrame as CSV\ndf.to_html(\"output.csv\")\n</code></pre></p>"},{"location":"content/pandas/filter_dataframes/","title":"Filter dataframes","text":"<p>Oft m\u00f6chte man ein <code>DataFrame</code> nach bestimmten Bedingungen filtern, dies ist sehr einfach und l\u00e4sst viel Spielraum. Dazu verwendet man die booleschen Operationen, um seine Aufgaben zum Filtern, zu bewerkstelligen.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/filter_dataframes/#filtern-mit-isin","title":"Filtern mit isin()","text":"<p>Durch die Methode <code>isin()</code> kann man Daten Filtern, indem man der Methode eine Liste \u00fcbergibt, welche Werte enth\u00e4lt, die gefiltert werden sollen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nfiltered = df[\"type\"].isin([\"conventional\"])  \nprint(df[filteres].to_string())\n</code></pre></p> <p>Das w\u00e4re die Alternative ohne die Nutzung von <code>isin()</code>: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nfiltered = df[\"type\"] == \"conventional\"  \nprint(df[filtered])\n</code></pre></p> <p>Als erstes erstellt man eine Variable wo nur <code>boolsche</code> Werte drine sind. Anschlie\u00dfend setzt man diese Wahrheitswerte in das <code>DataFrame</code> ein um die Werte mit <code>False</code> auszublenden.</p>"},{"location":"content/pandas/merge_dataframes/","title":"Merge dataframes","text":"<p>In der Praxis kann es schnell passieren dass die Daten \u00fcber mehrere <code>DataFrames</code> verteilt sind weil sich z.B. die Daten in unterschiedlichen CSV-Dateien befinden. Dann hat man h\u00e4ufig die Aufgabe die <code>DataFrames</code> zusammen zu f\u00fcgen.</p>"},{"location":"content/pandas/merge_dataframes/#zusammenfugen-mit-merge","title":"Zusammenf\u00fcgen mit merge()","text":"<p>Mit der Methode <code>merge()</code> lassen sich zwei DataFrames vereinigen zu einem neuen DataFrame.</p> <p>Dazu m\u00fcssen folgende Parameter beachtet werden:</p> <ul> <li><code>left</code>: Hier wird das DataFrame angegeben,  welches als Ausgangspunkt dient f\u00fcr eine Vereinigung</li> <li><code>right</code>: Hier wird das DataFrame angegeben, welches mit dem anderen DataFrame zu vereinigen ist</li> <li> <p><code>on</code>: Anhand welcher Spalte soll die Verschmelzung durchgef\u00fchrt werden</p> <p>Beispiel: <pre><code>import pandas as pd\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    'Gender':  [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=\"Name\")  \nprint(df_merged)\n</code></pre></p> </li> </ul> <p>Im obigen Beispiel wird das \"linke\" <code>DataFrame</code> herangenommen und die Spalte \"Roll No\" wird in \"Roll No_x\" unbenannt weil sie in beiden DataFrames vorkommt.  Es soll ja \u00fcber die Spalte Name zusammengef\u00fcgt werden, deswegen wird von beiden DataFrames die Spalte \"Name\" verglichen und falls die Werte in beiden Spalten vorhanden sind werden sie \u00fcbernommen. Die Spalte \"Gender\" und \"Age\" wird einfach \u00fcbernommen weil sie nicht im rechten DataFrame vorkommt. Im rechten DataFrame wird die Spalte \"Roll No\" mit dem Suffix \"y\" versehen weil sie in beiden <code>DataFrames</code> vorkommt und bekommt die neue Bezeichnung \"Roll No_y\". Anschlie\u00dfend wird sie in das neue DataFrame \u00fcbernommen. Ebenfalls wird die Spalte \"Grades\" einfach \u00fcbernommen weil sie nicht im linken DataFrame vorkommt.</p> <p>Es ist auch m\u00f6glich den Parameter <code>on</code> nicht zu definieren, also <code>on=None</code> zu setzen. Wenn dass der Fall ist wird die Schnittmenge jeder Spalte gebildet. Dies geschieht folgenderma\u00dfen: Die Zeilen 1 bis 5 kommen sowohl im linken als auch rechten DataFrame vor, dabei Stimmen die Werte aus den Spalten \"Roll No\", \"Name\" und \"Gender\" \u00fcberein. Die nicht vorhandenen Spalten \"Age\" und \"Grades\" werden \u00fcbernommen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506, 507],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\", \"Paul\"],  \n    'Gender':  [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16, 15]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=None)  \nprint(df_merged)\n</code></pre></p> <ul> <li><code>how</code>: Hier wird die Art der Vereinigung angegeben (Angabe nicht notwendig). Man unterscheidet zwischen:<ul> <li>left</li> <li>right</li> <li>inner</li> <li>outer</li> </ul> </li> </ul> <p>Die folgende Grafik erkl\u00e4rt die unterschiedlichen Vereinigungen. Dabei sind mit gr\u00fcner Farbe die Werte der einzelnen Spalten gemeint: </p> <p>Folgende Grafiken k\u00f6nnen zum Verst\u00e4ndnis beitragen:  </p> <p>Beispiel: <pre><code>import pandas as pd  \n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506, 507],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\", \"Paul\"],  \n    'Gender':  [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16, 15]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=None, how=\"outer\")  \nprint(df_merged)\n</code></pre></p> <p>Hier wurde <code>on=\"outer\"</code> verwendet, wie man in der Grafik sieht wird die Vereinigungsmenge der beiden DataFrames gebildet. In dem neuen DataFrame kommen also alle Werte vom linken und rechten DataFrame vor.</p> <ul> <li><code>suffixes</code>: Wir hatten bereits gesehen wie ein Suffix zu Spaltennamen hinzugef\u00fcgt wird (\"Roll No_x\" und \"Roll No_y\"). Mit diesem Parameter k\u00f6nnen wir einen individuellen Suffix erstellen.</li> </ul> <p>Beispiel: <pre><code>import pandas as pd  \n\npd.set_option(\"display.max_rows\", None)  \npd.set_option(\"display.max_columns\", None)  \n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    'Gender': [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=\"Name\", suffixes=(\" left_table\", \" right_table\"))  \nprint(df_merged)\n</code></pre></p>"},{"location":"content/pandas/merge_dataframes/#zusammenfugen-mit-join","title":"Zusammenf\u00fcgen mit join()","text":"<p><code>join()</code>\u00a0verkn\u00fcpft Daten nicht aufgrund von Spalten, sondern ausschlie\u00dflich am Index.</p> <p>Beispiel: <pre><code>import pandas as pd  \ndf = pd.DataFrame({'Name' : [\"Peter\", \"Karla\", \"Anne\", \"Nino\", \"Andrzej\"],  \n                   'Geschlecht': ['M','W','W','M','M'],  \n                   'Alter': [34, 53, 16, 22, 61],  \n                   'Nationalit\u00e4t': [\"deutsch\", \"schweizerisch\", \"deutsch\", \"italienisch\", \"polnisch\"],  \n                   'Gehalt': [3400, 4000, 0, 3000, 2300]},  \n                  index = ['ID-123', 'ID-462', 'ID-111', 'ID-997', 'ID-707'])  \n\n\nwohnort = pd.DataFrame({'Wohnort': ['Paderborn', 'Kassel', 'Berlin', 'Aachen', 'Bremen'],  \n                           'ID': ['ID-462', 'ID-111', 'ID-123', 'ID-997', 'ID-707']})  \n\nprint(df)  \nprint()  \nprint(wohnort)  \n\nwohnort_with_id_as_index = wohnort.set_index('ID')  \ndf_joinded = df.join(wohnort_with_id_as_index)  \nprint()  \nprint(df_joinded)\n</code></pre></p>"},{"location":"content/pandas/merge_dataframes/#zusammenfugen-mit-concat","title":"Zusammenf\u00fcgen mit concat()","text":"<p>Mit <code>concat()</code> hat man die M\u00f6glichkeit mehr als drei DataFrame mit einander zu vereinigen.</p> <p>Beispiel: <pre><code>import pandas as pd  \ndf = pd.DataFrame({'Name' : [\"Peter\", \"Karla\", \"Anne\", \"Nino\", \"Andrzej\"],  \n                   'Geschlecht': ['M','W','W','M','M'],  \n                   'Alter': [34, 53, 16, 22, 61],  \n                   'Nationalit\u00e4t': [\"deutsch\", \"schweizerisch\", \"deutsch\", \"italienisch\", \"polnisch\"],  \n                   'Gehalt': [3400, 4000, 0, 3000, 2300]},  \n                  index = ['ID-123', 'ID-462', 'ID-111', 'ID-997', 'ID-707'])  \n\n\nwohnort = pd.DataFrame({'Wohnort': ['Paderborn', 'Kassel', 'Berlin', 'Aachen', 'Bremen'],  \n                           'ID': ['ID-462', 'ID-111', 'ID-123', 'ID-997', 'ID-707']})  \n\nberuf = pd.DataFrame({'Beruf': ['Schreiner','Maler','DataScientist','Makler','Banker']},  \n                     index = ['ID-123', 'ID-462', 'ID-111', 'ID-997', 'ID-707'])  \n\nwohnort_with_id_as_index = wohnort.set_index('ID')  \n\nconcated_df = pd.concat([df, wohnort_with_id_as_index, beruf], axis=1, sort=False)  \n\nprint(concated_df)\n</code></pre></p>"},{"location":"content/pandas/pandas/","title":"Pandas","text":"<p>In R sind DataFrames ein direkter Bestandteil der Sprache. In Python gibt es keine eingebaute Datenstruktur, die einem DataFrame entspricht. Jedoch gibt es die Bibliothek <code>pandas</code>, die eine Datenstruktur namens <code>DataFrame</code> bereitstellt, die \u00e4hnlich zu einem DataFrame in R ist.</p>"},{"location":"content/pandas/pandas/#was-ist-pandas","title":"Was ist Pandas?","text":"<p>Pandas ist eine Open-Source-Bibliothek, die in Python geschrieben wurde und die Datenmanipulation und -analyse erleichtert. Die Bibliothek basiert dabei auf Numpy, welches eine weitere Bibliothek ist, die in Python f\u00fcr numerische Berechnungen verwendet wird.</p>"},{"location":"content/pandas/pandas/#erste-schritte-mit-pandas","title":"Erste Schritte mit Pandas","text":"<p>Wir k\u00f6nnen Pandas beispielsweise verwenden, um Daten aus einer CSV-Datei zu lesen und in einem DataFrame zu speichern. In Pandas werden zwei neue Datenstrukturen eingef\u00fchrt: <code>DataFrames</code> und <code>Series</code>. Am Anfang werden wir uns mit der Datenstruktur <code>dataframes</code> auch mit <code>df</code> abgek\u00fcrzt, vertraut machen.</p> <p>Bevor man mit der Pandas-Bibliothek arbeiten kann, muss man sie importieren. Da es sich nicht um eine eingebaute Bibliothek handelt, muss man sie zun\u00e4chst installieren. Nicht vergessen die Dokumentation zu dieser Bibliothek zu lesen!</p> <p>Note</p> <p>Die nachfolgenden Datens\u00e4tze k\u00f6nnen hier heruntergeladen werden.</p> <p>Erste Schritte: <pre><code>import pandas\n# Lets read a csv\ndata = pandas.read_csv(\"https://github.com/laxmimerit/All-CSV-ML-Data-Files-Download/blob/master/bigmac.csv\")\n# Display the data inside the csv\nprint(data)\n# Just get the column called Country\ncountries = data[\"Country\"]\nprint(\"# ------------------------------------ #\")\n# Display only temperatures\nprint(countries)\n</code></pre></p> <p>In Pandas haben wir zwei wichtige Datentypen:</p> <ul> <li>dataframe, es ist \u00e4quivalent zur Tabelle wie im ersten Beispiel.</li> <li>series, es ist eine Spalte wie eine Liste</li> </ul> <p>Wenn man diese beiden Datentypen versteht, dann ist man auf einem guten Weg, diese Bibliothek zu verstehen! Zu Beginn des Lernens von Pandas sollte man sich die zwei Klassen \"DataFrame\" und \"Series\" genauer ansehen (Dokumentation).</p> <p>Berechnen wir als erstes mittel der <code>pandas</code> Bibliothek den durchschnittlichen Preis eines Big Macs in den verschiedenen L\u00e4ndern:</p> <pre><code>...\naverage_price = data[\"Price in US Dollars\"].mean()\nprint(average_price)\n</code></pre> H\u00f6chsten Preis finden <p>Finden Sie den h\u00f6chsten Preis f\u00fcr einen BicMac ```</p> L\u00f6sung <p><code>{ .python .pytutor_button } df[\"Price in US Dollars\"].max()</code></p> <p>Manchmal m\u00f6chte man einfach nur eine Zeile der Tabelle erhalten: <pre><code>row_day = data[data[\"Country\"] == \"Germany\"]\nprint(row_day)\n</code></pre></p> <p>Oder man m\u00f6chte die Reihe mit dem h\u00f6chsten Preis finden: <pre><code>max_price = data[\"Price in US Dollars\"].max()\n\nrow_max_price = data[data[\"Price in US Dollars\"] == max_price]\nprint(row_max_price)\n</code></pre></p> <p>Wir k\u00f6nnen auch eine neue Spalte erstellen, in der die Preise in \u20ac umgerechnet stehen:</p> <pre><code>...\ndata[\"Price in EUR\"] = data[\"Price in US Dollars\"] * 1.09\n</code></pre> <p>Man kann auch einen <code>dataframe</code> von Grund auf neu erstellen: <pre><code>import pandas\n# You have given data:\ndata_dict = {\n    \"students\": [\"Amy\", \"James\", \"Angela\"],\n    \"scores\": [76, 56, 65]\n}\n# We have to create a data frame from this dictionary\ndata = pandas.DataFrame(data_dict)\nprint(data)\n# We can even convert our data frame to a csv\ndata.to_csv(\"new_data.csv\")\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/","title":"Read dataframes","text":"<p>Sehr h\u00e4ufig m\u00f6chte man nicht das ganze <code>DataFrame</code> lesen, sondern nur bestimmte Teile wie z.B. Spalten, Reihen, die ersten oder letzten f\u00fcnf Werte und so weiter.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/read_dataframes/#dataframe-anzeigenausgeben","title":"DataFrame anzeigen/ausgeben","text":"<p>Mit der bereits bekannten Funktion <code>print()</code> l\u00e4sst sich ein <code>DataFrame</code> ausgeben:</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df)\n</code></pre></p> <p>Wenn man eine IDE wie Pycharm verwendet, kann es sein dass die gesamten Daten in der Konsole nicht ausgegeben werden. Die Ursache daf\u00fcr liegt in einem zu gro\u00dfen <code>DataFrame</code>, weswegen in der Konsole kein Platz f\u00fcr die Anzeige vorhanden ist. </p> <p>Um die Ausgabe zu erm\u00f6glichen verwendet man h\u00e4ufig die Methode <code>to_string()</code>, um das <code>DataFrame</code> in den Datentyp String zu konvertieren. Dadurch kann man manchmal das gesamte <code>DataFrame</code> in der Konsole darstellen:</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \n# Convert DataFrame in string  \ndf_as_string = df.to_string()  \n# Display the converted DataFrame  \nprint(df_as_string)  \n# Display the type of the convertet DataFrame  \nprint(type(df_as_string))\n</code></pre></p> <p>Falls man Jupyter Notebook verwendet, kann man durch die folgenden Einstellungen das gesamte <code>DataFrame</code> ausgeben lassen:</p> <pre><code>pd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\",\u00a0None)\n</code></pre>"},{"location":"content/pandas/read_dataframes/#die-ersten-funf-zeilen-ausgeben","title":"Die ersten f\u00fcnf Zeilen ausgeben","text":"<p>Unter der Nutzung der <code>head()</code> Methode zusammen mit der <code>print()</code> Funktion, lassen sich die ersten f\u00fcnf Zeilen ausgeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Read first five rows  \nprint(df.head())  \n# Read first ten rows  \nprint(df.head(10))\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#die-letzten-funf-zeilen-ausgeben","title":"Die letzten f\u00fcnf Zeilen ausgeben","text":"<p>Genau wie die <code>head()</code> Methode funktioniert auch die <code>tail()</code> Methode nur eben mit den letzten f\u00fcnf Zeilen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n#  bottom five forws  \nprint(df.tail())\n#  bottom ten forws  \nprint(df.tail(10))\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#spaltennamen-ausgeben","title":"Spaltennamen ausgeben","text":"<p>H\u00e4ufig sind die <code>DataFrames</code> so gro\u00df das man nicht alle Spalten sieht wenn man <code>print()</code>, <code>head()</code> oder <code>tail()</code> verwendet. Deswegen ist es praktisch, wenn man nur die Spaltennamen ausgibt, um sich einen \u00dcberblick zu verschaffen.</p> <p>Dazu ben\u00f6tigt man das Attribut <code>columns</code>.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Read the column names  \nprint(df.columns)\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#datentyp-ausgeben","title":"Datentyp ausgeben","text":"<p>Man kann auch den Datentyp auslesen lassen, indem man das Attribut <code>dtypes</code> verwendet. Dadurch wird eine <code>Serie</code> zur\u00fcckgegeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Read the datatypes of the dataframe  \nprint(df.dtypes)\n</code></pre></p> <p>In Pandas werden folgende Datentypen unterschieden:</p> Pandas dtype Python type Usage object str or mixed Text or mixed numeric and non-numeric values int64 int Integer numbers float64 float Floating point numbers bool bool True/False values datetime64 NA Date and time values timedelta[ns] NA Differences between two datetimes category NA Finite list of text values"},{"location":"content/pandas/read_dataframes/#spaltespalten-ausgeben","title":"Spalte/Spalten ausgeben","text":"<p>Man kann sich eine Spalte ausgeben lassen, indem man in eckigen Klammern den Spaltennamen angibt.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Access specific column  \nprint(df[\"State\"])\n</code></pre></p> <p>Eine weitere M\u00f6glichkeit bietet der Punktoperator. Den selben Effekt wie im obigen Beispiel k\u00f6nnen wir erzielen indem wir nach dem Punktoperator der Spaltennamen angeben. Aber Achtung, bei Leerzeilen ist diese Methode nicht m\u00f6glich.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Access specific column  \nprint(df.State)\n</code></pre></p> <p>Es ist auch m\u00f6glich mehrere Spalten zu lesen. Dazu wird einfach eine Liste mit den Spaltennamen der rechteckigen Klammer eines <code>DataFrames</code> \u00fcbergeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Create a list of column names, which we like to access  \nlist_of_column_names = [\"State\", \"Area code\", \"Churn\"]  \n# Access multiple column  \nprint(df[list_of_column_names])\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#unterschied-zwischen-einfachen-und-doppelten-eckigen-klammern","title":"Unterschied zwischen einfachen und doppelten eckigen Klammern","text":"<p>Beim Lesen einer Spalte kann man sowohl einfache als auch doppelte eckige Klammern verwendet. Der entscheidende Unterschied liegt im Datentype. Bei den einfachen eckigen Klammern handelt es sich um eine zur\u00fcckgegebene <code>Serie</code> und bei den doppelten eckigen Klammern um ein <code>DataFrame</code>.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Create a list of column names, which we like to access  \nlist_of_column_names = [\"State\", \"Area code\", \"Churn\"]  \n# Single square brackets  \nsingle_square_brackets = df[\"State\"]  \n# Double square brackets  \ndouble_square_brackets = df[[\"State\"]]  \n# Types  \nprint(type(single_square_brackets))  \nprint(type(double_square_brackets))\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#zeilezeilen-ausgeben","title":"Zeile/Zeilen ausgeben","text":"<p>Durch die Nutzung des Slice Operators (Doppelpunkt), kann man sowohl auf eine als auch auf mehrere Zeilen zugreifen. Als R\u00fcckgabe erh\u00e4lt man eine <code>DataFrame</code> welches eine oder mehrere Zeilen enth\u00e4lt.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display the 3rd row  \nprint(df[3:4])  \n# Display the 4 until 7 row  \nprint(df[4:8])\n</code></pre></p> <p>Eine weit verbreitete M\u00f6glichkeit effektiv auf Zeilen zuzugreifen ist die Nutzung der beiden Methoden <code>iloc</code> und <code>loc</code> (indexing by integers/keywords).</p> <p>Diese Methoden erm\u00f6glichen durch Indizierung den Zugriff auf Zeilen.  Dabei unterscheidet man bei den Indizes zwischen numerischen Werten (integers) und Schl\u00fcsselw\u00f6rtern (keywords).</p>"},{"location":"content/pandas/read_dataframes/#zugriff-durch-iloc-integers","title":"Zugriff durch iloc (integers)","text":"<p>Die Voraussetzung f\u00fcr die Nutzung der <code>iloc</code> Methode ist das vorhanden sein einer nummerischen Indizierung, welche standartm\u00e4\u00dfig eingestellt ist. Als R\u00fcckgabe erh\u00e4lt man eine <code>Series</code>, welche alle Informationen zu der jeweiligen Zeile liefert.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display the 3rd row  \nprint(df.iloc[3])\n</code></pre></p> <p>Manchmal m\u00f6chte man nicht nur eine bestimmte Zeile \u00fcber den Index ansprechen, sondern auch eine Spalte. Dazu wird ein zweiter Parameter \u00fcbergeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display the value of 3rd row and 1th column  \nprint(df.iloc[3,1])\n</code></pre></p> <p>Man kann auch den <code>slice</code> Operator verwenden um einen bestimmten Bereich anzusprechen (Intervalle).</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Using slice operator to get a range of rows  \nprint(df.iloc[0:3])\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#zugriff-durch-loc-keywords","title":"zugriff durch loc (keywords)","text":"<p>Im Vergleich zu der <code>iloc</code> Methode verwendet man hier anstelle <code>int</code> Indizes bestimmte Schl\u00fcsselw\u00f6rter (keywords) um bestimmte Zeilen auszulesen.</p> <p>Um Jedoch mit der <code>loc</code> Methode arbeiten zu k\u00f6nnen, muss man zuallererst die standartm\u00e4\u00dfige Indizierung mit <code>int</code> Werten \u00e4ndern. Erst dann kann man jede einzelne Zeile ansprechen indem man die keywords der <code>loc</code> Methode \u00fcbergibt.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Set the column \"region\" as the new index \n# \"inplace\" parameter will update current DataFrame \"df\"  \ndf.set_index(\"region\", inplace=True)  \nprint(df)\n</code></pre></p> <p>Nachdem die Index Spalte aus keywords besteht, kann man die Spalten ansprechen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Change index of DataFrame  \ndf.set_index(\"region\", inplace=True)  \n# Display Columns with \"region\" index equal \"WestTexNewMexico\"  \nprint(df.loc[\"WestTexNewMexico\"])\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#informationen-zum-dataframe","title":"Informationen zum DataFrame","text":"<p>Die Methode <code>info()</code> gibt eine kurze Zusammenfassung \u00fcber das jeweilige DataFrame zur\u00fcck. Bei den Informationen handelt es sich um Anzahl der Spalten, Spaltennamen, Spalten Datentypen, Speichernutzung und noch mehr.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display information about the DataFrame  \nprint(df.info())\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#einzigartige-werte-einer-spalte-unique-values","title":"Einzigartige Werte einer Spalte (unique values)","text":"<p>Mithilfe der Methode <code>unique()</code> kann man eindeutige Werte einer Spalte finden. Sie gibt also jeden Wert der in einer spalte vorkommt einmalig aus, egal ob der jeweilige Wert mehrmals in der entsprechenden Spalte vorkommt. Als Ausgabe erh\u00e4lt man ein Array mit den eindeutigen Werten.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndata_finance = {  \n   \"name\": [\"William\", \"Emma\", \"Sofia\", \"Markus\", \"Edward\"],  \n    \"region\": [\"East\", \"North\", \"East\", \"South\", \"West\"],  \n    \"sales\": [50000, 52000, 90000, 34000, 42000],  \n    \"expense\": [42000, 43000, 400000, 44000, 38000]  \n}  \n# Create a DataFrame  \ndf = pd.DataFrame(data=data_finance)  \n# Find unique values inside the \"region\" column  \nprint(df[\"region\"].unique())\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#for-schleife-anwenden-loop-a-dataframe","title":"for-Schleife anwenden (loop a DataFrame)","text":"<p>Mit der <code>iterrows()</code> Methode ist es m\u00f6glich jede Zeile eines <code>DataFrames</code> anzusprechen. Die Methode gibt den Index der Zeile und die gesamten Daten der Zeile als\u00a0<code>Series</code>\u00a0zur\u00fcck.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\nexam_data = {  \n    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n    'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(df)  \n\nfor index, row in df.iterrows():  \n    print(index)  \n    print(row)\n</code></pre></p> <p>Wenn M\u00f6glich sollte man die Nutzung der for-Schleife vermeiden da bei gro\u00dfen Datenmengen die Laufzeit stark zu leiden hat.</p>"},{"location":"content/pandas/read_dataframes/#anzahl-der-spalten-und-zeilen","title":"Anzahl der Spalten und Zeilen","text":"<p>Mit dem Attribut <code>shape</code> kann man in einer Tupel-Form <code>(rows,columns)</code> die Anzahl der Zeilen und Spalten abfragen</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \nprint(df.shape)\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#anzahl-aller-elemente","title":"Anzahl aller Elemente","text":"<p>Mit dem Attribut <code>size</code> kann man die Anzahl alles Elemente im <code>DataFrame</code> abfragen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \nprint(df.size)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/","title":"Series dataframes","text":""},{"location":"content/pandas/series_dataframes/#erstellen-von-series","title":"Erstellen von Series","text":"<p>Bei einer <code>Series</code> handelt es sich um ein Objekt, welches eine Sequenz aus Werten und einen damit verbundenen Index enth\u00e4lt.</p> <p>Die Datenstruktur <code>Series</code> ist wie eine standartm\u00e4\u00dfige <code>Liste</code> mit dem Unterschied, dass <code>Series</code> nur Werte eines einzelnen Datentyps enthalten k\u00f6nnen.</p> <p>Das einfachste Beispiel f\u00fcr die Erstellung einer <code>Series</code> ist die Nutzung der Klasse <code>Series</code>.  Dazu muss man eine <code>Liste</code> oder z.B. einen <code>numpy-array</code> dem Objekt der Klasse <code>Series</code> \u00fcbergeben: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \n# Create a Series(-Objekt) from a list or array  \ndata_series_list = Series(my_list)  \n# Display Series  \nprint(data_series_list)\n</code></pre></p> <p>Man kann auch ein <code>Dictionary</code> verwenden um eine <code>Series</code> zu erstellen. Dazu muss man einfach das <code>Dictionary</code> dem <code>Series</code>-Objekt \u00fcbergeben. Dabei werden die <code>keys</code> des <code>Dictionary</code> als Indizes verwendet: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# Create a dictionary  \ncity_population = {  \n    \"Berlin\": 3_669_491,  \n                    \"Hamburg\": 1_847_253,  \n                    \"M\u00fcnchen\": 1_484_226,  \n                    \"K\u00f6ln\": 1_087_863,  \n                    \"Frankfurt am Main\": 763_380,  \n                    \"Stuttgart\": 635_911,  \n                    \"D\u00fcsseldorf\": 621_877,  \n                    \"Leipzig\": 593_145,  \n                    \"Dortmund\": 588_250,  \n                    \"Essen\": 582_760,  \n                    \"Bremen\": 567_559,  \n                    \"Dresden\": 556_780,  \n                    \"Hannover\": 536_925,  \n                    \"N\u00fcrnberg\": 518_370  \n                   }  \n# Create a Series from a dictionary  \ndata_series_dict = Series(data=city_population)  \n# Display the Series  \nprint(data_series_dict)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#indexierung-andern","title":"Indexierung \u00e4ndern","text":"<p>Standartm\u00e4\u00dfig wird jeder Datenpunkt \u00fcber einen Index identifiziert. Dabei f\u00e4ngt der Index bei <code>0</code> an und endet bei <code>Anzahl der Elemente - 1</code>. H\u00e4ufig m\u00f6chte man jedoch eine andere Indexierung der Datenpunkte haben, dazu muss man in das <code>Series</code>(-Objekt) den Parameter <code>index</code> \u00fcbergeben: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Display Series  \nprint(data_series_list)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#bestimmte-werte-ausgeben","title":"Bestimmte Werte ausgeben","text":"<p>Durch die Nutzung eckiger Klammern und der Angabe des Index ist die Ausgabe bestimmter einzelner Werte m\u00f6glich: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Display specific value  \nprint(data_series_list[\"f\"])  \n# Other method with same result  \nprint(data_series_list[2])\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#mehrere-werte-ausgeben","title":"Mehrere Werte ausgeben","text":"<p>M\u00f6chte man mehrere Werte aus einer <code>Series</code> ausgeben, dann muss man die dazugeh\u00f6rigen Indizes in einer Liste \u00fcbergeben. Dadurch entstehen doppelte eckige Klammern. Als R\u00fcckgabe erh\u00e4lt man wieder eine <code>Series</code> die man entweder speichern kann, f\u00fcr weitere Verwendungen, oder einfach nur anzeigen: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Display multiple values, Series will be returned  \nprint(data_series_list[[\"l\", \"j\", \"d\"]])\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#mathematische-operatoren-anwenden","title":"Mathematische Operatoren anwenden","text":"<p>Man kann auf alle Werte einer <code>Series</code> mathematische bzw. logische Operatoren anwenden: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Using mathematical operators  \nprint(data_series_list * 2)  # Double each value  \nprint(data_series_list % 2)  # Check if values are even  \nprint(data_series_list &lt; 10)  # Check which values are less than 10\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#series-filtern","title":"Series filtern","text":"<p>Oft hat man nur Interesse an einer Teilmenge der <code>Series</code>. Manchmal m\u00f6chte man nur Werte gr\u00f6\u00dfer als einen bestimmten Wert haben oder nur ganze Werte und so weiter. Dazu muss man logische Operatoren verwenden um eine <code>Series</code> mit booleschen Werten zu erhalten. Anschlie\u00dfend werden die booleschen Werte in die <code>Series</code> eingesetzt: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Filtering values  \ngreater_than_8_bool = data_series_list &gt; 8  # Firstly create boolean values  \nprint(greater_than_8_bool)  \ngreater_than_8 = data_series_list[greater_than_8_bool]  # Then insert boolean values inside Series  \nprint(greater_than_8)\n</code></pre></p> <p>Weiteres Beispiel: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Filtering values  \n# We will get a Series with only 4 and 8  \ndata_series_list_equal = (data_series_list == 4) | (data_series_list == 8)  # Here we get boolean values  \nprint(data_series_list_equal)  \nprint(data_series_list[data_series_list_equal])  # Display only 4 and 8\n</code></pre></p> <p>Die wohl interessanteste Datenstruktur ist ein <code>DataFrame</code>, denn damit wird man am h\u00e4ufigsten arbeiten. Es handelt sich dabei um eine tabellarische Auftragung zugeh\u00f6riger Daten. Klassischerweise stehen in den Reihen der Tabelle die Einzelmessungen und in den Spalten die festgehaltenen Werte einer Messung.</p> <p>Die Erstellung eines <code>DataFrames</code> kann auf viele Arten erfolgen. Am h\u00e4ufigsten liegt eine Datei wie z.B. eine CSV-Datei vor, welche die zu untersuchenden Daten beinhaltet. Aber auch die Erstellung eines <code>DataFrames</code> aus einem <code>Dictionary</code> oder einer Datenbank ist m\u00f6glich.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/series_dataframes/#erstellen-aus-einer-csv-datei","title":"Erstellen aus einer CSV-Datei","text":"<p>Dazu wird die Methode <code>read_csv</code> verwendet.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#erstellen-aus-einer-dictionary","title":"Erstellen aus einer Dictionary","text":"<p>Es kann auch mal vorkommen, dass man eine kleine Menge an Daten als ein <code>DataFrame</code> haben m\u00f6chte. Dazu kann man h\u00e4ufig ein eigenes <code>Dictionary</code> erstellen und anschlie\u00dfend daraus ein `DataFrame erstellen.</p> <p>Dabei geht man davon aus dass: - die <code>keys</code> des <code>Dictionary</code> die Spaltennamen sind, - die <code>values</code> des <code>Dictionary</code> die Daten sind, welche als Liste gespeichert sind.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# This Dictionary is given  \ntempdict = {  \n    \"col1\": [1, 2, 3],  \n    \"col2\": [4, 5, 6],  \n    \"col3\": [7, 8, 9]  \n}  \n# Create a dataframe from this dictionary  \ndictdf = pd.DataFrame.from_dict(tempdict)  \nprint(dictdf)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#entfernen-eines-dataframe","title":"Entfernen eines DataFrame","text":"<p>Durch das Schl\u00fcsselwort <code>del</code> kann man ein DataFrame l\u00f6schen: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Delete the DataFrame\ndel df\n</code></pre></p>"},{"location":"content/pandas/statistic_dataframes/","title":"Statistic dataframes","text":"<p>Die Berechnung statistischer Gr\u00f6\u00dfen ist eine h\u00e4ufige Aufgabe bei der Arbeit mit <code>pandas</code>. Schlie\u00dflich wird <code>pandas</code> in der Daten Analyse und im Data Science Bereich verwendet. Daher sollte man einige grundlegende statistische Funktionalit\u00e4ten von <code>DataFrames</code> kennen.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/statistic_dataframes/#statistik-des-dataframes-ausgeben","title":"Statistik des DataFrames ausgeben","text":"<p>Um die Daten besser zu verstehen, werden einige Funktionalit\u00e4ten bereitgestellt, um auf statistische Gr\u00f6\u00dfen zugreifen zu k\u00f6nnen. Die Methode <code>describe()</code> erstellt eine Zusammenfassung einiger wichtiger statistischer Gr\u00f6\u00dfen.</p> <p>Jedoch wird diese Methoden nur auf den Datentyp <code>int</code> oder <code>float</code> angewendet: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Summary statistics of data  \nprint(df.describe())\n</code></pre></p> <p>Manchmal m\u00f6chte man eine Zusammenfassende Statistik nicht nur von <code>float</code>  und <code>int</code> Datentypen haben, sondern auch von Objekten. Um <code>describe()</code> auf Objekte anzuwenden muss man einen Parameter angeben. Wenn man den Parameter <code>include=\"object\"</code> verwendet werden die Datentypen <code>int</code> und <code>float</code> ausgeschlossen.</p> <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Summary statistics of data (non int and float values)  \nprint(df.describe(include=\"object\").to_string())    \n</code></pre>"},{"location":"content/pandas/useful_functions/","title":"Useful functions","text":"<p>Hier werden einige h\u00e4ufig verwendeten Funktionalit\u00e4ten aufgetragen. Bei der Arbeit mit <code>DataFrames</code> kommen sie h\u00e4ufig zum Einsatz um ein gegebenes Problem zu l\u00f6sen.</p>"},{"location":"content/pandas/useful_functions/#daten-gruppieren","title":"Daten gruppieren","text":"<p>Mit der Methode <code>groupby()</code> kann man die Daten anhand einiger Kriterien in gruppen aufgeteilt werden und auch Funktionen auf diese Gruppen angewendet werden</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Group DataFrame by \"Courses and calculate sum on \"Fee\" and \"Discount\" columns  \ndf = df.groupby([\"Courses\"]).sum()  \nprint(df)  \n# Display type of grouped DataFrame  \nprint(type(df))\n</code></pre></p>"},{"location":"content/pandas/useful_functions/#dataframe-sortieren","title":"DataFrame sortieren","text":"<p>Mit der Methode <code>sort_values()</code> l\u00e4sst sich eine DataFrame sortieren.</p> <p>Zum Beispiel das Sortieren einer Spalte: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values(\"Account length\"))\n</code></pre></p> <p>Wenn man innerhalb der Methode <code>sort_values()</code> das Argument <code>ascending=False</code> setzt, werden die Daten in die andere Richtung sortiert: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values(\"Account length\", ascending=False))\n</code></pre></p> <p>Es ist auch m\u00f6glich mehrere Spalten auf einmal zu sortieren. Dazu muss man der Methode <code>sort_values()</code> eine Liste mit den zu sortierenden Spalten \u00fcbergeben: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values([\"Account length\", \"Customer service calls\"], ascending=False))\n</code></pre></p> <p>Auch die \u00dcbergabe des Arguments <code>ascending</code> kann durch eine Liste erfolgen, damit jede Spalte unterschiedlich sortiert wird: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values([\"Account length\", \"Customer service calls\"], ascending=[False, True]))\n</code></pre></p>"},{"location":"content/pandas/useful_functions/#nutzung-der-apply-methode","title":"Nutzung der \"apply\" Methode","text":"<p>Man kann anstelle einer \"for\"-Loop auch die <code>apply()</code> Methode verwenden: <pre><code>import pandas as pd  \n\nexam_data = {  \n    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n    'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \ndf[\"Name UpperCase\"] = df[\"name\"].apply(str.upper)  \n\nprint(df)\n</code></pre></p> <p>Hier wird als erstes eine neue Spalte mit den Namen <code>Name UpperCase</code> erstellt. Anschlie\u00dfend wird in jeder Zeile dieser Spalte der Name aus der \"name\"-Spalte gespeichert, jedoch unter der Anwendung der <code>upper</code> Methode.</p>"},{"location":"content/pandas/useful_functions/#funktionen-auf-spaltenzeilen-anwenden","title":"Funktionen auf Spalten/Zeilen anwenden","text":"<p>Mittels der Methode <code>agg</code> kann man benutzerdefinierte- oder built-in Funktionen auf Spalten oder Zeilen anwenden. Am h\u00e4ufigsten erstellt man eine eigene Funktion und m\u00f6chte sie auf eine Zeile anwenden: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"data_file.csv\")  \nprint(df.head(50).to_string())  \n\n\ndef average_account_length(column):  \n    return column.sum() / column.count()  \n\n\naverage_account_length = df[\"Account length\"].agg(average_account_length)  \nprint(f\"The average account legth is: {average_account_length}\")\n</code></pre></p> <p>Es ist auch m\u00f6glich die erstellte Funktion auf mehrere Spalten anzuwenden: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"data_file.csv\")  \nprint(df.head(50).to_string())  \n\n\ndef average_calculation(column):  \n    return column.sum() / column.count()  \n\n\naverage_accLength_and_totalDayMinutes = (df[[\"Account length\", \"Total day minutes\"]].agg(average_calculation))  \nprint(f\"The average account length is: {average_accLength_and_totalDayMinutes[0]} and the average total day minutes are: {average_accLength_and_totalDayMinutes[1]}\")\n</code></pre></p> <p>Das Anwenden mehrerer Funktion ist auch m\u00f6glich. Dazu muss man der Methode <code>agg()</code> eine Liste mit Funktionen \u00fcbergeben: <pre><code>import pandas as pd  \nimport numpy as np  \n\ndf = pd.read_csv(\"data_file.csv\")  \nprint(df.head(50).to_string())  \n\n\ndef average_calculation(column):  \n    return column.sum() / column.count()  \n\n\naverageAndmedian_accLength_and_totalDayMinutes = (df[[\"Account length\", \"Total day minutes\"]].agg([average_calculation, np.median]))  \nprint(averageAndmedian_accLength_and_totalDayMinutes)\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/","title":"1 \u00a0Assignment","text":"<p>Write a Pandas program to get the the data inside a DataFrame.</p> <p>Sample data:  <pre><code>{'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}\n</code></pre></p> <p>Expected Outout: <pre><code>X Y Z  \n0 78 84 86  \n1 85 94 97  \n2 96 89 96  \n3 80 83 72  \n4 86 86 83\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution","title":"Solution","text":"<pre><code>import pandas as pd  \nsample_data = {'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}  \ndf = pd.DataFrame(sample_data)  \nprint(df)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#2-assignment","title":"2 \u00a0Assignment","text":"<p>Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample Python list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Outout: <pre><code>attempts name qualify score  \na 1 Anastasia yes 12.5  \nb 3 Dima no 9.0  \n.... i 2 Kevin no 8.0  \nj 1 Jonas yes 19.0\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_1","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(df)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#3-assignment","title":"3 \u00a0Assignment","text":"<p>Write a Pandas program to display a summary of the basic information about a specified DataFrame and its data.</p> <p>Sample Python dictionary: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Summary of the basic information about this DataFrame and its data:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 10 entries, a to j\nData columns (total 4 columns):\nattempts    10 non-null int64\nname        10 non-null object\nqualify     10 non-null object\nscore       8 non-null float64\ndtypes: float64(1), int64(1), object(2)\nmemory usage: 400.0+ bytes\nNone\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_2","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(\"Summary of the basic information about this DataFrame and its data:\")  \nprint(df.info())\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#4-assignment","title":"4 \u00a0Assignment","text":"<p>Write a Pandas program to get the first 3 rows of a given DataFrame.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>First three rows of the data frame:                                    \n   attempts       name qualify  score                                  \na         1  Anastasia     yes   12.5                                  \nb         3       Dima      no    9.0                                  \nc         2  Katherine     yes   16.5\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_3","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(\"First three rows of the data frame:\")  \nprint(df.head(3))\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#5-assignment","title":"5 \u00a0Assignment","text":"<p>Write a Pandas program to select the 'name' and 'score' columns from the following DataFrame.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Select specific columns:                                               \n        name  score                                                    \na  Anastasia   12.5                                                    \nb       Dima    9.0                                                    \nc  Katherine   16.5                                                    \nd      James    NaN                                                    \ne      Emily    9.0                                                    \nf    Michael   20.0                                                    \ng    Matthew   14.5                                                    \nh      Laura    NaN                                                    \ni      Kevin    8.0                                                    \nj      Jonas   19.0\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_4","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(\"Select specific columns: \")  \nprint(df[[\"name\", \"score\"]])\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#6-assignment","title":"6 \u00a0Assignment","text":"<p>Write a Pandas program to select the specified columns and rows from a given data frame. Select 'name' and 'score' columns in rows 1, 3, 5, 6 from the following data frame.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Select specific columns and rows:\n   score qualify\nb    9.0      no\nd    NaN      no\nf   20.0     yes\ng   14.5     yes\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_5","title":"Solution","text":"<pre><code>import pandas as pd  \n\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(df.iloc[[1, 3, 5, 6], [1, 3]])\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#7-assignment","title":"7 \u00a0Assignment","text":"<p>Write a Pandas program to select the rows where the number of attempts in the examination is greater than 2.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Select specific columns:                                               \nNumber of attempts in the examination is greater than 2:\n      name  score  attempts qualify\nb     Dima    9.0         3      no\nd    James    NaN         3      no\nf  Michael   20.0         3     yes\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_6","title":"Solution","text":"<pre><code>import pandas as pd  \n\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \ndf = df[df[\"attempts\"] &gt; 2]  \nprint(df)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/","title":"\u00dcbungen Series Datenstruktur","text":"<p>F\u00fcr einige Aufgaben ist es notwendig selbstst\u00e4ndig die n\u00f6tigen Funktionen, Methoden, Attribute durch Internet Recherche heraus zu finden!</p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgaben","title":"Aufgaben","text":""},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#1-aufgabe","title":"1. Aufgabe","text":"<p>Write a Pandas program to create and display a one-dimensional array-like object containing an array of data using Pandas module.</p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#2-aufgabe","title":"2. Aufgabe","text":"<p>Write a Pandas program to convert a Panda module Series to Python list and it's type.</p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#3-aufgabe","title":"3. Aufgabe","text":"<p>Write a Pandas program to add, subtract, multiple and divide two Pandas Series.\u00a0 Sample Series: <code>[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]</code></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#4-aufgabe","title":"4. Aufgabe","text":"<p>Write a Pandas program to compare the elements of the two Pandas Series. Sample Series: <code>[2, 4, 6, 8, 10], [1, 3, 5, 7, 10]</code></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#5-aufgabe","title":"5. Aufgabe","text":"<p>Write a Pandas program to convert a dictionary to a Pandas series. <pre><code>Original dictionary:  \n{'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800}  \nConverted series:  \na 100  \nb 200  \nc 300  \nd 400  \ne 800  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#6-aufgabe","title":"6. Aufgabe","text":"<p>Write a Pandas program to convert a NumPy array to a Pandas series.\u00a0 <pre><code>NumPy array:  \n[10 20 30 40 50]  \nConverted Pandas series:  \n0 10  \n1 20  \n2 30  \n3 40  \n4 50  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#7-aufgabe","title":"7. Aufgabe","text":"<p>Write a Pandas program to change the data type of given a column or a Series. <pre><code>Original Data Series:  \n0 100  \n1 200  \n2 python  \n3 300.12  \n4 400  \ndtype: object  \nChange the said data type to numeric:  \n0 100.00  \n1 200.00  \n2 NaN  \n3 300.12  \n4 400.00  \ndtype: float64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#8-aufgabe","title":"8. Aufgabe","text":"<p>Write a Pandas program to convert the first column of a DataFrame as a Series. <pre><code>Original DataFrame:  \ncol1 col2 col3  \n0 1 4 7  \n1 2 5 5  \n2 3 6 8  \n3 4 9 12  \n4 7 5 1  \n5 11 0 11  \n1st column as a Series:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 7  \n5 11  \nName: col1, dtype: int64  \n&lt;class 'pandas.core.series.Series'&gt;\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#9-aufgabe","title":"9. Aufgabe","text":"<p>Write a Pandas program to convert a given Series to an array. <pre><code>Sample Output:  \nOriginal Data Series:  \n0 100  \n1 200  \n2 python  \n3 300.12  \n4 400  \ndtype: object  \nSeries to an array  \n['100' '200' 'python' '300.12' '400']\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#10-aufgabe","title":"10. Aufgabe","text":"<p>Write a Pandas program to convert Series of lists to one Series.\u00a0 <pre><code>Sample Output:  \nOriginal Series of list  \n0 [Red, Green, White]  \n1 [Red, Black]  \n2 [Yellow]  \ndtype: object  \nOne Series  \n0 Red  \n1 Green  \n2 White  \n3 Red  \n4 Black  \n5 Yellow  \ndtype: object\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#11-aufgabe","title":"11. Aufgabe","text":"<p>Write a Pandas program to sort a given Series. <pre><code>Sample Output:  \nOriginal Data Series: \n0 '100'\n1 '200'\n2 'python' \n3 '300.12'  \n4 '400'  \ndtype: object  \n0 100  \n1 200  \n3 300.12  \n4 400  \n2 python  \ndtype: object\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#12-aufgabe","title":"12. Aufgabe","text":"<p>Write a Pandas program to add some data to an existing Series.\u00a0 <pre><code>Sample Output:  \nOriginal Data Series:  \n0 \"100\"  \n1 \"200\"  \n2 \"python\"  \n3 \"300.12\"  \n4 \"400\"  \ndtype: object  \nData Series after adding some data:  \n0 \"100\"  \n1 \"200\"  \n2 \"python\"  \n3 \"300.12\"  \n4 \"400\"   \n5 \"500\"  \n6 \"php\"  \ndtype: object\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#13-aufgabe","title":"13. Aufgabe","text":"<p>Write a Pandas program to create a subset of a given series based on value and condition.\u00a0 <pre><code>Sample Output:  \nOriginal Data Series:  \n0 0  \n1 1  \n2 2  \n3 3  \n4 4  \n5 5  \n6 6  \n7 7  \n8 8  \n9 9  \n10 10  \ndtype: int64  \nSubset of the above Data Series:  \n0 0  \n1 1  \n2 2  \n3 3  \n4 4  \n5 5  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#14-aufgabe","title":"14. Aufgabe","text":"<p>Write a Pandas program to change the order of index of a given series. <pre><code>Sample Output:  \nOriginal Data Series:  \nA 1  \nB 2  \nC 3  \nD 4  \nE 5  \ndtype: int64  \nData Series after changing the order of index:  \nE 2  \nD 1  \nC 3  \nB 4  \nA 5  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#15-aufgabe","title":"15. Aufgabe","text":"<p>Write a Pandas program to create the mean and standard deviation of the data of a given Series. <pre><code>Sample Output:  \nOriginal Data Series:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 5  \n5 6  \n6 7  \n7 8  \n8 9  \n9 5  \n10 3  \ndtype: int64  \nMean of the said Data Series:  \n4.818181818181818  \nStandard deviation of the said Data Series:  \n2.522624895547565\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#16-aufgabe","title":"16. Aufgabe","text":"<p>Write a Pandas program to get the items of a given series not present in another given series. <pre><code>Sample Output:  \nOriginal Series:  \nsr1:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 5  \ndtype: int64  \nsr2:  \n0 2  \n1 4  \n2 6  \n3 8  \n4 10  \ndtype: int64  \nItems of sr1 not present in sr2:  \n0 1  \n2 3  \n4 5  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#17-aufgabe","title":"17. Aufgabe","text":"<p>Write a Pandas program to get the items which are not common of two given series. <pre><code>Sample Output:  \nOriginal Series:  \nsr1:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 5  \ndtype: int64  \nsr2:  \n0 2  \n1 4  \n2 6  \n3 8  \n4 10  \ndtype: int64  \nItems of a given series not present in another given series:  \n0 1  \n2 3  \n4 5  \n5 6  \n6 8  \n7 10  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#18-aufgabe","title":"18. Aufgabe","text":"<p>Write a Pandas program to compute the minimum, 25th percentile, median, 75th, and maximum of a given series. <pre><code>Sample Output:  \nOriginal Series:  \n0 3.000938  \n1 11.370722  \n2 14.612143  \n3 8.990256  \n4 13.925283  \n5 12.056875  \n.... \n17 14.118931  \n18 8.247458  \n19 5.526727  \ndtype: float64  \nMinimum, 25th percentile, median, 75th, and maximum of a given series:  \n[3.00093811 8.09463867 10.23353705 12.21537733 14.61214321]\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#losungen","title":"L\u00f6sungen","text":""},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#1-aufgabe_1","title":"1. Aufgabe","text":"<pre><code>import pandas as pd  \n\narray = [1, 2, 3, 4, 5, 6, 7]  \nserries = pd.Series(array)  \nprint(serries)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#2-aufgabe_1","title":"2. Aufgabe","text":"<pre><code>import pandas as pd  \n\n# Create an array or list  \narray = [1, 2, 3, 4, 5, 6, 7]  \nserries = pd.Series(array)  \n# Convert back to a list  \nback_to_list = serries.to_list()  \n# Check the type  \nprint(type(back_to_list))\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#3-aufgabe_1","title":"3. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\nseries_1 = Series([2, 4, 6, 8, 10])  \nseries_2 = Series([1, 3, 5, 7, 9])  \n\ndef add_series(series_1, series_2):  \n    return series_1 + series_2  \n\n\ndef multiply_series(series_1, series_2):  \n    return series_1 * series_2  \n\n\ndef subtract_series(series_1, series_2):  \n    return series_1 - series_2  \n\n\ndef divide_series(series_1, series_2):  \n    return series_1 / series_2  \n\n# ---------- MAIN ---------- #  \nseries_sum = add_series(series_1, series_2)  \nprint(series_sum)  \nseries_multiply = multiply_series(series_1, series_2)  \nprint(series_multiply)  \ndifference_series = subtract_series(series_1, series_2)  \nprint(difference_series)  \ndivision_series = divide_series(series_1, series_2)  \nprint(division_series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#4-aufgabe_1","title":"4. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\nseries_1 = Series([2, 4, 6, 8, 10])  \nseries_2 = Series([1, 3, 5, 7, 9])  \n\nprint(f\"series_1 greater than series_2:\\n{series_1 &gt; series_2}\")  \nprint(f\"series_1 less than series_2:\\n{series_1 &lt; series_2}\")  \nprint(f\"series_1 equal series_2:\\n{series_1 == series_2}\")\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#5-aufgabe_1","title":"5. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\ndict_data = {  \n    'a': 100,  \n    'b': 200,  \n    'c': 300,  \n    'd': 400,  \n    'e': 800  \n}  \n\nseries_dict = Series(data=dict_data)  \nprint(series_dict)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#6-aufgabe_1","title":"6. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \nimport numpy as np  \n\nnp_array = np.array([10, 20, 30, 40, 50])  \n\nseries_dict = Series(data=np_array)  \nprint(series_dict)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-7","title":"Aufgabe 7","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\ndata_Series = Series([100, 200, \"python\", 300.12, 400])  \n\ndata_Series_converted = pd.to_numeric(data_Series, errors=\"coerce\")  \nprint(data_Series_converted)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#8-aufgabe_1","title":"8. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \ndict_for_df = {  \n    \"col1\": [1, 2, 3, 4, 7, 11],  \n    \"col2\": [4, 5, 6, 9, 5, 0],  \n    \"col3\": [7, 5, 8, 12, 1, 11]  \n}  \ndf = DataFrame(data=dict_for_df)  \ncolumn_as_series = Series(dict_for_df[\"col1\"])  \nprint(column_as_series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#9-aufgabe_1","title":"9. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \nimport numpy as np  \n\noriginal_data_series = Series([100, 200, \"python\", 300.12, 400])  \n# without \".values.tolist()\" you will get only a \"str\" datatype  \nseries_as_array = np.array(original_data_series.values.tolist())  \nprint(series_as_array)  \n# For test:  \nprint(type(series_as_array))  \nprint(type(series_as_array[2]))\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-10","title":"Aufgabe 10","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries_of_lists = Series(  \n    [  \n    [\"Red\", \"Green\", \"White\"], [\"Red\", \"Black\"], [\"Yellow\"]  \n    ]  \n)  \nprint(series_of_lists)  \n# Extract each element to a list  \nlist_of_elemnts = []  \nfor list in series_of_lists:  \n    list_of_elemnts.extend(list)  \n\nprint(\"-----\")  \nprint(list_of_elemnts)  \n# Convert list to Series  \nfinal_series = Series(list_of_elemnts)  \nprint(final_series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-11","title":"Aufgabe 11","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([\"100\", \"200\", \"python\", \"300.12\", \"400\"])  \nprint(series)  \nseries_sorted = series.sort_values()  \nprint(series_sorted)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-12","title":"Aufgabe 12","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([\"100\", \"200\", \"python\", \"300.12\", \"400\"])  \nprint(series)  \nseries_added = pd.concat([series, Series([\"500\", \"php\"])], ignore_index=True)  \nprint(series_added)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-13","title":"Aufgabe 13","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  \nseries_condition = series &lt;= 5  \nprint(series_condition)  \nseries_filtered = series[series_condition]  \nprint(series_filtered)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#14-aufgabe_1","title":"14. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([1, 2, 3, 4, 5], index=[\"A\", \"B\", \"C\", \"D\", \"E\"])  \nseries.sort_index(ascending=False, inplace=True)  \nprint(series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#15-aufgabe_1","title":"15. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 3])  \nprint(f\"The mean is: {series.mean()}\")  \nprint(f\"The standart deviation is: {series.std()}\")\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#16-aufgabe_1","title":"16. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries_1 = Series([1, 2, 3, 4, 5])  \nseries_2 = Series([2, 4, 6, 8, 10])  \nprint(\"Items of series_1 not present in series_2:\")  \nfilter_values = series_1.isin(series_2)  \n# Change True to False and False to True  \nfiltered_values = ~filter_values  \nprint(series_1[filtered_values])\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#17-aufgabe_1","title":"17. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\ns_1 = Series([1, 2, 3, 4, 5])  \ns_2 = Series([2, 4, 6, 8, 10])  \n\ns1_not_in_s2 = ~s_1.isin(s_2)  \nbool_1 = s1_not_in_s2  \ns2_not_in_s1 = ~s_2.isin(s_1)  \nbool_2 = s2_not_in_s1  \n\nfiltered = pd.concat([s_1[bool_1], s_2[bool_2]])  \nprint(filtered)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#18-aufgabe_1","title":"18. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \nimport numpy as np  \n# Generate array with float numbers between 1 and 20, 20 times  \nrandom_numbs = np.random.uniform(1, 20, 20)  \ngiven_series = Series(random_numbs)  \nmin_given_series = given_series.min()  \nmax_given_series = given_series.max()  \nprecentile_25 = given_series.quantile(q=0.25)  \nmedian = given_series.quantile(q=0.5)  \nprecentile_75 = given_series.quantile(q=0.75)  \nprint(f\"max value: {max_given_series}\\nmin value: {min_given_series}\\n25th percentile: {precentile_25}\\n75th percentile: {precentile_75}\")\n</code></pre>"},{"location":"content/project/solution_wordle/","title":"Palindrom Checker L\u00f6sung","text":"<pre><code>def is_palindrome(word):\n    length = len(word)\n    for i in range(length // 2):\n        if word[i] != word[length - 1 - i]:\n            return False\n    return True\n\nuser_input = input(\"Gib ein Wort ein, um zu \u00fcberpr\u00fcfen, ob es ein Palindrom ist: \").lower()\n\nif is_palindrome(user_input):\n    print(f\"{user_input} ist ein Palindrom.\")\nelse:\n    print(f\"{user_input} ist kein Palindrom.\")\n</code></pre>"},{"location":"content/project/solution_wordle/#password-checker-losung","title":"Password Checker L\u00f6sung","text":"<pre><code>&lt;pre&gt;&lt;code&gt;\ndef validate_password(password):\n    # \u00dcberpr\u00fcfung der Mindestl\u00e4nge\n    if len(password) &lt; 8:\n        return False\n\n    has_alpha = False\n    has_digit = False\n    has_special = False\n    special_characters = \"!@#$%^&amp;*()-_=+[]{};:'\\\",.&lt;&gt;/?\\\\|\"\n\n    for char in password:\n        if char.isalpha():\n            has_alpha = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_characters:\n            has_special = True\n\n        # Early Return, falls alle Bedingungen erf\u00fcllt\n        if has_alpha and has_digit and has_special:\n            return True\n\n    # Check, ob alle Bedingungen erf\u00fcllt\n    return has_alpha and has_digit and has_special\n\nuser_password = input(\"Gib dein Passwort zur \u00dcberpr\u00fcfung ein: \")\nif validate_password(user_password):\n    print(\"Das Passwort ist stark.\")\nelse:\n    print(\"Das Passwort erf\u00fcllt nicht die Anforderungen f\u00fcr St\u00e4rke.\")\n</code></pre>"},{"location":"content/project/solution_wordle/#password-generator-losung","title":"Password Generator L\u00f6sung","text":"<pre><code>import random\nimport string\n\ndef generate_password(length):\n    if length &lt; 4:\n        print(\"F\u00fcr ein sicheres Passwort sollte die L\u00e4nge mindestens 4 Zeichen betragen.\")\n        return \"\"\n\n    # Zeichenkategorien\n    lowercase_letters = string.ascii_lowercase\n    uppercase_letters = string.ascii_uppercase\n    digits = string.digits\n    special_characters = \"!@#$%^&amp;*()\"\n\n    # Sicherstellen, dass das Passwort mindestens je ein Zeichen aus jeder Kategorie enth\u00e4lt\n    password = [\n        random.choice(lowercase_letters),\n        random.choice(uppercase_letters),\n        random.choice(digits),\n        random.choice(special_characters)\n    ]\n\n    # F\u00fcllen des Rests des Passworts mit zuf\u00e4lligen Zeichen aus allen Kategorien\n    all_characters = lowercase_letters + uppercase_letters + digits + special_characters\n    password += [random.choice(all_characters) for _ in range(length - 4)]\n\n    # Mischen der Passwortzeichen f\u00fcr zus\u00e4tzliche Sicherheit\n    random.shuffle(password)\n\n    # Konvertieren der Passwortliste in einen String\n    return ''.join(password)\n\ndef main():\n    try:\n        length = int(input(\"Gib die gew\u00fcnschte Passwortl\u00e4nge ein: \"))\n        if length &lt;= 0:\n            print(\"Bitte gib eine positive ganze Zahl ein.\")\n        else:\n            password = generate_password(length)\n            if password:\n                print(f\"Dein neues Passwort: {password}\")\n    except ValueError:\n        print(\"Bitte gib eine g\u00fcltige Zahl ein.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"content/project/solution_wordle/#viraler-wordle-klon-losung","title":"Viraler Wordle Klon L\u00f6sung","text":"<pre><code>import random\n\ndef get_guess():\n    guess = input(\"Rate das Wort (5 Buchstaben): \").lower()\n    while len(guess) != 5 or not guess.isalpha():\n        print(\"Ung\u00fcltige Eingabe. Bitte gib ein Wort mit 5 Buchstaben ein.\")\n        guess = input(\"Rate das Wort (5 Buchstaben): \").lower()\n    return guess\n\ndef generate_feedback(secret_word, guess):\n    feedback = []\n    for i in range(5):\n        # Buchstabe korrekt und an der richtigen Position\n        if guess[i] == secret_word[i]:\n            feedback.append('\ud83d\udfe9')  \n        elif guess[i] in secret_word:\n            feedback.append('\ud83d\udfe8')  # Buchstabe korrekt, aber an der falschen Position\n        else:\n            feedback.append('\u2b1b')  # Buchstabe nicht im Wort enthalten\n    return ''.join(feedback)\n\ndef wordle():\n    word_list = ['apfel', 'birne', 'kerne', 'block', 'traum', 'schaf']\n    secret_word = random.choice(word_list)\n    attempts = 6\n\n    print(\"Willkommen beim Wordle-Clone! Du hast 6 Versuche, das Wort zu erraten.\")\n\n    while attempts &gt; 0:\n        guess = get_guess()\n        feedback = generate_feedback(secret_word, guess)\n        attempts -= 1\n\n        print(' '.join(list(guess)))\n        print(feedback)\n        print()\n\n        if guess == secret_word:\n            print(f\"Du hast das Wort in {6 - attempts} Versuchen erraten!\")\n            break\n\n        if attempts == 0:\n            print(f\"Leider verloren. Das Wort war: {secret_word}\")\n        else:\n            print(f\"Versuche \u00fcbrig: {attempts}\")\n\nwordle()\n</code></pre>"},{"location":"content/project/tic_tac_toe/","title":"Projekt: Tic Tac Toe","text":"Video <p>In diesem Abschnitt werden wir unser bisheriges K\u00f6nnen in einem kleinen Projekt zusammenstellen. Wir wollen das Spiel <code>TicTacToe</code> implementieren.</p> <p>(Vereinfachte) Spielregeln:</p> <ul> <li>Es wird ein quadratisches Spielfeld aus 3x3 (also 9) Feldern gezeichnet.</li> <li>Der Erste Spieler tr\u00e4gt ein <code>x</code> in eines der Felder ein.</li> <li>Danach tr\u00e4gt der zweite Spiler ein <code>o</code> in eines der Felder ein.</li> <li>Dies wird abwechselnd so lange durchf\u00fchrt, bis ein drei in einer Zeile, Spalte oder Diagonalen dreimal das gleiche Symbol auftaucht. Der Spieler, der dieses Symbol zeichnet, gewinnt.</li> </ul> <p>Das ganze soll nachher so aussehen:</p> <pre><code> 0 | 1 | 2 \n 3 | 4 | 5\n 6 | 7 | 8\nSpieler x, wo willst du setzen? 0\n x | 1 | 2 \n 3 | 4 | 5\n 6 | 7 | 8\nSpieler o, wo willst du setzen? 1\n x | o | 2 \n 3 | 4 | 5\n 6 | 7 | 8\nSpieler x, wo willst du setzen? 4\n x | o | 2 \n 3 | x | 5\n 6 | 7 | 8\nSpieler o, wo willst du setzen? 2\n x | o | o \n 3 | x | 5\n 6 | 7 | 8\nSpieler x, wo willst du setzen? 8\n x | o | o \n 3 | x | 5\n 6 | 7 | x\nHerzlichen Gl\u00fcckwunsch!\n</code></pre> <p>Wir haben bereits etwas Code vorgegeben. Dieser hat einige L\u00fccken, die wir f\u00fcllen m\u00fcssen.</p> <pre><code>def gameloop(): # (1)!\n    spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8] # (14)!\n\n    aktiver_spieler = 'x' # (2)!\n    n\u00e4chster_spieler = 'o' # (3)!\n\n    while not es_gibt_gewinner(spielbrett): # (4)!\n        print(als_quadrat(spielbrett)) # (5)!\n\n        position = int(input(f\"Spieler {aktiver_spieler}, wo willst du setzen? \")) # (6)!\n\n        symbol_schreiben(spielbrett, position, aktiver_spieler) # (7)!\n\n        # Wechsle Spieler\n        ... # (8)!\n\n    print(als_quadrat(spielbrett)) # (9)!\n    print(f\"Herzlichen Gl\u00fcckwunsch!\") \n\n\ndef als_quadrat(spielbrett): # (10)!\n    return ...\n\ndef es_gibt_gewinner(spielbrett): # (11)!\n    return ...\n\ndef symbol_schreiben(spielbrett, position, symbol): # (12)!\n    ...\n\nif __name__ == '__main__': # (13)!\n    gameloop()\n</code></pre> <ol> <li>In der Funktion <code>gameloop</code> wird das gesamte Spiel durchgef\u00fchrt.</li> <li>In <code>aktiver_spieler</code> ist das Symbol des momentan aktiven Spielers gespeichert.</li> <li>In <code>n\u00e4chster_spieler</code> ist das Symbol gespeichert, dass der n\u00e4chste Spieler nutzt.</li> <li>In der Funktion <code>es_gibt_gewinner()</code> soll gepr\u00fcft werden, ob es schon einen Gewinner gibt. Wenn nein, so durchlaufen wir den Schleifenrumpf.</li> <li>Zun\u00e4chst geben wir das Spielfeld als sch\u00f6nes Quadrat (mithilfe der Methode <code>als_quadrat</code>) auf der Konsole aus. An den Zahlen erkennt der Spieler, welche Felder noch frei sind und was er in der Konsole eingeben muss, um in das richtige Feld zu setzen.</li> <li>Der Nutzer erh\u00e4lt die Aufforderung eine Zahl einzugeben, in welches das aktuelle Spielersymbol eingetragen wird. </li> <li>Auf dem Spielbrett wird nun an der vom Spieler gew\u00fcnschten Position das Zeichen gesetzt.</li> <li>Hier m\u00fcssen <code>aktiver_spieler</code> und <code>n\u00e4chster_spieler</code> wechseln.</li> <li>Wenn ein Gewinner gefunden wurde, wird die Schleife nicht l\u00e4nger durchlaufen und eine Gratulation wird angezeigt.</li> <li>Diese Funktion baut aus der Liste <code>[0, 1, ..., 8]</code> einen String mit Zeilenumbr\u00fcchen.</li> <li>Diese Funktion untersucht, ob es bereits einen Gewinner beim Tic Tac Toe spiel gibt. </li> <li>Diese Funktion erm\u00f6glicht ein in einer Liste (dem <code>spielbrett</code>) ein vorgegebenen <code>symbol</code> an einer bestimmten <code>position</code> zu setzen.</li> <li>Diese beiden Codezeilen sorgen daf\u00fcr, dass bei Ausf\u00fchrung der Datei das Programm gestartet wird.</li> <li>Das Spielbrett ist aus sicht des Computers eine Liste mit neun Elementen. Mithilfe der Methode <code>als_quadrat</code>, werden wir dieses Spielbrett sp\u00e4ter auf der Konsole als ein sch\u00f6nes Quadrat ausgeben. Um das Spielfeld beim Programmieren einfacher zu handhaben, ist es hier aber gut, es als eine einfache Liste zu speichern.</li> </ol>"},{"location":"content/project/wordle/","title":"Wordle","text":"<p>Ziel des Tages ist es, einen Klon von Wordle zu implementieren. Hierbei sollen pro Projektschritt folgende Schritte durchgef\u00fchrt werden:</p>"},{"location":"content/project/wordle/#tagesprojekt-viraler-wordle-klon","title":"Tagesprojekt - Viraler Wordle Klon","text":"<p>Wordle Spiel </p>"},{"location":"content/project/wordle/#benotigte-konzepte","title":"Ben\u00f6tigte Konzepte","text":"<ul> <li>Input und Output</li> <li>Verzweigungen</li> <li>Schleifen</li> <li>Funktionen</li> </ul>"},{"location":"content/project/wordle/#palindrome-prufen-mit-indices","title":"Palindrome pr\u00fcfen mit Indices","text":"<p>Schreibe ein Python-Programm, das \u00fcberpr\u00fcft, ob ein gegebenes Wort ein Palindrom ist oder nicht.</p> <p>Ein Palindrom ist ein Wort,  das r\u00fcckw\u00e4rts gelesen genauso wie vorw\u00e4rts gelesen wird  (z.B. \"anna\", \"otto\", \"madam\"). </p>"},{"location":"content/project/wordle/#anforderung","title":"Anforderung","text":"<ul> <li>Nutze for-Loops und Indizes</li> <li>Verwende dabei keine vorgefertigten Funktionen wie reversed() oder Slicing (<code>[::-1]</code>)</li> </ul>"},{"location":"content/project/wordle/#password-checker","title":"Password Checker","text":"<p>Entwickle eine Funktion zur \u00dcberpr\u00fcfung der St\u00e4rke eines Passworts. Nutze dabei  <code>.isalpha()</code>, <code>.isdigit()</code>, und die \u00dcberpr\u00fcfung auf Sonderzeichen.</p>"},{"location":"content/project/wordle/#anforderungen","title":"Anforderungen","text":"<ul> <li>mindestens 8 Zeichen lang</li> <li>mindestens einen Buchstaben</li> <li>mindestens eine Zahl</li> <li>mindestens ein Sonderzeichen aus einer vordefinierten Liste von Sonderzeichen (!@#$%^&amp;*()-_=+[]{};:'\",.&lt;&gt;/?|)</li> </ul>"},{"location":"content/project/wordle/#password-generator","title":"Password Generator","text":"<p>Entwickle ein Python-Programm, das zuf\u00e4llige Passw\u00f6rter einer gegebenen L\u00e4nge generiert. </p> <p>Das Passwort soll eine Kombination aus Gro\u00dfbuchstaben, Kleinbuchstaben, Zahlen und Sonderzeichen sein. </p>"},{"location":"content/project/wordle/#anforderungen_1","title":"Anforderungen","text":"<ul> <li>L\u00e4nge des Passworts muss eine positive ganze Zahl sein</li> <li>Generiere ein zuf\u00e4lliges Passwort, das Gro\u00dfbuchstaben, Kleinbuchstaben, Zahlen und Sonderzeichen enth\u00e4lt</li> </ul>"},{"location":"content/project/wordle/#viraler-wordle-klon","title":"Viraler Wordle Klon","text":"<p> Entwickle ein Konsolenbasiertes Spiel das dem popul\u00e4ren Spiel Wordle nachempfunden ist. Bei diesem Spiel soll der Spieler ein geheimes f\u00fcnfbuchstabiges Wort erraten, indem er wiederholt W\u00f6rter derselben L\u00e4nge r\u00e4t. Nach jedem Rateversuch erh\u00e4lt der Spieler Feedback in Form von farbigen Hinweisen, die anzeigen, welche Buchstaben korrekt sind und ob sie sich an der richtigen Position befinden.</p>"},{"location":"content/project/wordle/#anforderungen_2","title":"Anforderungen","text":"<ul> <li>Das Spiel w\u00e4hlt zuf\u00e4llig ein Wort aus einer Liste g\u00fcltiger f\u00fcnfbuchstabiger W\u00f6rter.</li> <li>Der Spieler darf bis zu sechs Mal raten. Jeder Rateversuch muss ein g\u00fcltiges f\u00fcnfbuchstabiges Wort sein.</li> <li>Nach jedem Rateversuch gibt das Spiel Feedback f\u00fcr jeden Buchstaben des geratenen Wortes:<ul> <li>Ein gr\u00fcner Hinweis (\ud83d\udfe9) bedeutet, dass der Buchstabe im geheimen Wort enthalten ist und an der richtigen Stelle steht.</li> <li>Ein gelber Hinweis (\ud83d\udfe8) zeigt an, dass der Buchstabe im geheimen Wort enthalten ist, aber an einer anderen Stelle steht.</li> <li>Ein grauer Hinweis (\u2b1b) bedeutet, dass der Buchstabe nicht im geheimen Wort vorkommt.</li> </ul> </li> </ul>"},{"location":"content/project/wordle/#erweiterungen","title":"Erweiterungen","text":"<ul> <li>Pon de Replay, erm\u00f6gliche dem Spieler ein neues Wort zu ziehen, ohne das Programm neu starten zu m\u00fcsssen. Speichere die bereits gespielten W\u00f6rter in einer der uns bekannten Datenstrukturen (Liste, Dict, etc.) und zeige sie nach beenden einer Runde an.</li> <li>F\u00fcge ein Hinweis-system hinzu, mit dem z.B. ein einzelner Buchstabe oder die Anzahl der Vokale im Wort gezeigt wird.</li> <li>Erlaube den Spielern, die L\u00e4nge des zu erratenden Wortes vor Spielbeginn zu w\u00e4hlen (leicht - 5, mittel - 6, schwer - 7).</li> </ul>"},{"location":"content/python_grundlagen/python_grundlagen/","title":"Einf\u00fchrung","text":""},{"location":"content/python_grundlagen/python_grundlagen/#was-ist-programmierung","title":"Was ist Programmierung?","text":"<p>Programmierung ist f\u00fcr uns der Prozess der Erstellung von Anweisungen, die von einem Computer ausgef\u00fchrt werden, um bestimmte Aufgaben zu erf\u00fcllen oder Probleme zu l\u00f6sen.</p> <p>Diese Anweisungen werden als Code bezeichnet und in einer Programmiersprache geschrieben.</p> <p>Programmierung erm\u00f6glicht es uns, Softwareanwendungen, Websites, mobile Apps und andere digitale Tools zu entwickeln.</p> <p>Im professionellen Umfeld steht die Wertsch\u00f6pfung durch Software-Entwicklung an erster Stelle. Mit Programmierung werden Probleme gel\u00f6st, die ein Unternehmen oder dessen Kunden haben.</p>"},{"location":"content/python_grundlagen/python_grundlagen/#kernaspekte-der-programmierung","title":"Kernaspekte der Programmierung","text":"<ul> <li> <p>Algorithmisches Denken: Programmierung basiert auf der Entwicklung von Algorithmen \u2013    Schritt-f\u00fcr-Schritt-Anweisungen zur L\u00f6sung eines Problems oder zur Durchf\u00fchrung einer Aufgabe.</p> </li> <li> <p>Code-Schreiben: Das Schreiben von Code ist nur ein kleiner Teil der Programmierung. Hierbei wird ein Algorithmus    in eine Sprache \u00fcbersetzt, die der Computer verstehen und ausf\u00fchren kann. F\u00fcr uns wird dies Python sein.</p> </li> <li> <p>Fehlerbehebung (Debugging): Kein Code ist perfekt. Programmierer verbringen viel Zeit damit, Fehler zu finden und    zu beheben, um sicherzustellen, dass ihr Code wie beabsichtigt funktioniert.</p> </li> <li> <p>Datenmanipulation: Programme werden oft entwickelt, um Daten zu sammeln, zu verarbeiten und auszugeben. Das    Verst\u00e4ndnis der Datenverarbeitung ist daher ein wesentlicher Aspekt der Programmierung.</p> </li> <li> <p>Benutzerinteraktion: Viele Programme erfordern Interaktionen mit Benutzern. Das Design dieser Interaktionen ist    ein wichtiger Teil der Entwicklung einer benutzerfreundlichen Software.</p> </li> </ul>"},{"location":"content/python_grundlagen/python_grundlagen/#die-rolle-von-python-in-der-programmierung","title":"Die Rolle von Python in der Programmierung","text":"<p>Python ist eine weit verbreitete und vielseitige Programmiersprache, die sich durch ihre klare Syntax und Lesbarkeit auszeichnet.</p> <p>Hier sehen wir einige Gr\u00fcnde, warum Python in der Welt der Programmierung eine wichtige Rolle spielt:</p> <ol> <li> <p>Vielseitigkeit: Python wird in vielen Bereichen verwendet, von Web-Entwicklung \u00fcber Datenanalyse und maschinelles    Lernen bis hin zur Automatisierung.</p> </li> <li> <p>Gro\u00dfe Community: Python hat eine gro\u00dfe und aktive Community, die eine F\u00fclle von Ressourcen, Bibliotheken und    Frameworks bietet, die die Entwicklung von Anwendungen erleichtern.</p> </li> <li> <p>Plattformunabh\u00e4ngigkeit: Python-Programme k\u00f6nnen auf verschiedenen Betriebssystemen ohne \u00c4nderung des Codes    ausgef\u00fchrt werden.</p> </li> <li> <p>Wissenschaft und Forschung: Python ist aufgrund seiner starken Unterst\u00fctzung in wissenschaftlichen Berechnungen    und Forschungsprojekten eine bevorzugte Sprache in der akademischen Welt.</p> </li> </ol> <p>Zusammenfassend ist Programmierung ein kreativer und logischer Prozess, der es erm\u00f6glicht, L\u00f6sungen f\u00fcr komplexe Probleme zu entwickeln. Python spielt dabei eine Schl\u00fcsselrolle, indem es Zug\u00e4nglichkeit und Flexibilit\u00e4t bietet, die es zu einer der beliebtesten Sprachen in der modernen Programmierung machen.</p>"},{"location":"content/python_grundlagen/python_grundlagen/#programmierumgebungen-und-ides","title":"Programmierumgebungen und IDEs","text":""},{"location":"content/python_grundlagen/python_grundlagen/#was-ist-ein-ide","title":"Was ist ein IDE?","text":"<p>Eine Integrated Development Environment (IDE) ist eine Softwareanwendung, die umfangreiche Werkzeuge f\u00fcr Programmierer bereitstellt, um die Entwicklung von Software zu erleichtern. Ein typisches IDE umfasst einen Code-Editor, Compiler/Interpreter, Debugger und oft weitere hilfreiche Werkzeuge.</p> <p>Das Hauptziel einer IDE ist die Vereinfachung des Entwicklungsprozesses, sodass wir uns auf die eigenltichen Kernaufgaben konzentrieren k\u00f6nnen.</p>"},{"location":"content/python_grundlagen/python_grundlagen/#beliebte-tools-fur-python","title":"Beliebte Tools f\u00fcr Python","text":""},{"location":"content/python_grundlagen/python_grundlagen/#1-visual-studio-code-vscode","title":"1. Visual Studio Code (VSCode)","text":"<p>Visual Studio Code, entwickelt von Microsoft, ist ein kostenloser, leistungsf\u00e4higer und leichtgewichtiger Code-Editor. Er ist erweiterbar und anpassbar, was ihn zu einer beliebten Wahl f\u00fcr viele Programmiersprachen, einschlie\u00dflich Python, macht.</p> <p>Features: - Unterst\u00fctzung f\u00fcr zahlreiche Programmiersprachen und Frameworks. - Integrierter Git-Support (Git dient dazu Versionen eurer Projekte zu erstellen und zu verwalten). - Gro\u00dfe Auswahl an Erweiterungen f\u00fcr erweiterte Funktionen wie Auto-Completion, Code-Linting, Themes und mehr.</p> <p>VSCode kann durch die Python-Erweiterung, die Features wie IntelliSense, Debugging, Jupyter Notebooks und mehr umfasst, effektiv f\u00fcr Python-Entwicklung genutzt werden.</p>"},{"location":"content/python_grundlagen/python_grundlagen/#2-pycharm","title":"2. PyCharm","text":"<p>PyCharm ist eine IDE, die speziell f\u00fcr Python entwickelt wurde und von JetBrains angeboten wird. Sie ist deutlich umfangreicher als VSCode.</p> <p>Features: - Integrierte Tools f\u00fcr professionelle Python-Entwicklung. - Smart Code Navigation, Refactoring-Tools und ein leistungsstarker Debugger. - Integrierter Git-Support - Integration mit g\u00e4ngigen Frameworks und Tools wie Django, Flask, Google App Engine, und mehr.</p> <p>PyCharm bietet eine tiefe Integration mit Python-spezifischen Werkzeugen und eine reichhaltige Entwicklungsumgebung, die besonders f\u00fcr gr\u00f6\u00dfere Projekte n\u00fctzlich ist.</p> <p>Pycharm besitzt eine kostenfreie \"Community Edition\" und eine kostenpflichtige \"Professional Edition\".</p>"},{"location":"content/python_grundlagen/python_grundlagen/#3-jupyter-notebooks","title":"3. Jupyter Notebooks","text":"<p>Jupyter Notebooks bieten eine webbasierte interaktive Entwicklungsumgebung, die es erm\u00f6glicht, Code auszuf\u00fchren, Ergebnisse in Echtzeit zu sehen und gleichzeitig Erkl\u00e4rungen, Formeln und Visualisierungen einzubinden. Es wird besonders gern in der Datenanalyse, wissenschaftlichen Forschung und Lehre.</p> <p>Features: - Dokumente sind \u00fcber das .ipynb in Code und Markdown Bl\u00f6cke unterteilt. - Markdown kann f\u00fcr eine komfortable Dokumentation genutzt werden. - Ausf\u00fchrung der Codebl\u00f6cke arbeitet super mit g\u00e4ngigen Visualisierungsbibliotheken wie matplotlib zusammen.</p> <p>Jupyter Notebooks sind ideal f\u00fcr exploratives Programmieren und die Visualisierung von Daten. Sie unterst\u00fctzen eine Mischung aus Code, Text, Bildern und Diagrammen.</p> <p>Sowohl VSCode als auch PyCharm bieten die M\u00f6glichkeit direkt mit .ipynb Dateien zu arbeiten und haben damit ein \u00e4hnliches Nutzererlebnis. Statt PyCharm w\u00fcrde man aber die Nutzung von DataSpell von Jetbrains empfehlen, da dieses speziell auf dieses Dateiformat ausgelegt ist.  </p>"},{"location":"content/python_grundlagen/python_grundlagen/#4-python-interpreter-als-interaktive-umgebung","title":"4. Python-Interpreter als interaktive Umgebung","text":"<p>Auch den Python-Interpreter selbst kann man als interaktive Programmierumgebung verwenden. Dazu f\u00fchrt man lediglich <code>python</code> im Terminal aus und wird dann mit einem Prompt begr\u00fc\u00dft. </p> <p>Hier lassen sich kleine Dinge sehr einfach ausprobieren, aber es ist nicht empfehlenswert diese zur Programmierung zu  verwenden.</p> Das erste Programm <ol> <li>F\u00fchre den folgenden Code mit der Python-Konsole aus</li> </ol> <pre><code>print(\"Hello Wolfsburg! Das ist mein erstes Programm!\")\n</code></pre>"},{"location":"content/python_grundlagen/python_grundlagen/#zusammenfassung","title":"Zusammenfassung","text":"<p>IDEs sind ein wesentlicher Bestandteil des Werkzeugkastens eines jeden Entwicklers. W\u00e4hrend VSCode und PyCharm umfassende Entwicklungsplattformen bieten, eignen sich Jupyter Notebooks hervorragend f\u00fcr interaktive und explorative Programmierung, insbesondere in der Datenwissenschaft. Die Wahl des richtigen IDE h\u00e4ngt von den spezifischen Anforderungen des Projekts und den pers\u00f6nlichen Vorlieben des Entwicklers ab.</p>"},{"location":"content/try_except/solutions/","title":"L\u00f6sung","text":""},{"location":"content/try_except/solutions/#aufgabe-benutzereingabe-und-integer-konvertierung","title":"Aufgabe: Benutzereingabe und Integer-Konvertierung","text":"<pre><code>a, b = None, None\nwhile not a or not b:\n    try:\n        a = int(input(\"Erste Zahl: \"))\n        b = int(input(\"Zweite Zahl: \"))\n    except ValueError:\n        print(\"Das war keine Zahl. Bitte erneut.\")\nelse:\n    print(f\"Der Durchschnitt ist: {(a + b) / 2}\")\n</code></pre>"},{"location":"content/try_except/solutions/#aufgabe-benutzerdefinierte-ausnahme","title":"Aufgabe: Benutzerdefinierte Ausnahme","text":"<pre><code>class NegativeNumberError(Exception):\n    pass\n\n\nfor number in [1, 2, 0, -2, 3]:\n    if number &lt; 0:\n        raise NegativeNumberError(f\"Zahl {number} ist negativ\")\n    print(f\"Zahl {number}\")\n</code></pre>"},{"location":"content/try_except/solutions/#aufgabe-welche-fehler-kann-man-so-machen","title":"Aufgabe: Welche Fehler kann man so machen?","text":"<p>Baue f\u00fcr die folgenden Fehler ein Beispiel, in dem sie geworfen werden. Hier ist die Liste aller in Python vorimplementierten Exceptions.</p> <p>IndexError</p> <pre><code>my_list = [1,2,3,4]\nmy_list[10]\n</code></pre> <p>OverflowError</p> <pre><code>2.0 ** 10000 \n</code></pre> <p>StopIteration</p> <pre><code>z = zip([1], [1])\nnext(z)\nnext(z)\n</code></pre> <p>ValueError</p> <pre><code>int(\"Hallo\")\n</code></pre> <p>ZeroDivisionsError</p> <pre><code>10 / 0\n</code></pre> <p>KeyboardInterrupt</p> <p>Entsteht z. B. wenn ein laufendes Programm abgebrochen wird, dass auf eine Nutzereingabe wartet:</p> <pre><code>while True:\n    print(input(\"Gib was ein: \"))\n</code></pre>"},{"location":"content/try_except/solutions/#aufgabe-sichere-benutzereingabe","title":"Aufgabe: Sichere Benutzereingabe","text":"<pre><code>def get_number(prompt=\"Gib eine Ganzzahl ein: \"):\n    while True:\n        try:\n            return int(input(prompt))\n        except ValueError:\n            print(\"Das war keine erlaubte Zahl. Erneut bitte:\")\n\n\ndef get_operation(prompt=\"Gebe Operation ein: \"):\n    while True:\n        op = input(prompt)\n        if op in operations.keys():\n            return op\n        print(f\"{op} ist keine der Erlaubten Operationen {operations.keys()} Erneut bitte:\")\n\n\ndef add(a, b):\n    return a + b\n\n\ndef subtract(a, b):\n    return a - b\n\n\ndef multiply(a, b):\n    return a * b\n\n\ndef divide(a, b):\n    return a / b\n\n\n# Wir speichern eine Referenz auf die jeweilige Operation\n# in diesem Dictionary. Wenn wir also eine neue Funktion\n# hinzuf\u00fcgen, m\u00fcssen wir sie hier blo\u00df mit Symbol eintragen\n# und alle anderen wissen bescheid.\noperations = {\n    \"+\": add,\n    \"-\": subtract,\n    \"*\": multiply,\n    \"/\": divide\n}\n\nwhile True:\n    num1 = get_number(\"Gib erste Ganzzahl ein\")\n    num2 = get_number(\"Gib zweite Ganzzahl ein\")\n\n    op_symbol = get_operation()\n    operation = operations.get(op_symbol)\n\n    try:\n        result = operation(num1, num2)\n    except Exception as e:\n        print(f\"Operation nicht m\u00f6glich: {num1} {op_symbol} {num2} \u26a1\")\n        print(e)\n    else:\n        print(f\"{num1} {op_symbol} {num2} = {result}\")\n</code></pre>"},{"location":"content/try_except/solutions/#aufgabe-ubertriebene-rekursion","title":"Aufgabe: \u00dcbertriebene Rekursion","text":"<p>Die Funktions <code>fak</code> ruft sich immer wieder selbst auf (das nennt man eine rekursive Funktion). Der Callstack wird damit immer gr\u00f6\u00dfer, bis dieser irgendwann die maximale Gr\u00f6\u00dfe \u00fcberschreitet. Dann wird ein <code>RekursionError</code> geworfen.</p>"},{"location":"content/try_except/try_except/","title":"Exception Handling in Python","text":"<p>Beim Programmieren in Python ist es wichtig, Ausnahmen ordnungsgem\u00e4\u00df zu behandeln,  um robusten und fehlerresistenten Code zu schreiben. Ausnahmen sind Ereignisse,  die w\u00e4hrend der Ausf\u00fchrung eines Programms auftreten und den normalen Ablauf unterbrechen. </p> <p>Du kannst durch korrektes Handling von Ausnahmen Fehler auf elegante Weise bew\u00e4ltigen und so die Gesamtzuverl\u00e4ssigkeit deines Codes verbessern.</p>"},{"location":"content/try_except/try_except/#grundlagen-des-exception-handlings","title":"Grundlagen des Exception Handlings","text":""},{"location":"content/try_except/try_except/#try-except-block","title":"Try-Except-Block","text":"<p>Die Bl\u00f6cke <code>try</code> und <code>except</code> werden verwendet, um Ausnahmen in Python zu behandeln.  Der <code>try</code>-Block enth\u00e4lt den Code, der eine Ausnahme ausl\u00f6sen k\u00f6nnte,  und der <code>except</code>-Block gibt an, wie die Ausnahme behandelt werden soll.</p> <pre><code>try:\n    # Code, der eine Ausnahme ausl\u00f6sen k\u00f6nnte\n    ergebnis = 10 / 0\nexcept ZeroDivisionError as e:\n    # Behandlung der spezifischen Ausnahme\n    print(f\"Fehler: {e}\")\n\nprint(\"Ich lebe noch und kann weiter machen\")\n</code></pre> <p>Der gleiche Code ohne Exceptionhandling bricht die Durchf\u00fchrung des Programms ab:</p> <pre><code>ergebnis = 10 / 0\n\nprint(\"Das wirst du niemals sehen\")\n</code></pre>"},{"location":"content/try_except/try_except/#mehrere-except-blocke","title":"Mehrere Except-Bl\u00f6cke","text":"<p>Du kannst mehrere <code>except</code>-Bl\u00f6cke verwenden, um verschiedene Arten von Ausnahmen zu behandeln.</p> <pre><code>try:\n    wert = int(input(\"Gib eine Zahl ein: \"))\n    ergebnis = 10 / wert\nexcept ValueError:\n    print(\"Ung\u00fcltige Eingabe. Bitte gib eine g\u00fcltige Zahl ein.\")\nexcept ZeroDivisionError as e:\n    print(f\"Fehler: {e}\")\n</code></pre>"},{"location":"content/try_except/try_except/#finally-block","title":"Finally-Block","text":"<p>Der <code>finally</code>-Block wird unabh\u00e4ngig davon ausgef\u00fchrt, ob eine Ausnahme auftritt oder nicht.  Er wird oft f\u00fcr Aufr\u00e4umarbeiten verwendet.</p> <pre><code>try:\n    ergebnis = 10 / 0\nexcept ZeroDivisionError as e:\n    print(\"Verbotene Operation.\")\nfinally:\n    print(\"\"\"Jetzt k\u00f6nnen aufr\u00e4umarbeiten durchgef\u00fchrt werden,\n     wie das Schlie\u00dfen von Dateien\"\"\")\n</code></pre>"},{"location":"content/try_except/try_except/#eigene-ausnahmen","title":"Eigene Ausnahmen","text":"<p>Du kannst benutzerdefinierte Ausnahmen erstellen, indem du eine neue Klasse definierst, die von der Klasse <code>Exception</code> erbt. Was genau Klassen sind, werden wir noch besprechen, jetzt nehmen wir das erstmal hin. Eine solche Exception kann mit dem Keyword <code>raise</code> geworfen werden. Wenn das innerhalb einer Methode passiert, ist dass so, als ob eine Exceptions als R\u00fcckgabe der Methode</p> <pre><code>class PhoneNumberNotFoundError(Exception):\n    pass\n\n\nphone_numbers = {'J\u00fcrgen': '01234-5678', 'Monika': '+49-156-89345'}\n\n\ndef call_by_phone_number(name):\n    if name not in phone_numbers:\n        raise PhoneNumberNotFoundError(f\"There is no Phonenumber for {name}\")\n\n    print(f'Call {name} by {phone_numbers.get(name)}')\n\n\ntry:\n    n = input('Wen willst du anrufen?')\n    call_by_phone_number(n)\nexcept PhoneNumberNotFoundError as e:\n    print(f\"Etwas ist schief gegangen: {e}\")\n</code></pre>"},{"location":"content/try_except/try_except/#else-block","title":"Else-Block","text":"<p>Der <code>else</code>-Block wird ausgef\u00fchrt, wenn keine Ausnahmen im <code>try</code>-Block ausgel\u00f6st werden.</p> <pre><code>try:\n    wert = int(input(\"Gib eine Zahl ein: \"))\n    ergebnis = 10 / wert\nexcept ValueError:\n    print(\"Ung\u00fcltige Eingabe. Bitte gib eine g\u00fcltige Zahl ein.\")\nexcept ZeroDivisionError as e:\n    print(f\"Fehler: {e}\")\nelse:\n    print(f\"Ergebnis: {ergebnis}\")\n</code></pre>"},{"location":"content/try_except/try_except/#achtung-exception-handling-und-ablaufsteuerung","title":"\u26a0 Achtung: Exception Handling und Ablaufsteuerung","text":"<p>Es ist wichtig zu betonen, dass Exception Handling nicht als Mechanismus zur Ablaufsteuerung  genutzt werden sollte. Ausnahmen sollten nicht f\u00fcr die Kontrolle des normalen  Programmflusses verwendet werden, sondern ausschlie\u00dflich f\u00fcr  die Behandlung von unerwarteten Ereignissen und Fehlerzust\u00e4nden.</p>"},{"location":"content/try_except/try_except/#hierarchien-von-exceptions","title":"Hierarchien von Exceptions","text":"<p>Es muss nicht immer genau der Typ aufgefangen werden, der geworfen wird. Es kanna auch eine Oberklasse genutzt werden. Im folgenden beiden Beispiele fungieren also identisch:</p> <pre><code>try:\n    ergebnis = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"Fehler: {e}\")\n</code></pre> <pre><code>try:\n    ergebnis = 10 / 0\nexcept ArithmeticError as e:\n    print(f\"Fehler: {e}\")\n</code></pre> <pre><code>graph TD;\n    BaseException --&gt; Excptions --&gt; AE[\"ArithmeticError\"]\n    AE --&gt; FloatingPointError\n    AE --&gt; OverflowError\n    AE --&gt; ZeroDivisionError</code></pre> <p>Hier ist die komplete Hierarchie der Exceptions.</p>"},{"location":"content/try_except/try_except/#aufgaben","title":"Aufgaben","text":"Benutzereingabe und Integer-Konvertierung <p>Passe das folgende Programm an, sodass es bei einer fehlerhaften Eingabe nicht mehr zum Absturz kommt, sondern erneut nach einer Eingabe gefragt wird:</p> <pre><code>a = int(input(\"Erste Zahl: \"))\nb = int(input(\"Zweite Zahl: \"))\n\nprint(f\"Der Durchschnitt ist: {(a + b) / 2}\")\n</code></pre> L\u00f6sung <pre><code>a, b = None, None\nwhile not a or not b:\n    try:\n        a = int(input(\"Erste Zahl: \"))\n        b = int(input(\"Zweite Zahl: \"))\n    except ValueError:\n        print(\"Das war keine Zahl. Bitte erneut.\")\nelse:\n    print(f\"Der Durchschnitt ist: {(a + b) / 2}\")\n</code></pre> Benutzerdefinierte Ausnahme <p>Erstelle eine benutzerdefinierte Ausnahme mit dem Namen <code>NegativeZahlFehler</code>. Schreibe eine Funktion, die eine Liste von Zahlen durchl\u00e4uft und wenn eine Zahl negativ ist, einen <code>NegativeZahlFehler</code> wirft.</p> L\u00f6sung <pre><code>class NegativeNumberError(Exception):\n    pass\n\ndef check_positive(numbers):\n    for number in numbers:\n        if number &lt; 0:\n            raise NegativeNumberError(f\"Zahl {number} ist negativ\")\n        print(f\"Zahl {number}\")\n\n# Beispielaufruf\ntry:\n    check_positive([1, 2, 0, -2, 3])\nexcept NegativeNumberError as e:\n    print(e)\n</code></pre> Welche Fehler kann man so machen? <p>Baue f\u00fcr die folgenden Fehler ein Beispiel, in dem sie geworfen werden. Hier ist die Liste aller in Python vorimplementierten Exceptions.</p> <ul> <li>IndexError</li> <li>OverflowError</li> <li>StopIteration</li> <li>ValueError</li> <li>ZeroDivisionsError</li> <li>KeyboardInterrupt</li> </ul> L\u00f6sung <pre><code># IndexError\nmy_list = [1,2,3,4]\ntry:\n    print(my_list[10])\nexcept IndexError as e:\n    print(f\"IndexError: {e}\")\n\n# OverflowError\ntry:\n    print(2.0 ** 10000)\nexcept OverflowError as e:\n    print(f\"OverflowError: {e}\")\n\n# StopIteration\nz = zip([1], [1])\ntry:\n    next(z)\n    next(z)\nexcept StopIteration as e:\n    print(f\"StopIteration: {e}\")\n\n# ValueError\ntry:\n    int(\"Hallo\")\nexcept ValueError as e:\n    print(f\"ValueError: {e}\")\n\n# ZeroDivisionError\ntry:\n    10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"ZeroDivisionError: {e}\")\n\n# KeyboardInterrupt\nprint(\"Dr\u00fccke Strg+C, um eine KeyboardInterrupt auszul\u00f6sen\")\ntry:\n    while True:\n        pass\nexcept KeyboardInterrupt:\n    print(\"KeyboardInterrupt wurde ausgel\u00f6st\")\n</code></pre> Sichere Benutzereingabe <p>Implementiere einen interaktiven Taschenrechner.  Lass den Benutzer nacheinander zwei Zahlen und einen Operator (+, -, *, /) eingeben. Verwende <code>try</code>- und <code>except</code>-Bl\u00f6cke, um m\u00f6gliche <code>ValueError</code>-Ausnahmen und unbekannte Operationen zu behandeln.  Gib das Ergebnis aus.</p> L\u00f6sung <pre><code>def get_number(prompt=\"Gib eine Ganzzahl ein: \"):\n    while True:\n        try:\n            return int(input(prompt))\n        except ValueError:\n            print(\"Das war keine erlaubte Zahl. Erneut bitte:\")\n\ndef get_operation(prompt=\"Gebe Operation ein: \"):\n    operations = {\"+\": add, \"-\": subtract, \"*\": multiply, \"/\": divide}\n    while True:\n        op = input(prompt)\n        if op in operations:\n            return operations[op]\n        print(f\"{op} ist keine der erlaubten Operationen {list(operations.keys())}. Erneut bitte:\")\n\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    return a / b\n\nwhile True:\n    num1 = get_number(\"Gib erste Ganzzahl ein: \")\n    num2 = get_number(\"Gib zweite Ganzzahl ein: \")\n    operation = get_operation()\n\n    try:\n        result = operation(num1, num2)\n    except Exception as e:\n        print(f\"Operation nicht m\u00f6glich: {e}\")\n    else:\n        print(f\"Das Ergebnis ist: {result}\")\n\n    if input(\"M\u00f6chtest du eine weitere Berechnung durchf\u00fchren? (j/n): \").lower() != 'j':\n        break\n</code></pre> \u00dcbertriebene Rekursion <p>Zu welchem Fehler f\u00fchrt der folgende Code und warum?</p> <pre><code>def fak(n):\n    return 1 if n &lt;= 1 else n * fak(n-1)\n\nprint(fak(1000))\n</code></pre> L\u00f6sung <p>Der Code f\u00fchrt zu einem <code>RecursionError</code>. </p> <p>Erkl\u00e4rung: Die Funktion <code>fak</code> ruft sich immer wieder selbst auf (das nennt man eine rekursive Funktion). Der Callstack wird damit immer gr\u00f6\u00dfer, bis dieser irgendwann die maximale Gr\u00f6\u00dfe \u00fcberschreitet. Dann wird ein <code>RecursionError</code> geworfen.</p> <p>Um dies zu demonstrieren und abzufangen, k\u00f6nnen wir den Code wie folgt anpassen:</p> <pre><code>def fak(n):\n    return 1 if n &lt;= 1 else n * fak(n-1)\n\ntry:\n    print(fak(1000))\nexcept RecursionError as e:\n    print(f\"RecursionError aufgetreten: {e}\")\n    print(\"Die Rekursionstiefe war zu gro\u00df f\u00fcr diese Berechnung.\")\n</code></pre> <p>Eine bessere Implementierung f\u00fcr gro\u00dfe Zahlen w\u00e4re eine iterative L\u00f6sung oder die Verwendung des <code>math.factorial()</code> Moduls.</p>"},{"location":"content/unit_tests/unit_tests/","title":"Unit Tests","text":"<p>Code ist ein lebendiges Produkt. Das hei\u00dft, einmal geschrieben, bleibt eine Codebasis nie so wie sie ist.  Fehler m\u00fcssen korrigiert oder neue Features hinzugef\u00fcgt werden, die Anwendungsfreundlichkeit soll gesteigert werden oder die Laufzeit durch kl\u00fcgere Algorithmen verbessert werden. Es gibt viele Gr\u00fcnde, warum sich Code des selben Programms im Laufe der Zeit \u00e4ndert, aber wie stellt man sicher, dass bei \u00c4nderungen (gro\u00df oder klein) alles weiterhin funktioniert?</p> <p>Eine Antwort auf diese Frage sind Unittests. Diese werden von den Programmierern parallel (oder vor) dem  eigentlich Code geschrieben und werden Zuk\u00fcnftig immer ausgef\u00fchrt, wenn es eine \u00c4nderung im Code gibt. Diese Unittests \u00fcberpr\u00fcfen dann n\u00e4mlich, ob die einzelnen Bausteine meines Codes (die \"Units\"/Einheiten) immernoch funktionieren, oder ob irgendetwas durch die \u00c4nderungen gest\u00f6rt wurde.</p> <p>In einer Metapher gesprochen. Ein Restaurantbesitzer m\u00f6chte die K\u00fcche renovieren. Er l\u00e4sst von den K\u00f6chen eine lange Liste von Tests erstellen. Z.B. Es gibt Kochl\u00f6ffel; die Herdplatte platte wird hei\u00df, wenn man  daran dreht; der Eisschrank kann eine Temperatur von -17 \u00b0C halten usw. Alle diese Tests funktionieren bisher und das m\u00fcssen sie auch, wenn die neue K\u00fcche eingebaut ist. In der neuen K\u00fcche kommen noch neue Ger\u00e4te hinzu und auch f\u00fcr diese w\u00fcrde man weitere Tests der Liste hinzuf\u00fcgen, um alles f\u00fcr die Zukunft zu sichern.</p> Video <p> </p> <p>Betrachten wird das folgende Beispiel, in dem die Korrektheit der <code>quadrat</code> Funktion getestet wird. Wir sehen hier vier Tests, die pr\u00fcfen, ob </p> <ul> <li><code>quadrat(5) == 25</code>,</li> <li><code>quadrat(0) == 0</code>,</li> <li><code>quadrat(1) == 1</code> und</li> <li><code>quadrat(-5) == 25</code> gelten.</li> </ul> <pre><code>import unittest # (1)!\n\ndef quadrat(zahl): # (2)!\n    return zahl * zahl\n\n\nclass TestQuadrat(unittest.TestCase): # (3)!\n    def test_quadrat_0(self): # (4)!\n        self.assertEqual(quadrat(5), 25) # (5)!\n\n    def test_quadrat_1(self): # (6)!\n        self.assertEqual(quadrat(0), 0)\n\n    def test_quadrat_2(self):\n        self.assertEqual(quadrat(1), 1)\n\n    def test_quadrat_3(self):\n        self.assertEqual(quadrat(-5), 25)\n\nif __name__ == '__main__': # (7)!\n    unittest.main()\n</code></pre> <ol> <li>Wir importieren hier das Modul <code>unittest</code>. Das ist ein Ordner mit Pythoncode, den wir nun verwenden k\u00f6nnen. In diesem sind die Unittests implementiert und wir k\u00f6nnen diese jetzt in unserem Code definieren und ausf\u00fchren.</li> <li>Hier wird die Funktion definiert, die wir testen wollen.</li> <li>Hier wird eine Klasse namens <code>TestQuadrat</code> definiert, welche von <code>unittest.TestCase</code> erbt. Kurz gesagt bedeutet dass, dass wir im nun folgenden einger\u00fcckten Code Methoden definieren k\u00f6nnen, die unsere Unittests sind.</li> <li>Hier wird ein Unittest definiert. Das sieht so \u00e4hnlich aus, wie das Definieren einer Funktion. In die runden Klammern geh\u00f6rt immer der Parameter <code>self</code>, \u00fcber den wir die Art des Tests festlegen werden.Die genaue Bedeutung von <code>self</code> wird erst bei der objektorientierten Programmierung wichtig und kann jetzt erstmal von uns hingenommen werden.</li> <li>Mit <code>self.assertEqual( ... , ... )</code> wird gesagt, dass wir im Test sicherstellen (assert), dass zwei Werte gleich sind. Hier wollen wir wir sicherstellen, dass das Ergebnis von <code>quadrat(5)</code> gleich <code>25</code> ist. </li> <li>Wir definieren hier noch weitere Tests. Wichtig ist, dass deren Namen mit <code>test_</code> beginnen.</li> <li>In diesen zwei Zeilen sorgen wir daf\u00fcr, dass die Tests beim Ausf\u00fchren der Datei gefunden und ausgef\u00fchrt werden. Mehr m\u00fcssen wir hier zu diesem Zeitpunkt nicht verstehen.</li> </ol> <p>Wenn wir dieses Programm ausf\u00fchren erhalten wir die folgende Konsolenausgabe, die uns zeigt,  dass alle Tests erfolgreich waren:</p> <pre><code>Ran 4 tests in 0.012s\n\nOK\n\nProcess finished with exit code 0\n</code></pre> Fehlschlagende Tests <p>F\u00fchren Sie den Code aus dem letzten Beispiel in ihrer IDE aus und versichern Sie sich, dass alle Tests funktionieren.</p> <p>\u00c4ndern Sie dann den Code, indem Sie z.B. den Rumpf der Methode <code>quadrat</code> anpassen, sodass die Tests nicht mehr  funktionieren.</p> Preisberechnung aktualisieren <p>J\u00fcrgen nutzt den folgenden Code, um den Eintritt in seinen Eisenbahnpark zu berechnen:</p> <pre><code>def berechne_preis(alter, mitglied):\n    if mitglied:\n        return 0\n    if alter &lt; 4:\n        return 0\n    if alter &gt; 60:\n        return 0\n    return 2    \n</code></pre> <p>J\u00fcrgen hat auch Tests geschrieben, um sicherzustellen, dass Sein Code funktioniert:</p> <pre><code>import unittest  \n\nclass TestPreise(unittest.TestCase):\n    def test_berechne_preis_mitglied(self):\n        self.assertEqual(berechne_preis(20, True), 0)\n\n    def test_berechne_preis_kinder(self):\n        self.assertEqual(berechne_preis(2, False), 0)\n\n    def test_berechne_preis_retner(self):\n        self.assertEqual(berechne_preis(70, False), 0)\n\n    def test_berechne_preis_normal(self):\n        self.assertEqual(berechne_preis(20, False), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Alle seine Tests funktionieren.</p> <p>J\u00fcrgen hat nun kennengelernt, wie man Bedingungen mit <code>or</code>, <code>and</code> und <code>not</code> miteinander verkn\u00fcpft und  m\u00f6chte nun seine Funktion etwas schlanker neu Programmieren.</p> <p>Passe die Funktion von J\u00fcrgen an und achte dabei darauf, dass die Tests immernoch funktionieren!</p> Tipp <p>Der folgende Code</p> <pre><code>if bedingung1:\n    return x\nif bedingung2:\n    return x\n</code></pre> <p>kann so zusammengefasst werden:</p> <pre><code>if bedingung1 or bedingung2:\n    return x\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def berechne_preis(alter, mitglied):\n    if mitglied or alter &lt; 4 or alter &gt; 60:\n        return 0\n    return 2    \n</code></pre> Drei Gleich <p>Wir wollen eine Funktion entwickeln, pr\u00fcft, ob in einer Liste die Elemente an dre Positionen gleich sind. Der Methodenkopf sieht wie folgt aus:</p> <pre><code>def drei_gleich(liste, pos0, pos1, pos2):\n    return ...\n</code></pre> <p>Hier haben wir schon einige Tests vorbereitet:</p> <pre><code>import unittest  \n\nclass TestDreiGleich(unittest.TestCase):\n    def test_drei_gleich_0(self):\n        self.assertEqual(drei_gleich([1, 1, 1], 0, 1, 2), True)\n\n    def test_drei_gleich_1(self):\n        self.assertEqual(drei_gleich([1, 2, 1, 3, 1], 0, 2, 4), True)\n\n    def test_drei_gleich_2(self):\n        self.assertEqual(drei_gleich([1, 2, 1, 3, 1], 0, 1, 2), False)\n\n    def test_drei_gleich_3(self):\n        self.assertEqual(drei_gleich([1, 1, 2], 0, 1, 2), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Implementieren Sie die Funktion, sodass alle Tests gr\u00fcn werden.</p> Tipp <ul> <li>Mit der Notation <code>my_list[pos]</code> kann in einer Liste auf das Element an der Stelle <code>pos</code> zugegriffen werden.</li> <li>Mit <code>a == b</code> kann man \u00fcberpr\u00fcfen, ob zwei Elemente gleich sind.</li> <li>Mit <code>a == b == c</code> kann man pr\u00fcfen, ob drei Elemente gleich sind.</li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def drei_gleich(liste, pos0, pos1, pos2):\n    return liste[pos0] == liste[pos1] == liste[pos2]\n</code></pre>"},{"location":"content/variables/datentypen/","title":"Datentypen","text":"Video <p>Die Daten, die in einer Variable gespeichert sind, haben einen Typ. In Python ist dies wichtig, um zu wissen, was man mit den Daten, eigentlich tun kann. Zahlen zum Beispiel kann man multiplizieren und addieren. Zeichenketten kann man  miteinander zu l\u00e4ngeren Zeichenketten verbinden (1).</p> <ol> <li>Der Fachbegriff f\u00fcr das Verkn\u00fcpfen zweier Zeichenketten zu einem gr\u00f6\u00dferen hei\u00dft \"konkatinieren\".</li> </ol> <p>In Python gibt es eine vielzahl an Datentypen, welche wir beispielsweise hier nachlesen k\u00f6nnen. Wir beschr\u00e4nken uns hier im Skript auf einige der wichtigsten:</p> Datentyp Englisch Deutsch Beispiele <code>int</code> Integer Ganzzahlen <code>0</code>, <code>1</code>, <code>-1</code>, <code>12353</code>, ... <code>float</code> Float Flie\u00dfkommazahlen <code>1.23</code>, <code>0.0001</code>, <code>1234.5</code>, <code>0.0</code>, ... <code>str</code> String Zeichenketten <code>'Hallo'</code>, <code>\"Menschen\"</code>, <code>'''mehrzeilige Strings'''</code>, ... <code>bool</code> Boolean Bin\u00e4re Wahrheitswerte <code>True</code>, <code>False</code> <code>None</code> None Nichts <code>None</code> <code>dict</code> Dictionary W\u00f6rterbuch <code>{'key': 'value'}</code> <p>Die Datentypen legen den Speicherplatz fest, den eine Variable belegt und bestimmen, welche Operationen auf den Variablen m\u00f6glich sind.</p> <p>Dynamische Typisierung</p> <p>Genauso wie in R ist python jedoch eine dynamisch typisierte Sprache. Das bedeutet, dass der Datentyp einer Variable nicht explizit angegeben werden muss, sondern automatisch ermittelt wird und auch nicht endg\u00fcltig festgelegt ist. Der Datentyp einer Variable kann sich also im Laufe des Programms \u00e4ndern.</p> <p>Noch ein paar Zusatzinformationen:</p> IntegerFloatStringBooleanNoneDictionary <p>In Python k\u00f6nnen ganzzahlen beliebig gro\u00df bzw. klein werden. Das ist sehr angenehm, da man mit ihnen also sicher addieren, subtrahieren, multiplizieren und ganz-zahl-dividieren (<code>%</code> bzw <code>//</code>) kann, ohne dass man sich verrechnet, weil man den Raum der Ganzen Zahlen verl\u00e4sst.</p> <p><code>int</code> und <code>float</code> kannst du immer daran unterscheiden, dass bei <code>float</code> ein <code>.</code> in der Darstellung der Zahl ist:</p> <pre><code>a = 1 # a speichert einen int\nb = 1.0 # b speichert einen float\n</code></pre> <p>Es gibt unendlich viele Zahlen mit Stellen nach dem Komma. Und schlimmer noch: zwischen zwei verschiedenen Kommazahlen gibt es immer eine die dazwischen liegt! Da wir au\u00dferdem noch f\u00fcr jede Kommazahl nur den gleichen endlichen Speicherplatz zur Verf\u00fcgung stellen, um sie zu speichern, egal wie gro\u00df sie ist (<code>1</code> zu speichern verbraucht genau so viel Speicher wie <code>1000000</code>), ist das Speichern von Kommazahlen ein echtes Problem.</p> <p>In Python erm\u00f6glicht der Datentyp <code>float</code> das Speichern von Kommazahlen, jedoch nicht perfekt:</p> <ul> <li>Nicht jede Kommazahl ist exakt darstelltbar.</li> <li>Es gibt (aus Sicht von Python) eine gr\u00f6\u00dfte und eine kleinste Flie\u00dfkommazahl</li> <li>Wenn zwei Kommazahlen addiert/multipliziert/... werden, kann es zu rechenfehlern kommen. </li> </ul> <p>Schau dir dieses Beispiel zum letzten Punkt an.</p> <p>Zeichenketten k\u00f6nnen sowohl mit doppelten, als auch mit einfachen Anf\u00fchrungsstrichen geschrieben werden.</p> <p>Der Datentyp Boolean hat genau diese zwei Auspr\u00e4gungen, denn er beschreibt den bin\u00e4ren Wahrheitsgehalt einer Aussage. Etwas stimmt, oder es stimmt nicht, da gibt es kein \"vielleicht\"!</p> <p><code>None</code> ist ein spezieller Datentyp, der nur einen Wert hat: <code>None</code>. Er wird oft verwendet, um zu signalisieren, dass eine Variable noch nicht initialisiert wurde.</p> <pre><code>Ein Dictionary ist eine Sammlung von Schl\u00fcssel-Wert-Paaren. Es ist eine Art W\u00f6rterbuch, in dem f\u00fcr jeden Schl\u00fcssel ein Wert hinterlegt ist. Au\u00dferhalb von Python wird ein Dictionary ofmals auch als JSON bezeichnet.\n</code></pre>"},{"location":"content/variables/nutzereingaben/","title":"Nutzereingaben","text":"Video <p>Mit der <code>print</code> Funktion k\u00f6nnen wir auf der Konsole eine Ausgabe erzeugen.</p> <p>Andererseits kann mit der Funktion <code>input</code> eine Eingabe des Nutzers auf der Konsole erwartet werden. Wenn die Funktion aufgerufen wird, wartet der Code so lange, bis eine Nutzereingabe get\u00e4tigt und mit Enter best\u00e4tigt wurde. Die Eingabe des Nutzers wird dann in einer Variablen gespeichert.</p> <pre><code>print('Sei gegr\u00fc\u00dft!')\nvorname = input('Wie hei\u00dft du?') # (1)!\nprint('Hallo') \nprint(vorname) # (2)!\n</code></pre> <ol> <li>Wenn <code>input</code> aufgerufen wird, sehen wir auf der Kommandozeile den Prompt <code>Wie hei\u00dft du</code>. Das Programm wartet jetzt auf unsere Eingabe. Unsere Eingabe wird dann in der Variablen <code>vorname</code> gespeichert.</li> <li>Hier wird die Eingabe wieder auf der Console ausgegeben.</li> </ol> Nutzereingabe erwarten <p>Ersetzten Sie die <code>...</code> im folgenden Code so, dass es einer Variable <code>vorname</code> der Name des Nutzers gespeichert wird. Danach soll in der Variable <code>alter</code> das Alter des Nutzers gespeichert werden.</p> <pre><code>... = ...('Wie hei\u00dft du?')\n... = ...('Wie alt bist du?')\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>vorname = input('Wie hei\u00dft du?')\nalter = input('Wie alt bist du?')\n</code></pre> Vorsicht beim Einlesen von Zahlen <p> </p> <p>Immer, wenn man Zahlen vom Nutzer einlesen will und mit diesem im Code rechnen m\u00f6chte, so muss man Python ganz explizit sagen, dass hier eine Zahl folgt. Verwenden sie daher folgenden Code:</p> <p>Bei Ganzzahlen nutze <code>int(input(...))</code>:</p> <pre><code>alter = int(input('Wie alt bist du?'))\nprint('In einem Jahr bist du:')\nprint(alter + 1)\n</code></pre> <p>Bei Flie\u00dfkommazahlen nutze <code>float(input(...))</code>:</p> <pre><code>preis = float(input('wie viel kostet das Produkt?))\nprint('Die Mehrwehrsteuer des Produktes betr\u00e4gt:')\nprint(preis * 0.18)\n</code></pre> <p>Note</p> <p>In R gibt es die Funktion <code>readline</code>, um Nutzereingaben zu lesen.</p> <pre><code># R\nalter &lt;- as.integer(readline('Wie alt bist du?'))\nprint(paste('In einem Jahr bist du:', alter + 1))\n</code></pre> Marsgewicht mit Eingabe <p>Bei diesem Programm wird das Gewicht auf dem Mars berechnet.</p> <pre><code>gewicht = 65\nmars_faktor = 0.38\nmars_gewicht = gewicht * mars_faktor\nprint(f'Dein Marsgewicht: {mars_gewicht}') # (1)!\n</code></pre> <ol> <li> <p>Wenn eine Zeichenkette mit <code>f</code> beginnt, so kann man in geschweiften Klammern <code>{...}</code> Variablen einf\u00fcgen. Dadurch werden die Inhalte der Variablen ausgelesen und eingef\u00fcgt. </p> <p>Diese sog. formatierten Strings sind sehr n\u00fctzlich und werden oft verwendet.</p> </li> </ol> <p>\u00c4ndern Sie das Programm, sodass der Nutzer sein eigenes Gewicht angeben kann.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>gewicht = int(input('Was wiegst du?')) # a\nmars_faktor = 0.37\nmars_gewicht = gewicht * mars_faktor\nprint(f'Dein Marsgewicht: {mars_gewicht}')\n</code></pre> BMI berechnen <p>Erstellen Sie das folgenden Programm, dass den BMI einer Person berechnet.</p> <p>Der Nutzer soll seine K\u00f6rpergr\u00f6\u00dfe in Metern angeben (z.B. <code>1.80</code>) und sein Gewicht in kg (z.B. <code>90</code>)</p> <p>Der BMI wird mit folgenden Formel berechnet:</p> \\[ \\text{BMI} = \\frac{\\text{Gewicht in kg}}{(\\text{K\u00f6rpergr\u00f6\u00dfe in m})^2} \\] <p>Geben Sie anschlie\u00dfend den BMI in einer Nachricht aus. (In diesem Beispiel \\(\\approx 27.78\\))</p> Tipp <p>Eine Zahl zu Quadrieren hei\u00dft, sie mit sich selbst zu multiplizieren. Das hei\u00dft du kannst auch folgende Formel verwenden:</p> \\[ \\text{BMI} = \\frac{\\text{Gewicht in kg}}{(\\text{K\u00f6rpergr\u00f6\u00dfe in m}) \\cdot (\\text{K\u00f6rpergr\u00f6\u00dfe in m)}} \\] <p>Um zwei Zahlen in Python miteinander zu dividieren nutzen Sie <code>/</code>. Z.B. <code>a = 7 / 8</code>.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>gewicht = float(input('Wie viel wiegst du in kg?'))\ngr\u00f6\u00dfe = float(input('Wie viel wiegst du in Metern?'))\n\nbmi = gewicht / (gr\u00f6\u00dfe * gr\u00f6\u00dfe)\n\nprint(f\"Dein BMI ist {bmi}\")\n</code></pre>"},{"location":"content/variables/variablen/","title":"Variablen","text":"Einf\u00fchrung in Variablen <p>In Python k\u00f6nnen wir Informationen in Variablen speichern.</p> <p>Man kann sich so eine Variable vorstellen, wie einen beschrifteten Schuhkarton in einem Schrank.  In so einen Schuhkarton kann man zu einem beliebigen Zeitpunkt:</p> <ul> <li>etwas hineintun; </li> <li>anschauen, was drin ist;</li> <li>durch etwas anderes austauschen.</li> </ul> <p>Genauso ist es auch bei Variablen.</p> <p>Schauen wir uns dazu den folgenden Code an:</p> <pre><code>a = 1 # (1)!\nprint(a) # (4)!\n\na = 2 # (2)!\nprint(a) # (5)!\n\na = a + 3 # (3)!\nprint(a) # (6)!\n</code></pre> <ol> <li>In der neuen Variablen <code>a</code> ist initial der Wert <code>1</code> gespeichert.</li> <li>In der Variablen <code>a</code> ist nun der Wert <code>2</code> gespeichert. Die <code>1</code> wird vergessen.</li> <li>Der Wert von <code>a</code> wird zun\u00e4chst ausgelesen und dann 3 dazuaddiert. Das Ergebnis (<code>5</code>) wird dann wieder in <code>a</code> gespeichert.</li> <li>Der Wert der Variablen <code>a</code> wird ausgelesen und in mit der <code>print</code>-Funktion auf der Konsole ausgegeben.</li> <li>Der Wert der Variablen <code>a</code> wird ausgelesen und in mit der <code>print</code>-Funktion auf der Konsole ausgegeben.</li> <li>Der Wert der Variablen <code>a</code> wird ausgelesen und in mit der <code>print</code>-Funktion auf der Konsole ausgegeben.</li> </ol> <p>Wir k\u00f6nnen uns das obige Beispiel nun noch einmal im Debugger ansehen:</p> <p>Code im Debugger</p> <p> </p> <p>'\"Das Gleichheitszeichen <code>=</code> bedeutet nicht \"ist gleich\" sondern \"ist nun\"!</p> <p>Das Gleichheitszeichen <code>=</code> in Python ist der sogenannte Zuordnungsoperator. Er dient dazu, Inhalte in einer Variablen zuzuordnen. Auf der linken Seite des <code>=</code> steht immer die Variable, in die wir etwas speichern wollen und auf der  rechten Seite, was wir in der Variablen speichern wollen.</p> <p>Am besten man lie\u00dft man Zeilen wie <code>a = 2</code> als: \"<code>a</code> hat nun den Wert <code>2</code>.\"</p> <p>Es ist nicht der Gleichheitsoperator, wie wir in aus der Mathematik kennen.</p> <p> </p> Variablen anlegen <p>Ersetzten Sie die <code>...</code> im folgenden Code so, dass es eine Variable <code>vorname</code> mit dem Wert <code>'Hans'</code> und eine Variable <code>alter</code> mit dem Wert <code>32</code> gibt.</p> <pre><code>... = 'Hans'\n... = 32\n</code></pre> L\u00f6sung <pre><code>vorname = 'Hans'\nalter = 32\n</code></pre> <p>Auch folgende Notation ist m\u00f6glich:</p> <pre><code>vorname, alter = 'Hans', 32\n</code></pre> Variablenbef\u00fcllung voraussagen <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>a = 3\nb = 5\n\nprint(a)\nprint(b)\nprint(a+b)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>a = 3\nb = 5\n\nprint(a) # 3\nprint(b) # 5\nprint(a+b) # 8\n</code></pre> Variablenbef\u00fcllung voraussagen mit Falle <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>preis = 3\nprint(preis)\n\npreis = preis + 4\nprint(preis)\n\nprint(preis + 5)\n\nprint(preis)\n</code></pre> Tipp <p>Der Inhalt einer Variablen wird nur dann neu bef\u00fcllt, wenn auch der Zuordnungsoperator <code>=</code> aufgerufen wird.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>preis = 3\nprint(preis) # 3\n\npreis = preis + 4\nprint(preis) # 7\n\nprint(preis + 5) # 12\n\nprint(preis) # 7\n</code></pre> Variablenbef\u00fcllung voraussagen mit vielen Fallen <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>a = 3\nb = 2\nc = a + b\nb = a\na = a - b * c\n\nprint(a)\nprint(b)\nprint(c)\n</code></pre> Tipp <ul> <li>Erstellen Sie eine Tabelle, in der Sie f\u00fcr jede Zeile sagen, welchen Wert jede Variable nach dieser Zeile hat:</li> </ul> Code a b c <code>a = 3</code> <code>b = 2</code> <code>c = a+b</code> <code>b = a</code> <code>a = a - b * c</code> <ul> <li> <p><code>b = a</code> bedeutet, dass <code>b</code> nun den Wert von <code>a</code> hat.</p> </li> <li> <p><code>*</code> beschreibt das Multiplizieren.</p> </li> <li> <p>Denken Sie an die Punkt- vor Strichrechnung.</p> </li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> Code a b c <code>a = 3</code> <code>3</code> <code>b = 2</code> <code>3</code> <code>2</code> <code>c = a+b</code> <code>3</code> <code>2</code> <code>5</code> <code>b = a</code> <code>3</code> <code>3</code> <code>5</code> <code>a = a - b * c</code> <code>-12</code> <code>3</code> <code>5</code> <p>Auf der Console erscheint: <pre><code>-12\n3\n5\n</code></pre></p> Variablenbenennung <p>In Python darf ein Variablenname nur aus Buchstaben, Ziffern und Unterstrichen bestehen. Und Sie darf nicht mit einer Ziffer beginnen.</p> <p>Welche der folgenden sind erlaubte Variablennamen?</p> <ul> <li><code>name_1</code></li> <li><code>1name</code></li> <li><code>name!</code></li> <li><code>_alter</code></li> <li><code>Alter</code></li> <li><code>\u20acin$</code></li> <li><code>euro_in_dollar</code></li> <li><code>z</code></li> <li><code>_</code></li> <li><code>__init__</code></li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <ul> <li><code>name_1</code> \u2705</li> <li><code>1name</code> \u274c</li> <li><code>name!</code> \u274c</li> <li><code>_alter</code> \u2705</li> <li><code>Alter</code> \u2705</li> <li><code>\u20acin$</code> \u274c</li> <li><code>euro_in_dollar</code> \u2705</li> <li><code>z</code> \u2705</li> <li><code>_</code> \u2705</li> <li><code>__init__</code> \u2705</li> </ul> Variableninhalte tauschen <p>Ersetzen Sie die <code>...</code> im folgendne Code so, dass <code>preis_a</code> und <code>preis_b</code> den Inhalt tauschen.</p> <pre><code>preis_a = 10\npreis_b = 5\n\n...\n...\n...\n\nprint(preis_a) # 5\nprint(preis_b) # 10\n</code></pre> Tipp <p>Nutzen Sie eine Variable <code>z</code> als Zwischenspeicher.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>preis_a = 10\npreis_b = 5\n\nz = preis_b\npreis_b = preis_a\npreis_a = z\n\nprint(preis_a) # 5\nprint(preis_b) # 10\n</code></pre> Marsgewicht <p>Erstellen Sie das folgenden Programm:</p> <ul> <li>In der Variablen <code>gewicht</code> steht ein Gewicht (z.B. \\(65\\) kg)</li> <li>In einer zweiten Variablen <code>mars_faktor</code> steht die Zahl <code>0.38</code>.</li> <li>In einer dritten Variablen <code>mars_gewicht</code> soll das Gewicht auf dem Markt gespeichert werden. Dies wird berechnet, indem <code>gewicht</code> und <code>mars_faktor</code> miteinander multipliziert werden.  </li> <li>Auf der Konsole soll nun das <code>mars_gewicht</code> ausgegeben werden. (In diesem Beispiel \\(24.7\\))</li> </ul> <p>Hier ist Schwerkraftrechner mit dem Sie ihr Programm \u00fcberpr\u00fcfen k\u00f6nnen.</p> <p>\ud83d\ude80Bonus: Erweitern Sie Ihr Programm gerne um weitere Planeten.</p> Tipp <p>Kommazahlen wie \\(0,38\\) werden in Python mit einem Punkt, statt einem Komma geschrieben, also <code>0.38</code></p> <p>Um zwei Zahlen in Python miteinander zu multiplizieren nutzen sie <code>*</code>. Z.B. <code>a = 7 * 8</code>.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>gewicht = 65\nmars_faktor = 0.38\nmars_gewicht = gewicht * mars_faktor\n</code></pre>"},{"location":"content/visualization/matplotlib/","title":"Matplotlib","text":"<p>Die\u00a0Matplotlib\u00a0ist eine umfangreichste Bibliothek, mit deren Hilfe verschiedene Diagrammtypen wie Linien-, Stab- oder Kuchendiagramme, Histogramme, Boxplots, Kontourdiagramme, aber auch dreidimensionale Diagramme und Funktionenplots auf einfache Weise erstellt werden k\u00f6nnen.</p> <p>Als erstes muss das Modul importiert werden: <pre><code>import matplotlib.pyplot as plt\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#liniendiagramm","title":"Liniendiagramm","text":"<p>Als Einf\u00fchrungsbeispiel werden wir lernen wie man Liniendiagramme erstellt. Mit der Methode <code>plot()</code> kann man 2D-Grafiken erstellen. Dazu muss man als Parameter eine Liste oder Array mit Werten f\u00fcr die x -und y-Achse \u00fcbergeben. Mit der Methode <code>show()</code> wird die Grafik sichtbar.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Use the plot method  \nplt.plot(x, y)  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Man kann auch einen Titel zu der Grafik hinzuf\u00fcgen: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Use the plot method  \nplt.plot(x, y)  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Auch die Beschriftung der beiden Achsen ist m\u00f6glich: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y)  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Man kann die Schrittl\u00e4nge der x -und y-Werte auf den Achsen \u00e4ndern.  Dazu verwendet man die Methode <code>xticks</code>  und <code>yticks</code>.</p> <p>Zum Beispiel sollen nur Ganzzahlen abgebildet werden: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y)  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Es ist m\u00f6glich eine Legende f\u00fcr eine bessere \u00dcbersicht hinzuzuf\u00fcgen. Als erstes muss man dem jeweiligen Plot durch den Parameter <code>label</code> eine Beschriftung geben. Ich nenne den Plot einfach <code>2x</code>. Dann erst kann man die Methode <code>legend()</code> verwendet um eine Legende zu erstellen.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y, label=\"2x\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Das Aussehen der Linie, wie zum Beispiel Farbe, Dicke, Linienart, l\u00e4sst sich beliebig anpassen. Dazu verwendet man in der <code>plot()</code> Methode unterschiedliche Parameter.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y, label=\"2x\", color=\"red\", linewidth=2, marker=\".\", markersize=10, markeredgecolor=\"blue\", linestyle=\"--\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Jedoch wird es h\u00e4ufig schnell un\u00fcbersichtlich wenn man viele Parameter verwendet. Man kann eine sogenannte \"shorthand notation\" verwenden, welche es uns erlaubt schnell Anpassungen vorzunehmen ohne die Angabe von vielen Parametern. Die \"shorthand notation\" sieht folgenderma\u00dfen aus:  <code>fmt=\"[color][marker][line]\"</code></p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Shorthand notation  \nfmt = \"r.--\"  \n# Use the plot method  \nplt.plot(x, y, fmt, label=\"2x\",  linewidth=2,  markersize=10, markeredgecolor=\"blue\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Man kann in dem Koordinatensystem selbst Texte platzieren. Dazu verwendet man die Methode <code>text()</code>. Dieser Methode muss man on der folgenden Reihenfolge Parameter \u00fcbergeben: - xcoord - ycoord - \"Your Text\"</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Shorthand notation  \nfmt = \"r.--\"  \n# Use the plot method  \nplt.plot(x, y, fmt, label=\"2x\",  linewidth=2,  markersize=10, markeredgecolor=\"blue\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Add Text  \nplt.text(1, 6, \"Die Funktion ist steigend\")  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Manchmal m\u00f6chte man das gesamte Aussehen \u00e4ndern ohne selbstst\u00e4ndig jedes Einzelne Element anzupassen. Dazu gibt es sogenannte \"style sheets\", sie werden durch <code>plt.style.use('style sheet')</code> gesetzt. In den Runden Klammern wird dann der Name des jeweiligen \"style sheet\" gesetzt, die Namen findet man in der Dokumentation.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Styling  \nplt.style.use('seaborn-v0_8-dark')  \n# print(plt.style.available)  # With this you can check valid style names  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Shorthand notation  \nfmt = \"r.--\"  \n# Use the plot method  \nplt.plot(x, y, fmt, label=\"2x\",  linewidth=2,  markersize=10, markeredgecolor=\"blue\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Add Text  \nplt.text(1, 6, \"Die Funktion ist steigend\")  \n# Display the plot  \nplt.show()\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#funktionen-plotten","title":"Funktionen plotten","text":"<p>Die Idee besteht darin, anhand einer Wertetabelle die Funktionen zu plotten. Bei Funktionen in der Ebene ben\u00f6tigt man die x -und y-Werte. die x-Werte kann man sich beliebig heraussuchen und die y-Werte werden durch die Funktionsgleichung berechnet. Am Ende m\u00fcssen die Werte in separaten Listen vorliegen.</p> <p>Am Anfang arbeiten wir mit Listen was jedoch sehr unpraktisch ist. Sp\u00e4ter werden wir das Modul <code>numpy</code> kennen lernen, welche uns optimalere nummerische Berechnungen erm\u00f6glichen wird. Dabei wird man einen neuen Datentyp kennen lernen welchen man anstelle der Listen verwendet.</p>"},{"location":"content/visualization/matplotlib/#normalparabel","title":"Normalparabel","text":"<pre><code>import matplotlib.pyplot as plt  \n\n# Define x-values  \nx = []  \nfor index in range(-10, 11):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(index ** 2)  \n\n# Plot function  \nplt.plot(x, y)  \n\nplt.show()\n</code></pre>"},{"location":"content/visualization/matplotlib/#allgemeine-parabel","title":"Allgemeine Parabel","text":"<pre><code>import matplotlib.pyplot as plt  \n# Parameters y=a*x^2 + b*x + c  \na = 0.5  \nb = 3  \nc = -2  \n# Define x-values  \nx = []  \nfor index in range(-20, 22):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(a * (index ** 2) + (b * index) + c)  \n\n# Plot function  \nplt.plot(x, y)  \n\nplt.show()\n</code></pre>"},{"location":"content/visualization/matplotlib/#groenanpassung","title":"Gr\u00f6\u00dfenanpassung","text":"<p>Es ist m\u00f6glich die Ma\u00dfe des Bilder anzupassen. Dazu ben\u00f6tigt man die Methode <code>figure()</code>. Innerhalb dieser Methode wird ein Parameter \u00fcbergeben, womit die Breite und H\u00f6he des Fensters angegeben wird in zoll.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n\n# Define x-values  \nx = []  \nfor index in range(-10, 11):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(index ** 2)  \n# Resize the window  \nplt.figure(figsize=(5,3), dpi=300)  # 5x3 inch (5*300=1500px and 3*300=900px)  \n\n# Plot function  \nplt.plot(x, y)  \n\nplt.show()\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#plot-speichern","title":"Plot Speichern","text":"<p>Mit der Methode <code>savefig()</code> kann man seinen Plot exportieren.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n\n# Define x-values  \nx = []  \nfor index in range(-10, 11):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(index ** 2)  \n# Resize the window  \nplt.figure(figsize=(5,3), dpi=300)  # 5x3 inch (5*300=1500px and 3*300=900px)  \n\n# Plot function  \nplt.plot(x, y)  \n# Export the plot  \nplt.savefig(\"Quadratische_Funktion.png\", dpi=300)  \nplt.show()\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#grundprinzip","title":"Grundprinzip","text":"<p>Bisher wurden alle Plots einfach in das gerade aktive Plot Fenster gemalt. F\u00fcr etwas kompliziertere Plots sollte man sich etwas mehr M\u00fche geben. Au\u00dferdem sollte man sich ein allgemeines Vorgehen zur Anfertigung von Plots aneignen, an welches man sich h\u00e4lt. Ansonsten verliert man schnell die \u00dcbersicht weil es sehr viele Wege gibt, die zum Ziel f\u00fchren.</p> <p>Die Diagramme in <code>matplotlib</code> befinden sich in einem <code>Figure</code> Objekt. Mit <code>plt.figure()</code> l\u00e4sst sich so ein <code>Figure</code> Objekt erzeugen. </p> <p>Innerhalb des \"Figure\" befindet sich noch die sogenannte \"Axes\". Dies ist das, was man sich unter einem Plot vorstellt, es ist der Bereich des Bildes mit den Daten.  Wenn man ein <code>Axes</code> Objekt erstellt, kann man damit dann alle Details des Plots steuern (z.B. Titel, Plot-Typ...).</p> <p>\"Axis\" ist die Achse des Diagramms, die mit Achsentitel versehen wird, einen bestimmten Intervall hat und so weiter. Dabei k\u00f6nnen entweder 2 Achsen oder auch 3 enthalten sein.</p> <p>![[axes_axis.png]]</p>"},{"location":"content/visualization/matplotlib/#figure-und-axes-objekte","title":"Figure und Axes Objekte","text":""},{"location":"content/visualization/matplotlib/#figure","title":"Figure","text":"<p>Die Methode <code>plt.figure()</code> erzeugt ein <code>Figure</code> Objekt <pre><code>fig = plt.figure()\n</code></pre> Durch die <code>figure()</code> Methode lassen sich viele Einstellungen vornehmen. Man kann wichtige Parameter wie <code>dpi</code>, <code>figsize</code>, <code>linewidth</code> und so weiter nutzen, um das Erscheinungsbild zu ver\u00e4ndern.</p>"},{"location":"content/visualization/matplotlib/#axes","title":"Axes","text":"<p>Ein \"Figure\" kann mehrere \"Axes\" beinhalten, jedoch kann ein \"Axes\" nur zu einem \"Figure\" geh\u00f6ren. Mit der Methode <code>axes()</code> kann man ein <code>Axes</code> Objekt erstellen: <pre><code>ax = plt.axes()\n</code></pre></p> <p>Diese \"Axes\" geh\u00f6rt dann dem oben zuvor definierten \"Figure\". Als Parameter steht normalerweise ein Tupel:  <code>axes((0.2, 0.2, 0.9, 0.9))</code> Die Bedeutung des Tupels ist folgenderma\u00dfen zu verstehen: - Erste Zahl:   Abstand von der linken Seite des Figure (20%) - Zweite Zahl:   Abstand von der unteren Seite des Figure (20%) - Dritte Zahl:   Breite des \"Axes\" von links nach rechts (90%) - Vierte Zahl:   H\u00f6he des \"Axes\" von unten nach oben (90%)</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt\nfig1 = plt.figure()\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#die-plot-methode","title":"Die plot() - Methode","text":"<p>Mithilfe der <code>plot()</code> kann man \"Plots\" im Axes-Bereich erstellen. Dazu muss man die Methode auf einen <code>Axes</code> Objekt anwenden.</p> <p>Beispiel:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np \n\n# Create a figure\nfig1 = plt.figure()\n# Create axes objects\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n\n# Create values for plot\nX = np.linspace(-np.pi, np.pi, 25) \nY1 = np.cos(X) \nY2 = np.sin(X)\nY3 = X ** 2\nY4 = 2 * X + 1\nY5 = X ** 3 - 1\n\n# Plot in specific axes\np1 = ax1.plot(X, Y1)\np2 = ax2.plot(X, Y2)\np3 = ax3.plot(X, Y3)\n\n\n# Create one more figure\nfig2 = plt.figure()\n# Create axes objects\nax4 = plt.axes((0.2, 0.2, 0.5, 0.5))\nax5 = plt.axes((1.2, 0.2, 0.5, 0.5))\n\n# Plot in specific axes\np4 = ax4.plot(X, Y4)\np5 = ax5.plot(X, Y5)\n\n# Zum speichern der beiden Figure Objekte\nfig1.savefig(\"plt1.png\", bbox_inches='tight')\nfig2.savefig(\"plt2.png\", bbox_inches='tight')\n</code></pre>"},{"location":"content/visualization/matplotlib/#axis","title":"Axis","text":"<p>Mithilfe von <code>ax.axis()</code> kann man die Koordinatenachsen eines <code>Axes</code> Objekt steuern. Dabei muss es immer unter den jeweiligen Axes-Objekt stehen. Als Parameter muss man eine Liste \u00fcbergeben welche wie folgt aussieht: <code>[x_min, x_max, y_min, y_max]</code></p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np \n# Create a figure\nfig1 = plt.figure()\n\n# Create axes objects\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n\n# Set axis ticks\nax1.axis([-2, 2, 0, 1])\nax2.axis([-2, 2, -1, 1])\nax3.axis([-5, 5, 0, 5])\n\n\n# Create values for plot\nX = np.linspace(-np.pi, np.pi, 25) \nY1 = np.cos(X) \nY2 = np.sin(X)\nY3 = X ** 2\n\n# Plot in specific axes\np1 = ax1.plot(X, Y1)\np2 = ax2.plot(X, Y2)\np3 = ax3.plot(X, Y3)\n\n\nfig1.savefig(\"plt1.png\", bbox_inches='tight')\n</code></pre> <p>Man kann sowohl Titel und Achsenbeschriftungen setzen indem man auf das jeweilige <code>Axes</code> Objekt zugreift:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np \n# Create a figure\nfig1 = plt.figure()\n\n# Create axes objects\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n\n# Set axis ticks\nax1.axis([-2, 2, 0, 1])\nax2.axis([-2, 2, -1, 1])\nax3.axis([-5, 5, 0, 5])\n\n# Set title\nax1.set_title(\"Axes1\")\nax2.set_title(\"Axes2\")\nax3.set_title(\"Axes3\")\n\n# Set axis labels\nax1.set_xlabel(\"x-Werte\")\nax2.set_xlabel(\"x-Werte\")\nax3.set_xlabel(\"x-Werte\")\nax1.set_ylabel(\"y-Werte\")\nax2.set_ylabel(\"y-Werte\")\nax3.set_ylabel(\"y-Werte\")\n\n# Create values for plot\nX = np.linspace(-np.pi, np.pi, 25) \nY1 = np.cos(X) \nY2 = np.sin(X)\nY3 = X ** 2\n\n# Plot in specific axes\np1 = ax1.plot(X, Y1)\np2 = ax2.plot(X, Y2)\np3 = ax3.plot(X, Y3)\n\n\nfig1.savefig(\"plt1.png\", bbox_inches='tight')\n</code></pre> <p>Jetzt muss man jedoch die Abst\u00e4nde anpassen damit der y-Achsen Titel genug Platz hat. Dazu korrigiert man <code>ax3 = plt.axes((0.2, -0.8, 1.9, 0.8))</code>:</p>"},{"location":"content/visualization/matplotlib/#zusammenfassung","title":"Zusammenfassung","text":"<ul> <li>Vermeide die Nutzung von <code>plt.plot()</code>, <code>plt.title()</code>, <code>plt.xlabel()</code> und so weiter,  ansonsten wei\u00df man sp\u00e4ter nicht worauf sich die Zeile bezogen hatte</li> <li>Verstehe die Terminologie, was ist ein Figure, Axes und Axis</li> <li>Lerne nicht alle Parameter auswendig, siehe in der Dokumentation nach</li> </ul>"},{"location":"content/visualization/plotly/","title":"Plotly","text":"<p>Neben Matplotlib und SeaBorn ist Plotly die dritte gro\u00dfe Bibliothek f\u00fcr die Visualisierung von Daten in Python. Plotly ist eine interaktive Bibliothek, die es erm\u00f6glicht, Diagramme zu erstellen, die interaktiv sind. </p> <p>Zwar ist Plotly weniger performant als Matplotlib, bietet daf\u00fcr jedoch optisch ansprechendere Diagramme und interaktive Charts.</p> <p>Beispiel:</p> <pre><code>import plotly.express as px\nimport pandas as pd\n\n# Create a DataFrame\ndata = {\n    \"Name\": [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n    \"Age\": [23, 34, 45, 56],\n    \"City\": [\"New York\", \"Berlin\", \"London\", \"Paris\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a scatter plot\nfig = px.scatter(df, x=\"Name\", y=\"Age\", color=\"City\")\n\n# Show the plot\nfig.show()\n</code></pre> <p>Plotly hat auch die M\u00f6glichkeit, fortgeschrittene Diagramme wie Karten oder auch 3D-Diagramme zu erstellen.</p> <p>Beispiel:</p> <pre><code>import plotly.express as px\nimport pandas as pd\n\n# Create a DataFrame\ndata = {\n    \"Name\": [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n    \"Age\": [23, 34, 45, 56],\n    \"City\": [\"New York\", \"Berlin\", \"London\", \"Paris\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a 3D scatter plot\nfig = px.scatter_3d(df, x=\"Name\", y=\"Age\", z=\"City\", color=\"City\")\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"content/visualization/seaborn/","title":"Seaborn","text":"<p>Seaborn ist eine Python-Bibliothek, die auf Matplotlib basiert und die Erstellung von ansprechenden und informativen Diagrammen erleichtert. Seaborn bietet eine Vielzahl von Diagrammtypen und Stilen, die es erm\u00f6glichen, Daten auf einfache Weise zu visualisieren.</p> <p>Die Grafiken von Seaborn \u00e4hneln denen von ggplot2, einer beliebten Visualisierungsbibliothek in R.</p> <p>Ein Plot in Seaborn basiert in der Regel auf einem DataFrame, das die Daten enth\u00e4lt, die visualisiert werden sollen. Die Daten werden dann in einem Plot dargestellt, der auf den Daten basiert.</p> <p>Beispiel:</p> <pre><code>import seaborn as sns\nimport pandas as pd\n\n# Create a DataFrame\ndata = {\n    \"Name\": [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n    \"Age\": [23, 34, 45, 56],\n    \"City\": [\"New York\", \"Berlin\", \"London\", \"Paris\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a scatter plot\nsns.scatterplot(data=df, x=\"Name\", y=\"Age\", hue=\"City\")\n\n# Show the plot\nplt.show()\n</code></pre> <p>In diesem Beispiel haben wir ein Streudiagramm erstellt, das die Namen und das Alter der Personen aus dem DataFrame <code>df</code> anzeigt. Die Punktfarben werden basierend auf der Stadt der Person eingef\u00e4rbt.</p> <p>Seaborn bietet eine Vielzahl von Diagrammtypen und Stilen, die es erm\u00f6glichen, Daten auf einfache und ansprechende Weise zu visualisieren. Es ist eine leistungsstarke Bibliothek f\u00fcr die Datenvisualisierung in Python.</p> <p>Au\u00dferdem gibt es in Seaborn n\u00fctzlich Funktionen, um sich einen ersten \u00dcberblick zu den Daten zu verschaffen. Zum Beispiel k\u00f6nnen wir in Seaborn die Funktion <code>pairplot()</code> verwenden, um Beziehungen zwischen den numerischen Spalten eines DataFrames zu visualisieren.</p> <p>Beispiel:</p> <pre><code>import seaborn as sns\nimport pandas as pd\n\n# Load a dataset\ndf = sns.load_dataset(\"iris\")\n\n# Create a pairplot\nsns.pairplot(df)\n\n# Show the plot\nplt.show()\n</code></pre> <p>In diesem Beispiel haben wir ein Paardiagramm erstellt, das Beziehungen zwischen den numerischen Spalten des Iris-Datensatzes visualisiert. Dies kann n\u00fctzlich sein, um Muster und Beziehungen zwischen den Variablen zu erkennen.</p>"},{"location":"content/visualization/streamlit/","title":"Streamlit","text":"<p>Wenn Sie kleine interaktive Dashboards erstellen m\u00f6chten, kann Streamlit eine gut Wahl sein. Stramlit ist eine Open-Source-Bibliothek, die es erm\u00f6glicht, Webanwendungen mit Python zu erstellen. Streamlit ist einfach zu bedienen und erfordert nur wenige Zeilen Code, um eine Webanwendung zu erstellen.</p> <p>Beispiel</p> <pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n\n# Create a simple dataframe\ndata = pd.DataFrame(\n    np.random.randn(50, 3),\n    columns=['a', 'b', 'c']\n)\n\n# Display the dataframe\nst.write(data)\n\n# Create a line chart\nst.line_chart(data)\n</code></pre> <p>Einen \u00dcberblick zu den Funktionen von Streamlit finden Sie hier.</p>"},{"location":"content/visualization/visualization/","title":"Visualisierungen in Python","text":"<p>Im gegensatz zu R, wo ggplot2 die Standardbibliothek f\u00fcr die Visualisierung von Daten ist, gibt es in Python mehrere Bibliotheken, die f\u00fcr die Visualisierung von Daten verwendet werden k\u00f6nnen. Die drei bekanntesten Bibliotheken sind Matplotlib, Seaborn und Plotly.</p> <p>Welche der Bibliotheken Sie verwenden ist mehr oder weniger eine Frage des Geschmacks. Matplotlib ist die Standardbibliothek f\u00fcr die Visualisierung von Daten in Python und bietet eine Vielzahl von Diagrammtypen und Stilen. Seaborn ist eine auf Matplotlib basierende Bibliothek, die die Erstellung von ansprechenden und informativen Diagrammen erleichtert. Plotly ist eine interaktive Bibliothek, die es erm\u00f6glicht, Diagramme zu erstellen, die interaktiv sind.</p> <p>Dar\u00fcber hinaus k\u00f6nnen wir in Python mit Dash und Streamlit ganze Dashboards erstellen. Diese sind \u00e4hnlich zu Shiny in R und erm\u00f6glichen es, interaktive Webanwendungen mit Python zu erstellen.</p>"}]}